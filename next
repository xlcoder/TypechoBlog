./var/HyperDown.php:        $this->_footnotes = array();
./var/HyperDown.php:        $this->_definitions = array();
./var/HyperDown.php:        $this->_holders = array();
./var/HyperDown.php:        $this->_uniqid = md5(uniqid());
./var/HyperDown.php:        $this->_id = 0;
./var/HyperDown.php:        $text = $this->initText($text);
./var/HyperDown.php:        $html = $this->parse($text);
./var/HyperDown.php:        return $this->makeFootnotes($html); 
./var/HyperDown.php:        $this->_hooks[$type][] = $callback;
./var/HyperDown.php:        $key = "|\r" . $this->_uniqid . $this->_id . "\r|";
./var/HyperDown.php:        $this->_id ++;
./var/HyperDown.php:        $this->_holders[$key] = $str;
./var/HyperDown.php:        if (count($this->_footnotes) > 0) {
./var/HyperDown.php:            while ($val = array_shift($this->_footnotes)) {
./var/HyperDown.php:                    $val = count($val) > 1 ? $this->parse(implode("\n", $val)) : $this->parseInline($val[0]);
./var/HyperDown.php:        $blocks = $this->parseBlock($text, $lines);
./var/HyperDown.php:            $extract = $this->call('before' . ucfirst($method), $extract, $value);
./var/HyperDown.php:            $result = $this->{$method}($extract, $value);
./var/HyperDown.php:            $result = $this->call('after' . ucfirst($method), $result, $value);
./var/HyperDown.php:        if (empty($this->_hooks[$type])) {
./var/HyperDown.php:        foreach ($this->_hooks[$type] as $callback) {
./var/HyperDown.php:            $text = str_replace(array_keys($this->_holders), array_values($this->_holders), $text);
./var/HyperDown.php:            $this->_holders = array();
./var/HyperDown.php:        $text = $this->call('beforeParseInline', $text);
./var/HyperDown.php:            return $matches[1] . $this->makeHolder('<code>' . htmlspecialchars($matches[3]) . '</code>');
./var/HyperDown.php:            return $this->makeHolder("<a href=\"{$matches[1]}\">{$matches[1]}</a>");
./var/HyperDown.php:            if (stripos($this->_commonWhiteList . '|' . $whiteList, $matches[2]) !== false) {
./var/HyperDown.php:                return $this->makeHolder($matches[0]);
./var/HyperDown.php:            $id = array_search($matches[1], $this->_footnotes);
./var/HyperDown.php:                $id = count($this->_footnotes) + 1;
./var/HyperDown.php:                $this->_footnotes[$id] = $this->parseInline($matches[1], '', false);
./var/HyperDown.php:            return $this->makeHolder("<sup id=\"fnref-{$id}\"><a href=\"#fn-{$id}\" class=\"footnote-ref\">{$id}</a></sup>");
./var/HyperDown.php:            $escaped = $this->escapeBracket($matches[1]);
./var/HyperDown.php:            $url = $this->escapeBracket($matches[2]);
./var/HyperDown.php:            return $this->makeHolder("<img src=\"{$url}\" alt=\"{$escaped}\" title=\"{$escaped}\">");
./var/HyperDown.php:            $escaped = $this->escapeBracket($matches[1]);
./var/HyperDown.php:            $result = isset($this->_definitions[$matches[2]]) ?
./var/HyperDown.php:                "<img src=\"{$this->_definitions[$matches[2]]}\" alt=\"{$escaped}\" title=\"{$escaped}\">"
./var/HyperDown.php:            return $this->makeHolder($result);
./var/HyperDown.php:            $escaped = $this->parseInline($this->escapeBracket($matches[1]), '', false);
./var/HyperDown.php:            $url = $this->escapeBracket($matches[2]);
./var/HyperDown.php:            return $this->makeHolder("<a href=\"{$url}\">{$escaped}</a>");
./var/HyperDown.php:            $escaped = $this->parseInline($this->escapeBracket($matches[1]), '', false);
./var/HyperDown.php:            $result = isset($this->_definitions[$matches[2]]) ?
./var/HyperDown.php:                "<a href=\"{$this->_definitions[$matches[2]]}\">{$escaped}</a>"
./var/HyperDown.php:            return $this->makeHolder($result);
./var/HyperDown.php:            return $this->makeHolder(htmlspecialchars($matches[1]));
./var/HyperDown.php:        $text = $this->parseInlineCallback($text);
./var/HyperDown.php:        $text = $this->call('afterParseInlineBeforeRelease', $text);
./var/HyperDown.php:        $text = $this->releaseHolder($text, $clearHolders);
./var/HyperDown.php:        $text = $this->call('afterParseInline', $text);
./var/HyperDown.php:            return '<strong><em>' . $this->parseInlineCallback($matches[2]) . '</em></strong>';
./var/HyperDown.php:            return '<strong>' . $this->parseInlineCallback($matches[2]) . '</strong>';
./var/HyperDown.php:            return '<em>' . $this->parseInlineCallback($matches[2]) . '</em>';
./var/HyperDown.php:            return $matches[1] . '<strong><em>' . $this->parseInlineCallback($matches[3]) . '</em></strong>' . $matches[4];
./var/HyperDown.php:            return $matches[1] . '<strong>' . $this->parseInlineCallback($matches[3]) . '</strong>' . $matches[4];
./var/HyperDown.php:            return $matches[1] . '<em>' . $this->parseInlineCallback($matches[3]) . '</em>' . $matches[4];
./var/HyperDown.php:            return '<del>' . $this->parseInlineCallback($matches[2]) . '</del>';
./var/HyperDown.php:        $this->_blocks = array();
./var/HyperDown.php:        $this->_current = 'normal';
./var/HyperDown.php:        $this->_pos = -1;
./var/HyperDown.php:        $special = implode("|", array_keys($this->_specialWhiteList));
./var/HyperDown.php:            $block = $this->getBlock();
./var/HyperDown.php:                if ($this->isBlock('code')) {
./var/HyperDown.php:                        $this->combineBlock()
./var/HyperDown.php:                        $this->setBlock($key)
./var/HyperDown.php:                    if ($this->isBlock('list')) {
./var/HyperDown.php:                    $this->startBlock('code', $key, array($matches[1], $matches[3], $isAfterList));
./var/HyperDown.php:            } else if ($this->isBlock('code')) {
./var/HyperDown.php:                $this->setBlock($key);
./var/HyperDown.php:                if ($this->isBlock('pre') || $this->isBlock('list')) {
./var/HyperDown.php:                    $this->setBlock($key);
./var/HyperDown.php:                } else if ($this->isBlock('normal')) {
./var/HyperDown.php:                    $this->startBlock('pre', $key);
./var/HyperDown.php:                if (!$this->isBlock('html', $tag) && !$this->isBlock('pre')) {
./var/HyperDown.php:                    $this->startBlock('html', $key, $tag);
./var/HyperDown.php:                if ($this->isBlock('html', $tag)) {
./var/HyperDown.php:                    $this->setBlock($key)
./var/HyperDown.php:            } else if ($this->isBlock('html')) {
./var/HyperDown.php:                $this->setBlock($key);
./var/HyperDown.php:                    if ($this->isBlock('list')) {
./var/HyperDown.php:                        $this->setBlock($key, $space);
./var/HyperDown.php:                        $this->startBlock('list', $key, $space);
./var/HyperDown.php:                    $this->startBlock('footnote', $key, array($space, $matches[1]));
./var/HyperDown.php:                    $this->_definitions[$matches[1]] = $matches[2];
./var/HyperDown.php:                    $this->startBlock('definition', $key)
./var/HyperDown.php:                    if ($this->isBlock('quote')) {
./var/HyperDown.php:                        $this->setBlock($key);
./var/HyperDown.php:                        $this->startBlock('quote', $key);
./var/HyperDown.php:                    if ($this->isBlock('normal')) {
./var/HyperDown.php:                            $this->startBlock('table', $key);
./var/HyperDown.php:                            $this->backBlock(1, 'table');
./var/HyperDown.php:                        $this->setBlock($key, array($head, $aligns));
./var/HyperDown.php:                    $this->startBlock('sh', $key, $num)
./var/HyperDown.php:                    if ($this->isBlock('normal')) {
./var/HyperDown.php:                        $this->backBlock(1, 'mh', $matches[1][0] == '=' ? 1 : 2)
./var/HyperDown.php:                        $this->startBlock('normal', $key);
./var/HyperDown.php:                    $this->startBlock('hr', $key)
./var/HyperDown.php:                    if ($this->isBlock('list')) {
./var/HyperDown.php:                                $this->startBlock('normal', $key);
./var/HyperDown.php:                                $this->setBlock($key);
./var/HyperDown.php:                            $this->setBlock($key);
./var/HyperDown.php:                            $this->startBlock('normal', $key);
./var/HyperDown.php:                    } else if ($this->isBlock('footnote')) {
./var/HyperDown.php:                            $this->setBlock($key);
./var/HyperDown.php:                            $this->startBlock('normal', $key);
./var/HyperDown.php:                    } else if ($this->isBlock('table')) {
./var/HyperDown.php:                            $this->setBlock($key);
./var/HyperDown.php:                            $this->startBlock('normal', $key);
./var/HyperDown.php:                    } else if ($this->isBlock('pre')) {
./var/HyperDown.php:                                $this->startBlock('normal', $key);
./var/HyperDown.php:                                $this->setBlock($key);
./var/HyperDown.php:                            $this->startBlock('normal', $key);
./var/HyperDown.php:                    } else if ($this->isBlock('quote')) {
./var/HyperDown.php:                                $this->startBlock('normal', $key);
./var/HyperDown.php:                                $this->setBlock($key);
./var/HyperDown.php:                            $this->setBlock($key);
./var/HyperDown.php:                            $this->startBlock('normal', $key);
./var/HyperDown.php:                            $this->startBlock('normal', $key);
./var/HyperDown.php:                            $this->setBlock($key);
./var/HyperDown.php:        return $this->optimizeBlocks($this->_blocks, $lines);
./var/HyperDown.php:        $blocks = $this->call('beforeOptimizeBlocks', $blocks, $lines);
./var/HyperDown.php:        return $this->call('afterOptimizeBlocks', $blocks, $lines);
./var/HyperDown.php:        $line = $this->parseInline(trim($lines[0], '# '));
./var/HyperDown.php:        $line = $this->parseInline(trim($lines[0], '# '));
./var/HyperDown.php:        return preg_match("/^\s*$/", $str) ? '' : '<blockquote>' . $this->parse($str) . '</blockquote>';
./var/HyperDown.php:                        $html .= "<li>" . $this->parse(implode("\n", $leftLines)) . "</li>";
./var/HyperDown.php:            $html .= "<li>" . $this->parse(implode("\n", $leftLines)) . "</li></{$lastType}>";
./var/HyperDown.php:                $html .= '>' . $this->parseInline($text) . "</{$tag}>";
./var/HyperDown.php:            $line = $this->parseInline($line);
./var/HyperDown.php:        $index = array_search($note, $this->_footnotes);
./var/HyperDown.php:            $this->_footnotes[$index] = $lines;
./var/HyperDown.php:            $line = $this->parseInline($line,
./var/HyperDown.php:                isset($this->_specialWhiteList[$type]) ? $this->_specialWhiteList[$type] : '');
./var/HyperDown.php:        $this->_pos ++;
./var/HyperDown.php:        $this->_current = $type;
./var/HyperDown.php:        $this->_blocks[$this->_pos] = array($type, $start, $start, $value);
./var/HyperDown.php:        $this->_current = 'normal';
./var/HyperDown.php:        return $this->_current == $type
./var/HyperDown.php:            && (NULL === $value ? true : $this->_blocks[$this->_pos][3] == $value);
./var/HyperDown.php:        return isset($this->_blocks[$this->_pos]) ? $this->_blocks[$this->_pos] : NULL;
./var/HyperDown.php:            $this->_blocks[$this->_pos][2] = $to;
./var/HyperDown.php:            $this->_blocks[$this->_pos][3] = $value;
./var/HyperDown.php:        if ($this->_pos < 0) {
./var/HyperDown.php:            return $this->startBlock($type, 0, $value);
./var/HyperDown.php:        $last = $this->_blocks[$this->_pos][2];
./var/HyperDown.php:        $this->_blocks[$this->_pos][2] = $last - $step;
./var/HyperDown.php:        if ($this->_blocks[$this->_pos][1] <= $this->_blocks[$this->_pos][2]) {
./var/HyperDown.php:            $this->_pos ++;
./var/HyperDown.php:        $this->_current = $type;
./var/HyperDown.php:        $this->_blocks[$this->_pos] = array($type, $last - $step + 1, $last, $value);
./var/HyperDown.php:        if ($this->_pos < 1) {
./var/HyperDown.php:        $prev = $this->_blocks[$this->_pos - 1];
./var/HyperDown.php:        $current = $this->_blocks[$this->_pos];
./var/HyperDown.php:        $this->_blocks[$this->_pos - 1] = $prev;
./var/HyperDown.php:        $this->_current = $prev[0];
./var/HyperDown.php:        unset($this->_blocks[$this->_pos]);
./var/HyperDown.php:        $this->_pos --;
./var/IXR/Base64.php:        $this->data = $data;
./var/IXR/Base64.php:        return '<base64>' . base64_encode($this->data) . '</base64>';
./var/IXR/Client.php:            $this->url = $server;
./var/IXR/Client.php:            $this->server = $bits['host'];
./var/IXR/Client.php:            $this->port = isset($bits['port']) ? $bits['port'] : 80;
./var/IXR/Client.php:            $this->path = isset($bits['path']) ? $bits['path'] : '/';
./var/IXR/Client.php:                $this->path .= '?' . $bits['query'];
./var/IXR/Client.php:            $this->url = Typecho_Common::buildUrl(array(
./var/IXR/Client.php:            $this->server = $server;
./var/IXR/Client.php:            $this->path = $path;
./var/IXR/Client.php:            $this->port = $port;
./var/IXR/Client.php:        $this->prefix = $prefix;
./var/IXR/Client.php:        $this->useragent = $useragent;
./var/IXR/Client.php:        $this->debug = true;
./var/IXR/Client.php:            $this->error = new IXR_Error(-32300, 'transport error - could not open socket');
./var/IXR/Client.php:        ->setHeader('User-Agent', $this->useragent)
./var/IXR/Client.php:        ->send($this->url);
./var/IXR/Client.php:        if ($this->debug) {
./var/IXR/Client.php:        $this->message = new IXR_Message($contents);
./var/IXR/Client.php:        if (!$this->message->parse()) {
./var/IXR/Client.php:            $this->error = new IXR_Error(-32700, 'parse error. not well formed');
./var/IXR/Client.php:        if ($this->message->messageType == 'fault') {
./var/IXR/Client.php:            $this->error = new IXR_Error($this->message->faultCode, $this->message->faultString);
./var/IXR/Client.php:        return new IXR_Client($this->server, $this->path, $this->port, $this->useragent, $this->prefix . $prefix . '.');
./var/IXR/Client.php:        array_unshift($args, $this->prefix . $method);
./var/IXR/Client.php:            return $this->__getResponse();
./var/IXR/Client.php:            throw new IXR_Exception($this->__getErrorMessage(), $this->__getErrorCode());
./var/IXR/Client.php:        return $this->message->params[0];
./var/IXR/Client.php:        return (is_object($this->error));
./var/IXR/Client.php:        return $this->error->code;
./var/IXR/Client.php:        return $this->error->message;
./var/IXR/ClientMulticall.php:        $this->useragent = 'The Incutio XML-RPC PHP Library (multicall client)';
./var/IXR/ClientMulticall.php:        $this->calls[] = $struct;
./var/IXR/ClientMulticall.php:        return parent::query('system.multicall', $this->calls);
./var/IXR/Date.php:            $this->parseTimestamp($time);
./var/IXR/Date.php:            $this->parseIso($time);
./var/IXR/Date.php:        $this->year = date('Y', $timestamp);
./var/IXR/Date.php:        $this->month = date('m', $timestamp);
./var/IXR/Date.php:        $this->day = date('d', $timestamp);
./var/IXR/Date.php:        $this->hour = date('H', $timestamp);
./var/IXR/Date.php:        $this->minute = date('i', $timestamp);
./var/IXR/Date.php:        $this->second = date('s', $timestamp);
./var/IXR/Date.php:        $this->year = substr($iso, 0, 4);
./var/IXR/Date.php:        $this->month = substr($iso, 4, 2);
./var/IXR/Date.php:        $this->day = substr($iso, 6, 2);
./var/IXR/Date.php:        $this->hour = substr($iso, 9, 2);
./var/IXR/Date.php:        $this->minute = substr($iso, 12, 2);
./var/IXR/Date.php:        $this->second = substr($iso, 15, 2);
./var/IXR/Date.php:        return $this->year.$this->month.$this->day.'T'.$this->hour.':'.$this->minute.':'.$this->second;
./var/IXR/Date.php:        return '<dateTime.iso8601>'.$this->getIso().'</dateTime.iso8601>';
./var/IXR/Date.php:        return mktime($this->hour, $this->minute, $this->second, $this->month, $this->day, $this->year);
./var/IXR/Error.php:        $this->code = $code;
./var/IXR/Error.php:        $this->message = $message;
./var/IXR/Error.php:          <value><int>{$this->code}</int></value>
./var/IXR/Error.php:          <value><string>{$this->message}</string></value>
./var/IXR/IntrospectionServer.php:        $this->setCallbacks();
./var/IXR/IntrospectionServer.php:        $this->setCapabilities();
./var/IXR/IntrospectionServer.php:        $this->capabilities['introspection'] = array(
./var/IXR/IntrospectionServer.php:        $this->addCallback(
./var/IXR/IntrospectionServer.php:        $this->addCallback(
./var/IXR/IntrospectionServer.php:        $this->addCallback(
./var/IXR/IntrospectionServer.php:        $this->addCallback(
./var/IXR/IntrospectionServer.php:        $this->callbacks[$method] = $callback;
./var/IXR/IntrospectionServer.php:        $this->signatures[$method] = $args;
./var/IXR/IntrospectionServer.php:        $this->help[$method] = $help;
./var/IXR/IntrospectionServer.php:        if (!$this->hasMethod($methodname)) {
./var/IXR/IntrospectionServer.php:            return new IXR_Error(-32601, 'server error. requested method "'.$this->message->methodName.'" not specified.');
./var/IXR/IntrospectionServer.php:        $method = $this->callbacks[$methodname];
./var/IXR/IntrospectionServer.php:        $signature = $this->signatures[$methodname];
./var/IXR/IntrospectionServer.php:        if (!$this->hasMethod($method)) {
./var/IXR/IntrospectionServer.php:        $types = $this->signatures[$method];
./var/IXR/IntrospectionServer.php:        return $this->help[$method];
./var/IXR/Message.php:        $this->message = $message;
./var/IXR/Message.php:        $this->message = preg_replace('/<\?xml(.*)?\?'.'>/', '', $this->message);
./var/IXR/Message.php:        if (trim($this->message) == '') {
./var/IXR/Message.php:        $this->_parser = xml_parser_create();
./var/IXR/Message.php:        xml_parser_set_option($this->_parser, XML_OPTION_CASE_FOLDING, false);
./var/IXR/Message.php:        xml_set_object($this->_parser, $this);
./var/IXR/Message.php:        xml_set_element_handler($this->_parser, 'tag_open', 'tag_close');
./var/IXR/Message.php:        xml_set_character_data_handler($this->_parser, 'cdata');
./var/IXR/Message.php:        if (!xml_parse($this->_parser, $this->message)) {
./var/IXR/Message.php:                xml_error_string(xml_get_error_code($this->_parser)),
./var/IXR/Message.php:                xml_get_current_line_number($this->_parser))); */
./var/IXR/Message.php:        xml_parser_free($this->_parser);
./var/IXR/Message.php:        if ($this->messageType == 'fault') {
./var/IXR/Message.php:            $this->faultCode = $this->params[0]['faultCode'];
./var/IXR/Message.php:            $this->faultString = $this->params[0]['faultString'];
./var/IXR/Message.php:        $this->currentTag = $tag;
./var/IXR/Message.php:                $this->messageType = $tag;
./var/IXR/Message.php:                $this->_arraystructstypes[] = 'array';
./var/IXR/Message.php:                $this->_arraystructs[] = array();
./var/IXR/Message.php:                $this->_arraystructstypes[] = 'struct';
./var/IXR/Message.php:                $this->_arraystructs[] = array();
./var/IXR/Message.php:        $this->_currentTagContents .= $cdata;
./var/IXR/Message.php:                $value = (int)trim($this->_currentTagContents);
./var/IXR/Message.php:                $this->_currentTagContents = '';
./var/IXR/Message.php:                $value = (double)trim($this->_currentTagContents);
./var/IXR/Message.php:                $this->_currentTagContents = '';
./var/IXR/Message.php:                $value = (string)trim($this->_currentTagContents);
./var/IXR/Message.php:                $this->_currentTagContents = '';
./var/IXR/Message.php:                $value = new IXR_Date(trim($this->_currentTagContents));
./var/IXR/Message.php:                $this->_currentTagContents = '';
./var/IXR/Message.php:                if (trim($this->_currentTagContents) != '') {
./var/IXR/Message.php:                    $value = (string)$this->_currentTagContents;
./var/IXR/Message.php:                    $this->_currentTagContents = '';
./var/IXR/Message.php:                $value = (boolean)trim($this->_currentTagContents);
./var/IXR/Message.php:                $this->_currentTagContents = '';
./var/IXR/Message.php:                $value = base64_decode($this->_currentTagContents);
./var/IXR/Message.php:                $this->_currentTagContents = '';
./var/IXR/Message.php:                $value = array_pop($this->_arraystructs);
./var/IXR/Message.php:                array_pop($this->_arraystructstypes);
./var/IXR/Message.php:                array_pop($this->_currentStructName);
./var/IXR/Message.php:                $this->_currentStructName[] = trim($this->_currentTagContents);
./var/IXR/Message.php:                $this->_currentTagContents = '';
./var/IXR/Message.php:                $this->methodName = trim($this->_currentTagContents);
./var/IXR/Message.php:                $this->_currentTagContents = '';
./var/IXR/Message.php:            if (count($this->_arraystructs) > 0) {
./var/IXR/Message.php:                if ($this->_arraystructstypes[count($this->_arraystructstypes)-1] == 'struct') {
./var/IXR/Message.php:                    $this->_arraystructs[count($this->_arraystructs)-1][$this->_currentStructName[count($this->_currentStructName)-1]] = $value;
./var/IXR/Message.php:                    $this->_arraystructs[count($this->_arraystructs)-1][] = $value;
./var/IXR/Message.php:                $this->params[] = $value;
./var/IXR/Request.php:        $this->method = $method;
./var/IXR/Request.php:        $this->args = $args;
./var/IXR/Request.php:        $this->xml = <<<EOD
./var/IXR/Request.php:<methodName>{$this->method}</methodName>
./var/IXR/Request.php:        foreach ($this->args as $arg) {
./var/IXR/Request.php:            $this->xml .= '<param><value>';
./var/IXR/Request.php:            $this->xml .= $v->getXml();
./var/IXR/Request.php:            $this->xml .= "</value></param>\n";
./var/IXR/Request.php:        $this->xml .= '</params></methodCall>';
./var/IXR/Request.php:        return strlen($this->xml);
./var/IXR/Request.php:        return $this->xml;
./var/IXR/Server.php:        $this->setCapabilities();
./var/IXR/Server.php:            $this->callbacks = $callbacks;
./var/IXR/Server.php:        $this->setCallbacks();
./var/IXR/Server.php:        $this->serve($data);
./var/IXR/Server.php:        if (0 !== strpos($methodname, 'hook.') && $this->hasMethod('hook.beforeCall')) {
./var/IXR/Server.php:            $this->call('hook.beforeCall', array($methodname));
./var/IXR/Server.php:        if (!$this->hasMethod($methodname)) {
./var/IXR/Server.php:        $method = $this->callbacks[$methodname];
./var/IXR/Server.php:            $result = $this->$method($args);
./var/IXR/Server.php:        if (0 !== strpos($methodname, 'hook.') && $this->hasMethod('hook.afterCall')) {
./var/IXR/Server.php:            $this->call('hook.afterCall', array($methodname));
./var/IXR/Server.php:        $this->output($error->getXml());
./var/IXR/Server.php:        return in_array($method, array_keys($this->callbacks));
./var/IXR/Server.php:        $this->capabilities = array(
./var/IXR/Server.php:        $this->callbacks['system.getCapabilities'] = 'this:getCapabilities';
./var/IXR/Server.php:        $this->callbacks['system.listMethods'] = 'this:listMethods';
./var/IXR/Server.php:        $this->callbacks['system.multicall'] = 'this:multiCall';
./var/IXR/Server.php:        $this->message = new IXR_Message($data);
./var/IXR/Server.php:        if (!$this->message->parse()) {
./var/IXR/Server.php:            $this->error(-32700, 'parse error. not well formed');
./var/IXR/Server.php:        if ($this->message->messageType != 'methodCall') {
./var/IXR/Server.php:            $this->error(-32600, 'server error. invalid xml-rpc. not conforming to spec. Request must be a methodCall');
./var/IXR/Server.php:        if (0 === strpos($this->message->methodName, 'hook.')) {
./var/IXR/Server.php:        $result = $this->call($this->message->methodName, $this->message->params);
./var/IXR/Server.php:            $this->error($result);
./var/IXR/Server.php:        if ($this->hasMethod('hook.beforeOutput')) {
./var/IXR/Server.php:            $this->call('hook.beforeOutput', array());
./var/IXR/Server.php:        $this->output($xml);
./var/IXR/Server.php:        return $this->capabilities;
./var/IXR/Server.php:        return array_reverse(array_keys($this->callbacks));
./var/IXR/Server.php:                $result = $this->call($method, $params);
./var/IXR/Value.php:        $this->data = $data;
./var/IXR/Value.php:            $type = $this->calculateType();
./var/IXR/Value.php:        $this->type = $type;
./var/IXR/Value.php:            foreach ($this->data as $key => $value) {
./var/IXR/Value.php:                $this->data[$key] = new IXR_Value($value);
./var/IXR/Value.php:            for ($i = 0, $j = count($this->data); $i < $j; $i++) {
./var/IXR/Value.php:                $this->data[$i] = new IXR_Value($this->data[$i]);
./var/IXR/Value.php:        if ($this->data === true || $this->data === false) {
./var/IXR/Value.php:        if (is_integer($this->data)) {
./var/IXR/Value.php:        if (is_double($this->data)) {
./var/IXR/Value.php:        if (is_object($this->data) && is_a($this->data, 'IXR_Date')) {
./var/IXR/Value.php:        if (is_object($this->data) && is_a($this->data, 'IXR_Base64')) {
./var/IXR/Value.php:        if (is_object($this->data)) {
./var/IXR/Value.php:            $this->data = get_object_vars($this->data);
./var/IXR/Value.php:        if (!is_array($this->data)) {
./var/IXR/Value.php:        if ($this->isStruct($this->data)) {
./var/IXR/Value.php:        switch ($this->type) {
./var/IXR/Value.php:                return '<boolean>'.(($this->data) ? '1' : '0').'</boolean>';
./var/IXR/Value.php:                return '<int>'.$this->data.'</int>';
./var/IXR/Value.php:                return '<double>'.$this->data.'</double>';
./var/IXR/Value.php:                return '<string>'.htmlspecialchars($this->data).'</string>';
./var/IXR/Value.php:                foreach ($this->data as $item) {
./var/IXR/Value.php:                foreach ($this->data as $name => $value) {
./var/IXR/Value.php:                return $this->data->getXml();
./var/PasswordHash.php:        $this->itoa64 = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
./var/PasswordHash.php:        $this->iteration_count_log2 = $iteration_count_log2;
./var/PasswordHash.php:        $this->portable_hashes = $portable_hashes;
./var/PasswordHash.php:        $this->random_state = microtime() . uniqid(rand(), TRUE); // removed getmypid() for compability reasons
./var/PasswordHash.php:                $this->random_state =
./var/PasswordHash.php:                    md5(microtime() . $this->random_state);
./var/PasswordHash.php:                    pack('H*', md5($this->random_state));
./var/PasswordHash.php:            $output .= $this->itoa64[$value & 0x3f];
./var/PasswordHash.php:            $output .= $this->itoa64[($value >> 6) & 0x3f];
./var/PasswordHash.php:            $output .= $this->itoa64[($value >> 12) & 0x3f];
./var/PasswordHash.php:            $output .= $this->itoa64[($value >> 18) & 0x3f];
./var/PasswordHash.php:        $output .= $this->itoa64[min($this->iteration_count_log2 +
./var/PasswordHash.php:        $output .= $this->encode64($input, 6);
./var/PasswordHash.php:        $count_log2 = strpos($this->itoa64, $setting[3]);
./var/PasswordHash.php:        $output .= $this->encode64($hash, 16);
./var/PasswordHash.php:        $count_log2 = min($this->iteration_count_log2 + 8, 24);
./var/PasswordHash.php:        $output .= $this->itoa64[$count & 0x3f];
./var/PasswordHash.php:        $output .= $this->itoa64[($count >> 6) & 0x3f];
./var/PasswordHash.php:        $output .= $this->itoa64[($count >> 12) & 0x3f];
./var/PasswordHash.php:        $output .= $this->itoa64[($count >> 18) & 0x3f];
./var/PasswordHash.php:        $output .= $this->encode64($input, 3);
./var/PasswordHash.php:        $output .= chr(ord('0') + $this->iteration_count_log2 / 10);
./var/PasswordHash.php:        $output .= chr(ord('0') + $this->iteration_count_log2 % 10);
./var/PasswordHash.php:        if (CRYPT_BLOWFISH == 1 && !$this->portable_hashes) {
./var/PasswordHash.php:            $random = $this->get_random_bytes(16);
./var/PasswordHash.php:                crypt($password, $this->gensalt_blowfish($random));
./var/PasswordHash.php:        if (CRYPT_EXT_DES == 1 && !$this->portable_hashes) {
./var/PasswordHash.php:                $random = $this->get_random_bytes(3);
./var/PasswordHash.php:                crypt($password, $this->gensalt_extended($random));
./var/PasswordHash.php:            $random = $this->get_random_bytes(6);
./var/PasswordHash.php:            $this->crypt_private($password,
./var/PasswordHash.php:                    $this->gensalt_private($random));
./var/PasswordHash.php:        $hash = $this->crypt_private($password, $stored_hash);
./var/Typecho/AutoP.php:        return ':' . str_pad($this->_uniqueId ++, 4, '0', STR_PAD_LEFT);
./var/Typecho/AutoP.php:                $text = $this->cutByBlock($text);
./var/Typecho/AutoP.php:                    $text = $this->fixPragraph($text);
./var/Typecho/AutoP.php:        $this->_blocks[$key] = "<{$matches[1]}{$matches[3]}>{$text}</{$matches[1]}>";
./var/Typecho/AutoP.php:        $this->_uniqueId = 0;
./var/Typecho/AutoP.php:        $this->_blocks = array();
./var/Typecho/AutoP.php:                    $uniqueId = $this->makeUniqueId();
./var/Typecho/AutoP.php:        $text = $this->cutByBlock($text);
./var/Typecho/AutoP.php:        $blocks = array_reverse($this->_blocks);
./var/Typecho/AutoP.php:        return $this->fixPragraph($text);        
./var/Typecho/Config.php:        $this->setDefault($config);
./var/Typecho/Config.php:            if ($replace || !array_key_exists($name, $this->_currentConfig)) {
./var/Typecho/Config.php:                $this->_currentConfig[$name] = $value;
./var/Typecho/Config.php:        reset($this->_currentConfig);
./var/Typecho/Config.php:        return current($this->_currentConfig);
./var/Typecho/Config.php:        next($this->_currentConfig);
./var/Typecho/Config.php:        return key($this->_currentConfig);
./var/Typecho/Config.php:        return false !== $this->current();
./var/Typecho/Config.php:        return isset($this->_currentConfig[$name]) ? $this->_currentConfig[$name] : NULL;
./var/Typecho/Config.php:        $this->_currentConfig[$name] = $value;
./var/Typecho/Config.php:        echo $this->_currentConfig[$name];
./var/Typecho/Config.php:        return isset($this->_currentConfig[$name]);
./var/Typecho/Config.php:        return serialize($this->_currentConfig);
./var/Typecho/Date.php:        $this->timeStamp = $gmtTime + (self::$timezoneOffset - self::$serverTimezoneOffset);
./var/Typecho/Date.php:        return date($format, $this->timeStamp);
./var/Typecho/Date.php:        return Typecho_I18n::dateWord($this->timeStamp, self::gmtTime() + (self::$timezoneOffset - self::$serverTimezoneOffset));
./var/Typecho/Date.php:                return date('Y', $this->timeStamp);
./var/Typecho/Date.php:                return date('m', $this->timeStamp);
./var/Typecho/Date.php:                return date('d', $this->timeStamp);
./var/Typecho/Db/Adapter/Mysql.php:        if ($this->_dbLink = @mysql_connect($config->host . (empty($config->port) ? '' : ':' . $config->port),
./var/Typecho/Db/Adapter/Mysql.php:            if (@mysql_select_db($config->database, $this->_dbLink)) {
./var/Typecho/Db/Adapter/Mysql.php:                    mysql_query("SET NAMES '{$config->charset}'", $this->_dbLink);
./var/Typecho/Db/Adapter/Mysql.php:                return $this->_dbLink;
./var/Typecho/Db/Adapter/Mysql.php:        throw new Typecho_Db_Adapter_Exception(@mysql_error($this->_dbLink));
./var/Typecho/Db/Adapter/Mysql.php:        throw new Typecho_Db_Query_Exception(@mysql_error($this->_dbLink), mysql_errno($this->_dbLink));
./var/Typecho/Db/Adapter/Pdo/Pgsql.php:        if ($handle->query('SELECT oid FROM pg_class WHERE relname = ' . $this->quoteValue($this->_lastTable . '_seq'))->fetchAll()) {
./var/Typecho/Db/Adapter/Pdo/Pgsql.php:            return $handle->lastInsertId($this->_lastTable . '_seq');
./var/Typecho/Db/Adapter/Pdo/SQLite.php:        $this->_isSQLite2 = version_compare($pdo->getAttribute(PDO::ATTR_SERVER_VERSION), '3.0.0', '<');
./var/Typecho/Db/Adapter/Pdo/SQLite.php:        return (object) $this->fetch($resource);
./var/Typecho/Db/Adapter/Pdo/SQLite.php:        if ($this->_isSQLite2) {
./var/Typecho/Db/Adapter/Pdo.php:            $this->_object = $this->init($config);
./var/Typecho/Db/Adapter/Pdo.php:            $this->_object->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
./var/Typecho/Db/Adapter/Pdo.php:            return $this->_object;
./var/Typecho/Db/Adapter/Pdo.php:            $this->_lastTable = $isQueryObject ? $query->getAttribute('table') : NULL;
./var/Typecho/Db/Adapter/Pdo.php:        return $this->_object->quote($string);
./var/Typecho/Db/Adapter/Pgsql.php:        if ($this->_dbLink = @pg_connect("host={$config->host} port={$config->port} dbname={$config->database} user={$config->user} password={$config->password}")) {
./var/Typecho/Db/Adapter/Pgsql.php:                pg_query($this->_dbLink, "SET NAMES '{$config->charset}'");
./var/Typecho/Db/Adapter/Pgsql.php:            return $this->_dbLink;
./var/Typecho/Db/Adapter/Pgsql.php:        throw new Typecho_Db_Adapter_Exception(@pg_last_error($this->_dbLink));
./var/Typecho/Db/Adapter/Pgsql.php:        $this->_lastTable = $isQueryObject ? $query->getAttribute('table') : NULL;
./var/Typecho/Db/Adapter/Pgsql.php:        throw new Typecho_Db_Query_Exception(@pg_last_error($this->_dbLink),
./var/Typecho/Db/Adapter/Pgsql.php:        pg_result_error_field(pg_get_result($this->_dbLink), PGSQL_DIAG_SQLSTATE));
./var/Typecho/Db/Adapter/Pgsql.php:        if (pg_fetch_assoc(pg_query($handle, 'SELECT oid FROM pg_class WHERE relname = ' . $this->quoteValue($this->_lastTable . '_seq')))) {
./var/Typecho/Db/Adapter/Pgsql.php:            return pg_fetch_result(pg_query($handle, 'SELECT CURRVAL(' . $this->quoteValue($this->_lastTable . '_seq') . ')'), 0, 0);
./var/Typecho/Db/Adapter/SQLite.php:        if ($this->_dbHandle = sqlite_open($config->file, 0666, $error)) {
./var/Typecho/Db/Adapter/SQLite.php:            return $this->_dbHandle;
./var/Typecho/Db/Adapter/SQLite.php:        $errorCode = sqlite_last_error($this->_dbHandle);
./var/Typecho/Db/Adapter/SQLite.php:        return (object) $this->fetch($resource);
./var/Typecho/Db/Query.php:        $this->_adapter = &$adapter;
./var/Typecho/Db/Query.php:        $this->_prefix = $prefix;
./var/Typecho/Db/Query.php:        $this->_sqlPreBuild = self::$_default;
./var/Typecho/Db/Query.php:        return (0 === strpos($string, 'table.')) ? substr_replace($string, $this->_prefix, 0, 6) : $string;
./var/Typecho/Db/Query.php:                        $word = $this->_adapter->quoteColumn($word);
./var/Typecho/Db/Query.php:                        $word = $this->_prefix;
./var/Typecho/Db/Query.php:        return $this->filterColumn(implode(' , ', $fields));
./var/Typecho/Db/Query.php:                $value = '(' . implode(',', array_map(array($this->_adapter, 'quoteValue'), $value)) . ')';
./var/Typecho/Db/Query.php:                $value = $this->_adapter->quoteValue($value);
./var/Typecho/Db/Query.php:        return isset($this->_sqlPreBuild[$attributeName]) ? $this->_sqlPreBuild[$attributeName] : NULL;
./var/Typecho/Db/Query.php:        if (isset($this->_sqlPreBuild[$attributeName])) {
./var/Typecho/Db/Query.php:            $this->_sqlPreBuild[$attributeName] = self::$_default[$attributeName];
./var/Typecho/Db/Query.php:        $this->_sqlPreBuild['join'][] = array($this->filterPrefix($table), $this->filterColumn($condition), $op);
./var/Typecho/Db/Query.php:        $condition = str_replace('?', "%s", $this->filterColumn($condition));
./var/Typecho/Db/Query.php:        $operator = empty($this->_sqlPreBuild['where']) ? ' WHERE ' : ' AND';
./var/Typecho/Db/Query.php:            $this->_sqlPreBuild['where'] .= $operator . ' (' . $condition . ')';
./var/Typecho/Db/Query.php:            $this->_sqlPreBuild['where'] .= $operator . ' (' . vsprintf($condition, $this->quoteValues($args)) . ')';
./var/Typecho/Db/Query.php:        $condition = str_replace('?', "%s", $this->filterColumn($condition));
./var/Typecho/Db/Query.php:        $operator = empty($this->_sqlPreBuild['where']) ? ' WHERE ' : ' OR';
./var/Typecho/Db/Query.php:            $this->_sqlPreBuild['where'] .= $operator . ' (' . $condition . ')';
./var/Typecho/Db/Query.php:            $this->_sqlPreBuild['where'] .= $operator . ' (' . vsprintf($condition, $this->quoteValues($args)) . ')';
./var/Typecho/Db/Query.php:        $this->_sqlPreBuild['limit'] = intval($limit);
./var/Typecho/Db/Query.php:        $this->_sqlPreBuild['offset'] = intval($offset);
./var/Typecho/Db/Query.php:        $this->_sqlPreBuild['limit'] = $pageSize;
./var/Typecho/Db/Query.php:        $this->_sqlPreBuild['offset'] = (max(intval($page), 1) - 1) * $pageSize;
./var/Typecho/Db/Query.php:            $this->_sqlPreBuild['rows'][$this->filterColumn($key)] = is_null($row) ? 'NULL' : $this->_adapter->quoteValue($row);
./var/Typecho/Db/Query.php:        $this->_sqlPreBuild['rows'][$this->filterColumn($key)] = $escape ? $this->filterColumn($value) : $value;
./var/Typecho/Db/Query.php:        $this->_sqlPreBuild['order'] = ' ORDER BY ' . $this->filterColumn($orderby) . (empty($sort) ? NULL : ' ' . $sort);
./var/Typecho/Db/Query.php:        $this->_sqlPreBuild['group'] = ' GROUP BY ' . $this->filterColumn($key);
./var/Typecho/Db/Query.php:        $condition = str_replace('?', "%s", $this->filterColumn($condition));
./var/Typecho/Db/Query.php:        $operator = empty($this->_sqlPreBuild['having']) ? ' HAVING ' : ' AND';
./var/Typecho/Db/Query.php:            $this->_sqlPreBuild['having'] .= $operator . ' (' . $condition . ')';
./var/Typecho/Db/Query.php:            $this->_sqlPreBuild['having'] .= $operator . ' (' . vsprintf($condition, $this->quoteValues($args)) . ')';
./var/Typecho/Db/Query.php:        $this->_sqlPreBuild['action'] = Typecho_Db::SELECT;
./var/Typecho/Db/Query.php:        $this->_sqlPreBuild['fields'] = $this->getColumnFromParameters($args);
./var/Typecho/Db/Query.php:        $this->_sqlPreBuild['table'] = $this->filterPrefix($table);
./var/Typecho/Db/Query.php:        $this->_sqlPreBuild['action'] = Typecho_Db::UPDATE;
./var/Typecho/Db/Query.php:        $this->_sqlPreBuild['table'] = $this->filterPrefix($table);
./var/Typecho/Db/Query.php:        $this->_sqlPreBuild['action'] = Typecho_Db::DELETE;
./var/Typecho/Db/Query.php:        $this->_sqlPreBuild['table'] = $this->filterPrefix($table);
./var/Typecho/Db/Query.php:        $this->_sqlPreBuild['action'] = Typecho_Db::INSERT;
./var/Typecho/Db/Query.php:        $this->_sqlPreBuild['table'] = $this->filterPrefix($table);
./var/Typecho/Db/Query.php:        switch ($this->_sqlPreBuild['action']) {
./var/Typecho/Db/Query.php:                return $this->_adapter->parseSelect($this->_sqlPreBuild);
./var/Typecho/Db/Query.php:                . $this->_sqlPreBuild['table']
./var/Typecho/Db/Query.php:                . '(' . implode(' , ', array_keys($this->_sqlPreBuild['rows'])) . ')'
./var/Typecho/Db/Query.php:                . '(' . implode(' , ', array_values($this->_sqlPreBuild['rows'])) . ')'
./var/Typecho/Db/Query.php:                . $this->_sqlPreBuild['limit'];
./var/Typecho/Db/Query.php:                . $this->_sqlPreBuild['table']
./var/Typecho/Db/Query.php:                . $this->_sqlPreBuild['where'];
./var/Typecho/Db/Query.php:                if (isset($this->_sqlPreBuild['rows'])) {
./var/Typecho/Db/Query.php:                    foreach ($this->_sqlPreBuild['rows'] as $key => $val) {
./var/Typecho/Db/Query.php:                . $this->_sqlPreBuild['table']
./var/Typecho/Db/Query.php:                . $this->_sqlPreBuild['where'];
./var/Typecho/Db.php:        $this->_adapterName = $adapterName;
./var/Typecho/Db.php:        $this->_prefix = $prefix;
./var/Typecho/Db.php:        $this->_pool = array();
./var/Typecho/Db.php:        $this->_connectedPool = array();
./var/Typecho/Db.php:        $this->_config = array();
./var/Typecho/Db.php:        $this->_adapter = new $adapterName();
./var/Typecho/Db.php:        return $this->_adapterName;
./var/Typecho/Db.php:        return $this->_prefix;
./var/Typecho/Db.php:        return $this->_config;
./var/Typecho/Db.php:        $this->_connectedPool = array();
./var/Typecho/Db.php:        if (!isset($this->_connectedPool[$op])) {
./var/Typecho/Db.php:            if (empty($this->_pool[$op])) {
./var/Typecho/Db.php:            $selectConnection = rand(0, count($this->_pool[$op]) - 1); 
./var/Typecho/Db.php:            $selectConnectionConfig = $this->_config[$this->_pool[$op][$selectConnection]];
./var/Typecho/Db.php:            $selectConnectionHandle = $this->_adapter->connect($selectConnectionConfig);
./var/Typecho/Db.php:            $this->_connectedPool[$op] = &$selectConnectionHandle;
./var/Typecho/Db.php:        return $this->_connectedPool[$op];
./var/Typecho/Db.php:        return new Typecho_Db_Query($this->_adapter, $this->_prefix);
./var/Typecho/Db.php:        $this->_config[] = Typecho_Config::factory($config);
./var/Typecho/Db.php:        $key = count($this->_config) - 1;
./var/Typecho/Db.php:                $this->_pool[$op][] = $key;
./var/Typecho/Db.php:                $this->_pool[self::READ][] = $key;
./var/Typecho/Db.php:                $this->_pool[self::WRITE][] = $key;
./var/Typecho/Db.php:        return $this->_adapter->getVersion($this->selectDb($op));
./var/Typecho/Db.php:        return call_user_func_array(array($this->sql(), 'select'), $args ? $args : array('*'));
./var/Typecho/Db.php:        return $this->sql()->update($table);
./var/Typecho/Db.php:        return $this->sql()->delete($table);
./var/Typecho/Db.php:        return $this->sql()->insert($table);
./var/Typecho/Db.php:        $handle = $this->selectDb($op);
./var/Typecho/Db.php:        $resource = $this->_adapter->query($query, $handle, $op, $action);
./var/Typecho/Db.php:                    return $this->_adapter->affectedRows($resource, $handle);
./var/Typecho/Db.php:                    return $this->_adapter->lastInsertId($resource, $handle);
./var/Typecho/Db.php:        $resource = $this->query($query, self::READ);
./var/Typecho/Db.php:        while ($rows = $this->_adapter->fetch($resource)) {
./var/Typecho/Db.php:        $resource = $this->query($query, self::READ);
./var/Typecho/Db.php:        return ($rows = $this->_adapter->fetch($resource)) ?
./var/Typecho/Db.php:        $resource = $this->query($query, self::READ);
./var/Typecho/Db.php:        return ($rows = $this->_adapter->fetchObject($resource)) ?
./var/Typecho/Exception.php:        $this->message = $message;
./var/Typecho/Exception.php:        $this->code = $code;
./var/Typecho/Feed.php:        $this->_version = $version;
./var/Typecho/Feed.php:        $this->_type = $type;
./var/Typecho/Feed.php:        $this->_charset = $charset;
./var/Typecho/Feed.php:        $this->_lang = $lang;
./var/Typecho/Feed.php:        $this->_title = $title;
./var/Typecho/Feed.php:        $this->_subTitle = $subTitle;
./var/Typecho/Feed.php:        $this->_feedUrl = $feedUrl;
./var/Typecho/Feed.php:        $this->_baseUrl = $baseUrl;
./var/Typecho/Feed.php:        if (self::RSS2 == $this->_type) {
./var/Typecho/Feed.php:        } else if (self::RSS1 == $this->_type || self::ATOM1 == $this->_type) {
./var/Typecho/Feed.php:        $this->_items[] = $item;
./var/Typecho/Feed.php:        $result = '<?xml version="1.0" encoding="' . $this->_charset . '"?>' . self::EOL;
./var/Typecho/Feed.php:        if (self::RSS1 == $this->_type) {
./var/Typecho/Feed.php:            foreach ($this->_items as $item) {
./var/Typecho/Feed.php:                $content .= '<dc:date>' . $this->dateFormat($item['date']) . '</dc:date>' . self::EOL;
./var/Typecho/Feed.php:            $result .= '<channel rdf:about="' . $this->_feedUrl . '">
./var/Typecho/Feed.php:<title>' . htmlspecialchars($this->_title) . '</title>
./var/Typecho/Feed.php:<link>' . $this->_baseUrl . '</link>
./var/Typecho/Feed.php:<description>' . htmlspecialchars($this->_subTitle) . '</description>
./var/Typecho/Feed.php:        } else if (self::RSS2 == $this->_type) {
./var/Typecho/Feed.php:            foreach ($this->_items as $item) {
./var/Typecho/Feed.php:                $content .= '<pubDate>' . $this->dateFormat($item['date']) . '</pubDate>' . self::EOL;
./var/Typecho/Feed.php:                    $content .= '<content:encoded xml:lang="' . $this->_lang . '"><![CDATA['
./var/Typecho/Feed.php:            $result .= '<title>' . htmlspecialchars($this->_title) . '</title>
./var/Typecho/Feed.php:<link>' . $this->_baseUrl . '</link>
./var/Typecho/Feed.php:<atom:link href="' . $this->_feedUrl . '" rel="self" type="application/rss+xml" />
./var/Typecho/Feed.php:<language>' . $this->_lang . '</language>
./var/Typecho/Feed.php:<description>' . htmlspecialchars($this->_subTitle) . '</description>
./var/Typecho/Feed.php:<lastBuildDate>' . $this->dateFormat($lastUpdate) . '</lastBuildDate>
./var/Typecho/Feed.php:<pubDate>' . $this->dateFormat($lastUpdate) . '</pubDate>' . self::EOL;
./var/Typecho/Feed.php:        } else if (self::ATOM1 == $this->_type) {
./var/Typecho/Feed.php:xml:lang="' . $this->_lang . '"
./var/Typecho/Feed.php:xml:base="' . $this->_baseUrl . '"
./var/Typecho/Feed.php:            foreach ($this->_items as $item) {
./var/Typecho/Feed.php:                $content .= '<updated>' . $this->dateFormat($item['date']) . '</updated>' . self::EOL;
./var/Typecho/Feed.php:                $content .= '<published>' . $this->dateFormat($item['date']) . '</published>' . self::EOL;
./var/Typecho/Feed.php:                    $content .= '<content type="html" xml:base="' . $item['link'] . '" xml:lang="' . $this->_lang . '"><![CDATA['
./var/Typecho/Feed.php:            $result .= '<title type="text">' . htmlspecialchars($this->_title) . '</title>
./var/Typecho/Feed.php:<subtitle type="text">' . htmlspecialchars($this->_subTitle) . '</subtitle>
./var/Typecho/Feed.php:<updated>' . $this->dateFormat($lastUpdate) . '</updated>
./var/Typecho/Feed.php:<generator uri="http://typecho.org/" version="' . $this->_version . '">Typecho</generator>
./var/Typecho/Feed.php:<link rel="alternate" type="text/html" href="' . $this->_baseUrl . '" />
./var/Typecho/Feed.php:<id>' . $this->_feedUrl . '</id>
./var/Typecho/Feed.php:<link rel="self" type="application/atom+xml" href="' . $this->_feedUrl . '" />
./var/Typecho/Http/Client/Adapter/Curl.php:        if ($this->ip) {
./var/Typecho/Http/Client/Adapter/Curl.php:            $url = $this->scheme . '://' . $this->ip . $this->path;
./var/Typecho/Http/Client/Adapter/Curl.php:            $this->headers['Rfc'] = $this->method . ' ' . $this->path . ' ' . $this->rfc;
./var/Typecho/Http/Client/Adapter/Curl.php:            $this->headers['Host'] = $this->host;
./var/Typecho/Http/Client/Adapter/Curl.php:        curl_setopt($ch, CURLOPT_PORT, $this->port);
./var/Typecho/Http/Client/Adapter/Curl.php:        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);
./var/Typecho/Http/Client/Adapter/Curl.php:        switch ($this->rfc) {
./var/Typecho/Http/Client/Adapter/Curl.php:        if (!empty($this->headers)) {
./var/Typecho/Http/Client/Adapter/Curl.php:            if (isset($this->headers['User-Agent'])) {
./var/Typecho/Http/Client/Adapter/Curl.php:                curl_setopt($ch, CURLOPT_USERAGENT, $this->headers['User-Agent']);
./var/Typecho/Http/Client/Adapter/Curl.php:                unset($this->headers['User-Agent']);
./var/Typecho/Http/Client/Adapter/Curl.php:            if (isset($this->headers['Rfc'])) {
./var/Typecho/Http/Client/Adapter/Curl.php:                $headers[] = $this->headers['Rfc'];
./var/Typecho/Http/Client/Adapter/Curl.php:                unset($this->headers['Rfc']);
./var/Typecho/Http/Client/Adapter/Curl.php:            foreach ($this->headers as $key => $val) {
./var/Typecho/Http/Client/Adapter/Curl.php:        if (Typecho_Http_Client::METHOD_POST == $this->method) {
./var/Typecho/Http/Client/Adapter/Curl.php:            if (!isset($this->headers['content-type'])) {
./var/Typecho/Http/Client/Adapter/Curl.php:            if (!empty($this->data)) {
./var/Typecho/Http/Client/Adapter/Curl.php:                curl_setopt($ch, CURLOPT_POSTFIELDS, is_array($this->data) ? http_build_query($this->data) : $this->data);
./var/Typecho/Http/Client/Adapter/Curl.php:            if (!empty($this->files)) {
./var/Typecho/Http/Client/Adapter/Curl.php:                foreach ($this->files as $key => &$file) {
./var/Typecho/Http/Client/Adapter/Curl.php:                curl_setopt($ch, CURLOPT_POSTFIELDS, $this->files);
./var/Typecho/Http/Client/Adapter/Socket.php:        $request = $this->method . ' ' . $this->path . ' ' . $this->rfc . $eol;
./var/Typecho/Http/Client/Adapter/Socket.php:        $request .= 'Host: ' . $this->host . $eol;
./var/Typecho/Http/Client/Adapter/Socket.php:        if (!empty($this->headers)) {
./var/Typecho/Http/Client/Adapter/Socket.php:            foreach ($this->headers as $key => $val) {
./var/Typecho/Http/Client/Adapter/Socket.php:        if (Typecho_Http_Client::METHOD_POST == $this->method) {
./var/Typecho/Http/Client/Adapter/Socket.php:            if (empty($this->files)) {
./var/Typecho/Http/Client/Adapter/Socket.php:                $content = is_array($this->data) ? http_build_query($this->data) : $this->data;
./var/Typecho/Http/Client/Adapter/Socket.php:                if (!isset($this->headers['content-type'])) {
./var/Typecho/Http/Client/Adapter/Socket.php:                if (!empty($this->data)) {
./var/Typecho/Http/Client/Adapter/Socket.php:                    foreach ($this->data as $key => $val) {
./var/Typecho/Http/Client/Adapter/Socket.php:                foreach ($this->files as $key => $file) {
./var/Typecho/Http/Client/Adapter/Socket.php:        $socket = @fsockopen($this->ip ? $this->ip : $this->host, $this->port, $errno, $errstr, $this->timeout);
./var/Typecho/Http/Client/Adapter/Socket.php:        stream_set_timeout($socket, $this->timeout);
./var/Typecho/Http/Client/Adapter/Socket.php:                    throw new Typecho_Http_Client_Exception(__CLASS__ . ': timeout reading from ' . $this->host . ':' . $this->port, 500);
./var/Typecho/Http/Client/Adapter/Socket.php:                    throw new Typecho_Http_Client_Exception(__CLASS__ . ': could not read from ' . $this->host . ':' . $this->port, 500);
./var/Typecho/Http/Client/Adapter/Socket.php:                    throw new Typecho_Http_Client_Exception(__CLASS__ . ': timeout reading from ' . $this->host . ':' . $this->port, 500);
./var/Typecho/Http/Client/Adapter/Socket.php:        if ('chunked' == $this->getResponseHeader('Transfer-Encoding')) {
./var/Typecho/Http/Client/Adapter/Socket.php:            $parts = explode("\r\n", $this->responseBody, 2);
./var/Typecho/Http/Client/Adapter/Socket.php:            $this->responseBody = substr($parts[1], 0, $counter);
./var/Typecho/Http/Client/Adapter/Socket.php:        return $this->responseBody;
./var/Typecho/Http/Client/Adapter.php:        $this->method = $method;
./var/Typecho/Http/Client/Adapter.php:        $this->cookies[$key] = $value;
./var/Typecho/Http/Client/Adapter.php:        $this->query = empty($this->query) ? $query : $this->query . '&' . $query;
./var/Typecho/Http/Client/Adapter.php:        $this->data = $data;
./var/Typecho/Http/Client/Adapter.php:        $this->setMethod(Typecho_Http_Client::METHOD_POST);
./var/Typecho/Http/Client/Adapter.php:        $this->files = empty($this->files) ? $files : array_merge($this->files, $files);
./var/Typecho/Http/Client/Adapter.php:        $this->setMethod(Typecho_Http_Client::METHOD_POST);
./var/Typecho/Http/Client/Adapter.php:        $this->timeout = $timeout;
./var/Typecho/Http/Client/Adapter.php:        $this->rfc = $rfc;
./var/Typecho/Http/Client/Adapter.php:        $this->ip = $ip;
./var/Typecho/Http/Client/Adapter.php:        $this->headers[$key] = $value;
./var/Typecho/Http/Client/Adapter.php:            $this->host = $params['host'];
./var/Typecho/Http/Client/Adapter.php:            $this->path = $params['path'];
./var/Typecho/Http/Client/Adapter.php:        if (!empty($this->query)) {
./var/Typecho/Http/Client/Adapter.php:            $query = empty($query) ? $this->query : '&' . $this->query;
./var/Typecho/Http/Client/Adapter.php:            $this->path .= '?' . $query;
./var/Typecho/Http/Client/Adapter.php:        $this->scheme = $params['scheme'];
./var/Typecho/Http/Client/Adapter.php:        $this->port = ('https' == $params['scheme']) ? 443 : 80;
./var/Typecho/Http/Client/Adapter.php:            $this->port = $params['port'];
./var/Typecho/Http/Client/Adapter.php:        if (!empty($this->cookies)) {
./var/Typecho/Http/Client/Adapter.php:            $this->setHeader('Cookie', str_replace('&', '; ', http_build_query($this->cookies)));
./var/Typecho/Http/Client/Adapter.php:        $response = $this->httpSend($url);
./var/Typecho/Http/Client/Adapter.php:                        $this->responseStatus = intval($status[1]);
./var/Typecho/Http/Client/Adapter.php:                        $this->responseHeader[trim($name)] = trim($data);
./var/Typecho/Http/Client/Adapter.php:        $this->responseBody = implode("\n", $lines);
./var/Typecho/Http/Client/Adapter.php:        return $this->responseBody;
./var/Typecho/Http/Client/Adapter.php:        return isset($this->responseHeader[$key]) ? $this->responseHeader[$key] : NULL;
./var/Typecho/Http/Client/Adapter.php:        return $this->responseStatus;
./var/Typecho/Http/Client/Adapter.php:        return $this->responseBody;
./var/Typecho/I18n/GetText.php:            $this->short_circuit = true;
./var/Typecho/I18n/GetText.php:        $this->enable_cache = $enable_cache;
./var/Typecho/I18n/GetText.php:        $this->STREAM = @fopen($file, 'rb');
./var/Typecho/I18n/GetText.php:        $unpacked = unpack('c', $this->read(4));
./var/Typecho/I18n/GetText.php:            $this->BYTEORDER = 0;
./var/Typecho/I18n/GetText.php:            $this->BYTEORDER = 1;
./var/Typecho/I18n/GetText.php:            $this->error = 1; // not MO file
./var/Typecho/I18n/GetText.php:        $revision = $this->readint();
./var/Typecho/I18n/GetText.php:        $this->total = $this->readint();
./var/Typecho/I18n/GetText.php:        $this->originals = $this->readint();
./var/Typecho/I18n/GetText.php:        $this->translations = $this->readint();
./var/Typecho/I18n/GetText.php:            return fread($this->STREAM, $count);
./var/Typecho/I18n/GetText.php:        $end = unpack($this->BYTEORDER == 0 ? 'V' : 'N', $this->read(4));
./var/Typecho/I18n/GetText.php:        return unpack(($this->BYTEORDER == 0 ? 'V' : 'N') . $count, $this->read(4 * $count));
./var/Typecho/I18n/GetText.php:        if (is_array($this->cache_translations) &&
./var/Typecho/I18n/GetText.php:                is_array($this->table_originals) &&
./var/Typecho/I18n/GetText.php:                is_array($this->table_translations))
./var/Typecho/I18n/GetText.php:        fseek($this->STREAM, $this->originals);
./var/Typecho/I18n/GetText.php:        $this->table_originals = $this->readintarray($this->total * 2);
./var/Typecho/I18n/GetText.php:        fseek($this->STREAM, $this->translations);
./var/Typecho/I18n/GetText.php:        $this->table_translations = $this->readintarray($this->total * 2);
./var/Typecho/I18n/GetText.php:        if ($this->enable_cache) {
./var/Typecho/I18n/GetText.php:            $this->cache_translations = array ('' => NULL);
./var/Typecho/I18n/GetText.php:            for ($i = 0; $i < $this->total; $i++) {
./var/Typecho/I18n/GetText.php:                if ($this->table_originals[$i * 2 + 1] > 0) {
./var/Typecho/I18n/GetText.php:                    fseek($this->STREAM, $this->table_originals[$i * 2 + 2]);
./var/Typecho/I18n/GetText.php:                    $original = fread($this->STREAM, $this->table_originals[$i * 2 + 1]);
./var/Typecho/I18n/GetText.php:                    fseek($this->STREAM, $this->table_translations[$i * 2 + 2]);
./var/Typecho/I18n/GetText.php:                    $translation = fread($this->STREAM, $this->table_translations[$i * 2 + 1]);
./var/Typecho/I18n/GetText.php:                    $this->cache_translations[$original] = $translation;
./var/Typecho/I18n/GetText.php:        $length = $this->table_originals[$num * 2 + 1];
./var/Typecho/I18n/GetText.php:        $offset = $this->table_originals[$num * 2 + 2];
./var/Typecho/I18n/GetText.php:        fseek($this->STREAM, $offset);
./var/Typecho/I18n/GetText.php:        $data = fread($this->STREAM, $length);
./var/Typecho/I18n/GetText.php:        $length = $this->table_translations[$num * 2 + 1];
./var/Typecho/I18n/GetText.php:        $offset = $this->table_translations[$num * 2 + 2];
./var/Typecho/I18n/GetText.php:        fseek($this->STREAM, $offset);
./var/Typecho/I18n/GetText.php:        $data = fread($this->STREAM, $length);
./var/Typecho/I18n/GetText.php:            $end = $this->total;
./var/Typecho/I18n/GetText.php:            $txt = $this->get_original_string($start);
./var/Typecho/I18n/GetText.php:            return $this->find_string($string, $end, $start);
./var/Typecho/I18n/GetText.php:            $cmp = strcmp($string, $this->get_original_string($half));
./var/Typecho/I18n/GetText.php:                return $this->find_string($string, $start, $half);
./var/Typecho/I18n/GetText.php:                return $this->find_string($string, $half, $end);
./var/Typecho/I18n/GetText.php:        if ($this->short_circuit)
./var/Typecho/I18n/GetText.php:        $this->load_tables();
./var/Typecho/I18n/GetText.php:        if ($this->enable_cache) {
./var/Typecho/I18n/GetText.php:            if (array_key_exists($string, $this->cache_translations))
./var/Typecho/I18n/GetText.php:                return $this->cache_translations[$string];
./var/Typecho/I18n/GetText.php:            $num = $this->find_string($string);
./var/Typecho/I18n/GetText.php:                return $this->get_translation_string($num);
./var/Typecho/I18n/GetText.php:        $this->load_tables();
./var/Typecho/I18n/GetText.php:        if (! is_string($this->pluralheader)) {
./var/Typecho/I18n/GetText.php:            if ($this->enable_cache) {
./var/Typecho/I18n/GetText.php:                $header = $this->cache_translations[""];
./var/Typecho/I18n/GetText.php:                $header = $this->get_translation_string(0);
./var/Typecho/I18n/GetText.php:            $this->pluralheader = $expr;
./var/Typecho/I18n/GetText.php:        return $this->pluralheader;
./var/Typecho/I18n/GetText.php:        $string = $this->get_plural_forms();
./var/Typecho/I18n/GetText.php:        if ($this->short_circuit) {
./var/Typecho/I18n/GetText.php:        $select = $this->select_string($number);
./var/Typecho/I18n/GetText.php:        if ($this->enable_cache) {
./var/Typecho/I18n/GetText.php:            if (! array_key_exists($key, $this->cache_translations)) {
./var/Typecho/I18n/GetText.php:                $result = $this->cache_translations[$key];
./var/Typecho/I18n/GetText.php:            $num = $this->find_string($key);
./var/Typecho/I18n/GetText.php:                $result = $this->get_translation_string($num);
./var/Typecho/I18n/GetText.php:        fclose($this->STREAM);
./var/Typecho/I18n/GetTextMulti.php:        $this->addFile($fileName);
./var/Typecho/I18n/GetTextMulti.php:        $this->_handles[] = new Typecho_I18n_GetText($fileName, true);
./var/Typecho/I18n/GetTextMulti.php:        foreach ($this->_handles as $handle) {
./var/Typecho/I18n/GetTextMulti.php:        foreach ($this->_handles as $handle) {
./var/Typecho/I18n/GetTextMulti.php:        foreach ($this->_handles as $handle) {
./var/Typecho/Plugin.php:        $this->_handle = $handle;
./var/Typecho/Plugin.php:        $this->_signal = &$signal;
./var/Typecho/Plugin.php:        $component = $this->_handle . ':' . $component;
./var/Typecho/Plugin.php:        $this->_component = $component;
./var/Typecho/Plugin.php:        $component = $this->_handle . ':' . $component;
./var/Typecho/Plugin.php:            $this->_signal = true;
./var/Typecho/Request.php:        if ($this->_filter) {
./var/Typecho/Request.php:            foreach ($this->_filter as $filter) {
./var/Typecho/Request.php:            $this->_filter = array();
./var/Typecho/Request.php:            $this->_filter[] = is_string($filter) && isset(self::$_supportFilters[$filter])
./var/Typecho/Request.php:        return $this->get($key);
./var/Typecho/Request.php:        || isset($this->_params[$key]);
./var/Typecho/Request.php:            case isset($this->_params[$key]):
./var/Typecho/Request.php:                $value = $this->_params[$key];
./var/Typecho/Request.php:        return $this->_applyFilter($value);
./var/Typecho/Request.php:        $result = isset($this->_params[$key]) ? $this->_params[$key] :
./var/Typecho/Request.php:        return $this->_applyFilter($result);
./var/Typecho/Request.php:            $result[$arg] = $this->get($arg);
./var/Typecho/Request.php:            $this->_params[$name] = $value;
./var/Typecho/Request.php:        $this->_params = array_merge($this->_params,
./var/Typecho/Request.php:        if (NULL === $this->_requestRoot) {
./var/Typecho/Request.php:            $root = rtrim(self::getUrlPrefix() . $this->getBaseUrl(), '/') . '/';
./var/Typecho/Request.php:            $this->_requestRoot = rtrim($root, '/');
./var/Typecho/Request.php:        return $this->_requestRoot;
./var/Typecho/Request.php:        return self::getUrlPrefix() . $this->getRequestUri();
./var/Typecho/Request.php:        if (!empty($this->_requestUri)) {
./var/Typecho/Request.php:            return $this->_requestUri;
./var/Typecho/Request.php:        return $this->_requestUri = $requestUri;
./var/Typecho/Request.php:        if (NULL !== $this->_baseUrl) {
./var/Typecho/Request.php:            return $this->_baseUrl;
./var/Typecho/Request.php:        $requestUri = $this->getRequestUri();
./var/Typecho/Request.php:        return ($this->_baseUrl = (NULL === $finalBaseUrl) ? rtrim($baseUrl, '/') : $finalBaseUrl);
./var/Typecho/Request.php:        $requestUri = $this->getRequestUrl();
./var/Typecho/Request.php:        if (NULL !== $this->_pathInfo) {
./var/Typecho/Request.php:            return $this->_pathInfo;
./var/Typecho/Request.php:        $requestUri = $this->getRequestUri();
./var/Typecho/Request.php:        $finalBaseUrl = $this->getBaseUrl();
./var/Typecho/Request.php:        return ($this->_pathInfo = '/' . ltrim(urldecode($pathInfo), '/'));
./var/Typecho/Request.php:        $this->_server[$name] = $value;
./var/Typecho/Request.php:        if (!isset($this->_server[$name])) {
./var/Typecho/Request.php:            $this->setServer($name);
./var/Typecho/Request.php:        return $this->_server[$name];
./var/Typecho/Request.php:            $this->_ip = $ip;
./var/Typecho/Request.php:                case defined('__TYPECHO_IP_SOURCE__') && NULL !== $this->getServer(__TYPECHO_IP_SOURCE__):
./var/Typecho/Request.php:                    list($this->_ip) = array_map('trim', explode(',', $this->getServer(__TYPECHO_IP_SOURCE__)));
./var/Typecho/Request.php:                case NULL !== $this->getServer('REMOTE_ADDR'):
./var/Typecho/Request.php:                    $this->_ip = $this->getServer('REMOTE_ADDR');
./var/Typecho/Request.php:                case NULL !== $this->getServer('HTTP_CLIENT_IP'):
./var/Typecho/Request.php:                    $this->_ip = $this->getServer('HTTP_CLIENT_IP');
./var/Typecho/Request.php:        if (empty($this->_ip) || !self::_checkIp($this->_ip)) {
./var/Typecho/Request.php:            $this->_ip = 'unknown';
./var/Typecho/Request.php:        if (NULL === $this->_ip) {
./var/Typecho/Request.php:            $this->setIp();
./var/Typecho/Request.php:        return $this->_ip;
./var/Typecho/Request.php:        $agent = (NULL === $agent) ? $this->getServer('HTTP_USER_AGENT') : $agent;
./var/Typecho/Request.php:        $this->_agent = self::_checkAgent($agent) ? $agent : '';
./var/Typecho/Request.php:        if (NULL === $this->_agent) {
./var/Typecho/Request.php:            $this->setAgent();
./var/Typecho/Request.php:        return $this->_agent;
./var/Typecho/Request.php:        $this->_referer = (NULL === $referer) ? $this->getServer('HTTP_REFERER') : $referer;
./var/Typecho/Request.php:        if (NULL === $this->_referer) {
./var/Typecho/Request.php:            $this->setReferer();
./var/Typecho/Request.php:        return $this->_referer;
./var/Typecho/Request.php:        return 'GET' == $this->getServer('REQUEST_METHOD');
./var/Typecho/Request.php:        return 'POST' == $this->getServer('REQUEST_METHOD');
./var/Typecho/Request.php:        return 'PUT' == $this->getServer('REQUEST_METHOD');
./var/Typecho/Request.php:        return 'XMLHttpRequest' == $this->getServer('HTTP_X_REQUESTED_WITH');
./var/Typecho/Request.php:        return 'Shockwave Flash' == $this->getServer('USER_AGENT');
./var/Typecho/Request.php:        $userAgent = $this->getAgent();
./var/Typecho/Request.php:                $validated = empty($val) ? $this->__isset($key) : ($val == $this->get($key));
./var/Typecho/Response.php:                $result .= '<' . $tagName . '>' . $this->_parseXml($val) . '</' . $tagName . '>';
./var/Typecho/Response.php:        $this->_charset = empty($charset) ? self::CHARSET : $charset;
./var/Typecho/Response.php:        if (empty($this->_charset)) {
./var/Typecho/Response.php:            $this->setCharset();
./var/Typecho/Response.php:        return $this->_charset;
./var/Typecho/Response.php:        header('Content-Type: ' . $contentType . '; charset=' . $this->getCharset(), true);
./var/Typecho/Response.php:        $this->setContentType('text/xml');
./var/Typecho/Response.php:        echo '<?xml version="1.0" encoding="' . $this->getCharset() . '"?>',
./var/Typecho/Response.php:        $this->_parseXml($message),
./var/Typecho/Response.php:        $this->setContentType('application/json');
./var/Typecho/Response.php:            $this->redirect($referer, false);
./var/Typecho/Response.php:            $this->redirect($default);
./var/Typecho/Router/Parser.php:        $this->_routingTable = $routingTable;
./var/Typecho/Router/Parser.php:        $this->_defaultRegx = array(
./var/Typecho/Router/Parser.php:        $this->_params[] = $params[0];
./var/Typecho/Router/Parser.php:            return sprintf($this->_defaultRegx['char'], '+');
./var/Typecho/Router/Parser.php:            return sprintf($this->_defaultRegx[$params[1]], '+');
./var/Typecho/Router/Parser.php:            return sprintf($this->_defaultRegx[$params[1]], $params[2] > 0 ? '{' . $params[2] . '}' : '*');
./var/Typecho/Router/Parser.php:            return sprintf($this->_defaultRegx[$params[1]], '{' . $params[2] . ',' . $params[3] . '}');
./var/Typecho/Router/Parser.php:        foreach ($this->_routingTable as $key => $route) {
./var/Typecho/Router/Parser.php:            $this->_params = array();
./var/Typecho/Router/Parser.php:            $route['params'] = $this->_params;
./var/Typecho/Validate.php:            $this->_rules[$key][] = array($rule, $message);
./var/Typecho/Validate.php:            $this->_rules[$key][] = array_merge(array($rule, $message), $params);
./var/Typecho/Validate.php:        $this->_break = true;
./var/Typecho/Validate.php:        $this->_data = $data;
./var/Typecho/Validate.php:        $rules = empty($rules) ? $this->_rules : $rules;
./var/Typecho/Validate.php:            $this->_key = $key;
./var/Typecho/Validate.php:            if ($this->_break && $result) {
./var/Typecho/Validate.php:        return !empty($this->_data[$key]) ? ($str == $this->_data[$key]) : empty($str);
./var/Typecho/Validate.php:        return !empty($this->_data[$this->_key]);
./var/Typecho/Widget/Helper/Form/Element/Checkbox.php:            $this->_options[$value] = new Typecho_Widget_Helper_Layout('input');
./var/Typecho/Widget/Helper/Form/Element/Checkbox.php:            $item = $this->multiline();
./var/Typecho/Widget/Helper/Form/Element/Checkbox.php:            $id = $this->name . '-' . $this->filterValue($value);
./var/Typecho/Widget/Helper/Form/Element/Checkbox.php:            $this->inputs[] = $this->_options[$value];
./var/Typecho/Widget/Helper/Form/Element/Checkbox.php:            $item->addItem($this->_options[$value]->setAttribute('name', $this->name . '[]')
./var/Typecho/Widget/Helper/Form/Element/Checkbox.php:            $this->container($item);
./var/Typecho/Widget/Helper/Form/Element/Checkbox.php:        return current($this->_options);
./var/Typecho/Widget/Helper/Form/Element/Checkbox.php:        foreach ($this->_options as $option) {
./var/Typecho/Widget/Helper/Form/Element/Checkbox.php:            if (isset($this->_options[$value])) {
./var/Typecho/Widget/Helper/Form/Element/Checkbox.php:                $this->_options[$value]->setAttribute('checked', 'true');
./var/Typecho/Widget/Helper/Form/Element/Fake.php:        $this->name = $name;
./var/Typecho/Widget/Helper/Form/Element/Fake.php:        $this->init();
./var/Typecho/Widget/Helper/Form/Element/Fake.php:        $this->input = $this->input($name, $options);
./var/Typecho/Widget/Helper/Form/Element/Fake.php:            $this->value($value);
./var/Typecho/Widget/Helper/Form/Element/Fake.php:        $this->inputs[] = $input;
./var/Typecho/Widget/Helper/Form/Element/Fake.php:        $this->input->setAttribute('value', $value);
./var/Typecho/Widget/Helper/Form/Element/Hidden.php:        $this->setAttribute('style', 'display:none');
./var/Typecho/Widget/Helper/Form/Element/Hidden.php:        $this->container($input);
./var/Typecho/Widget/Helper/Form/Element/Hidden.php:        $this->inputs[] = $input;
./var/Typecho/Widget/Helper/Form/Element/Hidden.php:        $this->input->setAttribute('value', htmlspecialchars($value));
./var/Typecho/Widget/Helper/Form/Element/Password.php:        $this->label->setAttribute('for', $name . '-0-' . self::$uniqueId);
./var/Typecho/Widget/Helper/Form/Element/Password.php:        $this->container($input);
./var/Typecho/Widget/Helper/Form/Element/Password.php:        $this->inputs[] = $input;
./var/Typecho/Widget/Helper/Form/Element/Password.php:        $this->input->setAttribute('value', htmlspecialchars($value));
./var/Typecho/Widget/Helper/Form/Element/Radio.php:            $this->_options[$value] = new Typecho_Widget_Helper_Layout('input');
./var/Typecho/Widget/Helper/Form/Element/Radio.php:            $item = $this->multiline();
./var/Typecho/Widget/Helper/Form/Element/Radio.php:            $id = $this->name . '-' . $this->filterValue($value);
./var/Typecho/Widget/Helper/Form/Element/Radio.php:            $this->inputs[] = $this->_options[$value];
./var/Typecho/Widget/Helper/Form/Element/Radio.php:            $item->addItem($this->_options[$value]->setAttribute('name', $this->name)
./var/Typecho/Widget/Helper/Form/Element/Radio.php:            $this->container($item);
./var/Typecho/Widget/Helper/Form/Element/Radio.php:        return current($this->_options);
./var/Typecho/Widget/Helper/Form/Element/Radio.php:        foreach ($this->_options as $option) {
./var/Typecho/Widget/Helper/Form/Element/Radio.php:        if (isset($this->_options[$value])) {
./var/Typecho/Widget/Helper/Form/Element/Radio.php:            $this->value = $value;
./var/Typecho/Widget/Helper/Form/Element/Radio.php:            $this->_options[$value]->setAttribute('checked', 'true');
./var/Typecho/Widget/Helper/Form/Element/Radio.php:            $this->input = $this->_options[$value];
./var/Typecho/Widget/Helper/Form/Element/Select.php:        $this->container($input->setAttribute('name', $name)
./var/Typecho/Widget/Helper/Form/Element/Select.php:        $this->label->setAttribute('for', $name . '-0-' . self::$uniqueId);
./var/Typecho/Widget/Helper/Form/Element/Select.php:        $this->inputs[] = $input;
./var/Typecho/Widget/Helper/Form/Element/Select.php:            $this->_options[$value] = new Typecho_Widget_Helper_Layout('option');
./var/Typecho/Widget/Helper/Form/Element/Select.php:            $input->addItem($this->_options[$value]->setAttribute('value', $value)->html($label));
./var/Typecho/Widget/Helper/Form/Element/Select.php:        foreach ($this->_options as $option) {
./var/Typecho/Widget/Helper/Form/Element/Select.php:        if (isset($this->_options[$value])) {
./var/Typecho/Widget/Helper/Form/Element/Select.php:            $this->_options[$value]->setAttribute('selected', 'true');
./var/Typecho/Widget/Helper/Form/Element/Submit.php:        $this->setAttribute('class', 'typecho-option typecho-option-submit');
./var/Typecho/Widget/Helper/Form/Element/Submit.php:        $this->container($input);
./var/Typecho/Widget/Helper/Form/Element/Submit.php:        $this->inputs[] = $input;
./var/Typecho/Widget/Helper/Form/Element/Submit.php:        $this->input->html($value);
./var/Typecho/Widget/Helper/Form/Element/Text.php:        $this->container($input);
./var/Typecho/Widget/Helper/Form/Element/Text.php:        $this->label->setAttribute('for', $name . '-0-' . self::$uniqueId);
./var/Typecho/Widget/Helper/Form/Element/Text.php:        $this->inputs[] = $input;
./var/Typecho/Widget/Helper/Form/Element/Text.php:        $this->input->setAttribute('value', htmlspecialchars($value));
./var/Typecho/Widget/Helper/Form/Element/Textarea.php:        $this->label->setAttribute('for', $name . '-0-' . self::$uniqueId);
./var/Typecho/Widget/Helper/Form/Element/Textarea.php:        $this->container($input->setClose(false));
./var/Typecho/Widget/Helper/Form/Element/Textarea.php:        $this->inputs[] = $input;
./var/Typecho/Widget/Helper/Form/Element/Textarea.php:        $this->input->html(htmlspecialchars($value));
./var/Typecho/Widget/Helper/Form/Element.php:        $this->name = $name;
./var/Typecho/Widget/Helper/Form/Element.php:        $this->init();
./var/Typecho/Widget/Helper/Form/Element.php:            $this->label($label);
./var/Typecho/Widget/Helper/Form/Element.php:        $this->input = $this->input($name, $options);
./var/Typecho/Widget/Helper/Form/Element.php:            $this->value($value);
./var/Typecho/Widget/Helper/Form/Element.php:            $this->description($description);
./var/Typecho/Widget/Helper/Form/Element.php:        if (empty($this->label)) {
./var/Typecho/Widget/Helper/Form/Element.php:            $this->label = new Typecho_Widget_Helper_Layout('label', array('class' => 'typecho-label'));
./var/Typecho/Widget/Helper/Form/Element.php:            $this->container($this->label);
./var/Typecho/Widget/Helper/Form/Element.php:        $this->label->html($value);
./var/Typecho/Widget/Helper/Form/Element.php:        if (empty($this->container)) {
./var/Typecho/Widget/Helper/Form/Element.php:            $this->container = new Typecho_Widget_Helper_Layout('li');
./var/Typecho/Widget/Helper/Form/Element.php:            $this->addItem($this->container);
./var/Typecho/Widget/Helper/Form/Element.php:        $this->container->addItem($item);
./var/Typecho/Widget/Helper/Form/Element.php:        if (empty($this->message)) {
./var/Typecho/Widget/Helper/Form/Element.php:            $this->message =  new Typecho_Widget_Helper_Layout('p', array('class' => 'message error'));
./var/Typecho/Widget/Helper/Form/Element.php:            $this->container($this->message);
./var/Typecho/Widget/Helper/Form/Element.php:        $this->message->html($message);
./var/Typecho/Widget/Helper/Form/Element.php:        if (empty($this->description)) {
./var/Typecho/Widget/Helper/Form/Element.php:            $this->description = new Typecho_Widget_Helper_Layout('p', array('class' => 'description'));
./var/Typecho/Widget/Helper/Form/Element.php:            $this->container($this->description);
./var/Typecho/Widget/Helper/Form/Element.php:        $this->description->html($description);
./var/Typecho/Widget/Helper/Form/Element.php:        $this->value = $value;
./var/Typecho/Widget/Helper/Form/Element.php:        $this->_value($value);
./var/Typecho/Widget/Helper/Form/Element.php:        $this->multiline[] = $item;
./var/Typecho/Widget/Helper/Form/Element.php:        foreach ($this->multiline as $item) {
./var/Typecho/Widget/Helper/Form/Element.php:        $this->rules[] = func_get_args();
./var/Typecho/Widget/Helper/Form.php:        $this->setClose(false);
./var/Typecho/Widget/Helper/Form.php:        $this->setAction($action);
./var/Typecho/Widget/Helper/Form.php:        $this->setMethod($method);
./var/Typecho/Widget/Helper/Form.php:        $this->setEncodeType($enctype);
./var/Typecho/Widget/Helper/Form.php:        $this->setAttribute('enctype', $enctype);
./var/Typecho/Widget/Helper/Form.php:        $this->_inputs[$input->name] = $input;
./var/Typecho/Widget/Helper/Form.php:        $this->addItem($input);
./var/Typecho/Widget/Helper/Form.php:            $this->addItem($item);
./var/Typecho/Widget/Helper/Form.php:        return $this->_inputs[$name];
./var/Typecho/Widget/Helper/Form.php:        $source = (self::POST_METHOD == $this->getAttribute('method')) ? $_POST : $_GET;
./var/Typecho/Widget/Helper/Form.php:        foreach ($this->_inputs as $name => $input) {
./var/Typecho/Widget/Helper/Form.php:        $this->setAttribute('method', $method);
./var/Typecho/Widget/Helper/Form.php:        $this->setAttribute('action', $action);
./var/Typecho/Widget/Helper/Form.php:        foreach ($this->_inputs as $name => $input) {
./var/Typecho/Widget/Helper/Form.php:        return $this->_inputs;
./var/Typecho/Widget/Helper/Form.php:        $source = (self::POST_METHOD == $this->getAttribute('method')) ? $_POST : $_GET;
./var/Typecho/Widget/Helper/Form.php:        foreach ($this->_inputs as $name => $input) {
./var/Typecho/Widget/Helper/Form.php:        $id = md5(implode('"', array_keys($this->_inputs)));
./var/Typecho/Widget/Helper/Form.php:        $formData = $this->getParams(array_keys($rules));
./var/Typecho/Widget/Helper/Form.php:        $id = md5(implode('"', array_keys($this->_inputs)));
./var/Typecho/Widget/Helper/Form.php:            foreach ($this->_inputs as $name => $input) {
./var/Typecho/Widget/Helper/Layout.php:        $this->setTagName($tagName);
./var/Typecho/Widget/Helper/Layout.php:                $this->setAttribute($attributeName, $attributeValue);
./var/Typecho/Widget/Helper/Layout.php:        $this->_items[] = $item;
./var/Typecho/Widget/Helper/Layout.php:        unset($this->_items[array_search($item, $this->_items)]);
./var/Typecho/Widget/Helper/Layout.php:        return $this->_items;
./var/Typecho/Widget/Helper/Layout.php:            if (empty($this->_html)) {
./var/Typecho/Widget/Helper/Layout.php:                foreach ($this->_items as $item) {
./var/Typecho/Widget/Helper/Layout.php:                echo $this->_html;
./var/Typecho/Widget/Helper/Layout.php:            $this->_html = $html;
./var/Typecho/Widget/Helper/Layout.php:        $this->_tagName = $tagName;
./var/Typecho/Widget/Helper/Layout.php:        $this->_attributes[$attributeName] = $attributeValue;
./var/Typecho/Widget/Helper/Layout.php:        if (isset($this->_attributes[$attributeName])) {
./var/Typecho/Widget/Helper/Layout.php:            unset($this->_attributes[$attributeName]);
./var/Typecho/Widget/Helper/Layout.php:        return isset($this->_attributes[$attributeName]) ? $this->_attributes[$attributeName] : NULL;
./var/Typecho/Widget/Helper/Layout.php:        $this->_forceClose = $close;
./var/Typecho/Widget/Helper/Layout.php:        $this->_parent = $parent;
./var/Typecho/Widget/Helper/Layout.php:        return $this->_parent;
./var/Typecho/Widget/Helper/Layout.php:        echo $this->_tagName ? "<{$this->_tagName}" : NULL;
./var/Typecho/Widget/Helper/Layout.php:        foreach ($this->_attributes as $attributeName => $attributeValue) {
./var/Typecho/Widget/Helper/Layout.php:        if (!$this->_close && $this->_tagName) {
./var/Typecho/Widget/Helper/Layout.php:        if ($this->_tagName) {
./var/Typecho/Widget/Helper/Layout.php:            echo $this->_close ? " />\n" : "</{$this->_tagName}>\n";
./var/Typecho/Widget/Helper/Layout.php:        $this->_attributes[$name] = $value;
./var/Typecho/Widget/Helper/Layout.php:        return isset($this->_attributes[$name]) ? $this->_attributes[$name] : NULL;
./var/Typecho/Widget/Helper/Layout.php:        if (empty($this->_items) && empty($this->_html)) {
./var/Typecho/Widget/Helper/Layout.php:            $this->_close = true;
./var/Typecho/Widget/Helper/Layout.php:        if (NULL !== $this->_forceClose) {
./var/Typecho/Widget/Helper/Layout.php:            $this->_close = $this->_forceClose;
./var/Typecho/Widget/Helper/Layout.php:        $this->start();
./var/Typecho/Widget/Helper/Layout.php:        $this->html();
./var/Typecho/Widget/Helper/Layout.php:        $this->end();
./var/Typecho/Widget/Helper/PageNavigator/Box.php:        if ($this->_total < 1) {
./var/Typecho/Widget/Helper/PageNavigator/Box.php:        $from = max(1, $this->_currentPage - $splitPage);
./var/Typecho/Widget/Helper/PageNavigator/Box.php:        $to = min($this->_totalPage, $this->_currentPage + $splitPage);
./var/Typecho/Widget/Helper/PageNavigator/Box.php:        if ($this->_currentPage > 1) {
./var/Typecho/Widget/Helper/PageNavigator/Box.php:                str_replace($this->_pageHolder, $this->_currentPage - 1, $this->_pageTemplate) . $this->_anchor)
./var/Typecho/Widget/Helper/PageNavigator/Box.php:            echo $itemBegin . sprintf($linkBegin, str_replace($this->_pageHolder, 1, $this->_pageTemplate) . $this->_anchor)
./var/Typecho/Widget/Helper/PageNavigator/Box.php:            $current = ($i == $this->_currentPage);
./var/Typecho/Widget/Helper/PageNavigator/Box.php:                str_replace($this->_pageHolder, $i, $this->_pageTemplate) . $this->_anchor)
./var/Typecho/Widget/Helper/PageNavigator/Box.php:        if ($to < $this->_totalPage) {
./var/Typecho/Widget/Helper/PageNavigator/Box.php:            if ($to < $this->_totalPage - 1) {
./var/Typecho/Widget/Helper/PageNavigator/Box.php:            echo $itemBegin . sprintf($linkBegin, str_replace($this->_pageHolder, $this->_totalPage, $this->_pageTemplate) . $this->_anchor)
./var/Typecho/Widget/Helper/PageNavigator/Box.php:                . $this->_totalPage . $linkEnd . $itemEnd;
./var/Typecho/Widget/Helper/PageNavigator/Box.php:        if ($this->_currentPage < $this->_totalPage) {
./var/Typecho/Widget/Helper/PageNavigator/Box.php:                str_replace($this->_pageHolder, $this->_currentPage + 1, $this->_pageTemplate) . $this->_anchor)
./var/Typecho/Widget/Helper/PageNavigator/Classic.php:        $this->prev($prevWord);
./var/Typecho/Widget/Helper/PageNavigator/Classic.php:        $this->next($nextWord);
./var/Typecho/Widget/Helper/PageNavigator/Classic.php:        if ($this->_total > 0 && $this->_currentPage > 1) {
./var/Typecho/Widget/Helper/PageNavigator/Classic.php:            echo '<a class="prev" href="' . str_replace($this->_pageHolder, $this->_currentPage - 1, $this->_pageTemplate) . $this->_anchor . '">'
./var/Typecho/Widget/Helper/PageNavigator/Classic.php:        if ($this->_total > 0 && $this->_currentPage < $this->_totalPage) {
./var/Typecho/Widget/Helper/PageNavigator/Classic.php:            echo '<a class="next" title="" href="' . str_replace($this->_pageHolder, $this->_currentPage + 1, $this->_pageTemplate) . $this->_anchor . '">'
./var/Typecho/Widget/Helper/PageNavigator.php:        $this->_total = $total;
./var/Typecho/Widget/Helper/PageNavigator.php:        $this->_totalPage = ceil($total / $pageSize);
./var/Typecho/Widget/Helper/PageNavigator.php:        $this->_currentPage = $currentPage;
./var/Typecho/Widget/Helper/PageNavigator.php:        $this->_pageSize = $pageSize;
./var/Typecho/Widget/Helper/PageNavigator.php:        $this->_pageTemplate = $pageTemplate;
./var/Typecho/Widget/Helper/PageNavigator.php:        if (($currentPage > $this->_totalPage || $currentPage < 1) && $total > 0) {
./var/Typecho/Widget/Helper/PageNavigator.php:        $this->_pageHolder = array('{' . $holder . '}',
./var/Typecho/Widget/Helper/PageNavigator.php:        $this->_anchor = '#' . $anchor;
./var/Typecho/Widget.php:        $this->request = $request;
./var/Typecho/Widget.php:        $this->response = $response;
./var/Typecho/Widget.php:        $this->parameter = new Typecho_Config();
./var/Typecho/Widget.php:            $this->parameter->setDefault($params);
./var/Typecho/Widget.php:        return $this->{$matches[1]};
./var/Typecho/Widget.php:        while ($this->next()) {
./var/Typecho/Widget.php:        $this->row = $value;
./var/Typecho/Widget.php:        $this->length ++;
./var/Typecho/Widget.php:        $this->stack[] = $value;
./var/Typecho/Widget.php:        $split = $this->sequence % $num;
./var/Typecho/Widget.php:        echo $this->sequence;
./var/Typecho/Widget.php:        echo $this->length;
./var/Typecho/Widget.php:        return !empty($this->stack);
./var/Typecho/Widget.php:        if ($this->stack) {
./var/Typecho/Widget.php:            $this->row = @$this->stack[key($this->stack)];
./var/Typecho/Widget.php:            next($this->stack);
./var/Typecho/Widget.php:            $this->sequence ++;
./var/Typecho/Widget.php:        if (!$this->row) {
./var/Typecho/Widget.php:            reset($this->stack);
./var/Typecho/Widget.php:            if ($this->stack) {
./var/Typecho/Widget.php:                $this->row = $this->stack[key($this->stack)];
./var/Typecho/Widget.php:            $this->sequence = 0;
./var/Typecho/Widget.php:        return $this->row;
./var/Typecho/Widget.php:        echo $this->{$name};
./var/Typecho/Widget.php:        if (array_key_exists($name, $this->row)) {
./var/Typecho/Widget.php:            return $this->row[$name];
./var/Typecho/Widget.php:                return $this->$method();
./var/Typecho/Widget.php:                $return = $this->pluginHandle()->trigger($plugged)->{$method}($this);
./var/Typecho/Widget.php:        $this->row[$name] = $value;
./var/Typecho/Widget.php:        return isset($this->row[$name]);
./var/Widget/Abstract/Comments.php:        return $this->db->fetchRow($this->widget('Widget_Abstract_Contents')->select()
./var/Widget/Abstract/Comments.php:        ->where('table.contents.cid = ?', $this->cid)
./var/Widget/Abstract/Comments.php:        ->limit(1), array($this->widget('Widget_Abstract_Contents'), 'filter'));
./var/Widget/Abstract/Comments.php:        return $this->parentContent['title'];
./var/Widget/Abstract/Comments.php:        if ($this->options->commentsPageBreak && 'approved' == $this->status) {
./var/Widget/Abstract/Comments.php:            $coid = $this->coid;
./var/Widget/Abstract/Comments.php:            $parent = $this->parent;
./var/Widget/Abstract/Comments.php:            while ($parent > 0 && $this->options->commentsThreaded) {
./var/Widget/Abstract/Comments.php:                $parentRows = $this->db->fetchRow($this->db->select('parent')->from('table.comments')
./var/Widget/Abstract/Comments.php:            $select  = $this->db->select('coid', 'parent')
./var/Widget/Abstract/Comments.php:            ->from('table.comments')->where('cid = ? AND status = ?', $this->parentContent['cid'], 'approved')
./var/Widget/Abstract/Comments.php:            ->where('coid ' . ('DESC' == $this->options->commentsOrder ? '>=' : '<=') . ' ?', $coid)
./var/Widget/Abstract/Comments.php:            if ($this->options->commentsShowCommentOnly) {
./var/Widget/Abstract/Comments.php:            $comments = $this->db->fetchAll($select);
./var/Widget/Abstract/Comments.php:            $currentPage = ceil($total / $this->options->commentsPageSize);
./var/Widget/Abstract/Comments.php:            $pageRow = array('permalink' => $this->parentContent['pathinfo'], 'commentPage' => $currentPage);
./var/Widget/Abstract/Comments.php:                        $pageRow, $this->options->index) . '#' . $this->theId;
./var/Widget/Abstract/Comments.php:        return $this->parentContent['permalink'] . '#' . $this->theId;
./var/Widget/Abstract/Comments.php:        $text = $this->parentContent['hidden'] ? _t('内容被隐藏') : $this->text;
./var/Widget/Abstract/Comments.php:        $text = $this->pluginHandle(__CLASS__)->trigger($plugged)->content($text, $this);
./var/Widget/Abstract/Comments.php:            $text = $this->options->commentsMarkdown ? $this->markdown($text)
./var/Widget/Abstract/Comments.php:                : $this->autoP($text);
./var/Widget/Abstract/Comments.php:        $text = $this->pluginHandle(__CLASS__)->contentEx($text, $this);
./var/Widget/Abstract/Comments.php:        return Typecho_Common::stripTags($text, '<p><br>' . $this->options->commentsHTMLTagAllowed);
./var/Widget/Abstract/Comments.php:        return $this->date->word();
./var/Widget/Abstract/Comments.php:        return $this->type . '-' . $this->coid;
./var/Widget/Abstract/Comments.php:        return $this->db->select('table.comments.coid', 'table.comments.cid', 'table.comments.author', 'table.comments.mail', 'table.comments.url', 'table.comments.ip',
./var/Widget/Abstract/Comments.php:            'created'   =>  empty($comment['created']) ? $this->options->gmtTime : $comment['created'],
./var/Widget/Abstract/Comments.php:            'ip'        =>  empty($comment['ip']) ? $this->request->getIp() : $comment['ip'],
./var/Widget/Abstract/Comments.php:        $insertId = $this->db->query($this->db->insert('table.comments')->rows($insertStruct));
./var/Widget/Abstract/Comments.php:        $num = $this->db->fetchObject($this->db->select(array('COUNT(coid)' => 'num'))->from('table.comments')
./var/Widget/Abstract/Comments.php:        $this->db->query($this->db->update('table.contents')->rows(array('commentsNum' => $num))
./var/Widget/Abstract/Comments.php:        $updateComment = $this->db->fetchObject($condition->select('cid')->from('table.comments')->limit(1));
./var/Widget/Abstract/Comments.php:        $updateRows = $this->db->query($updateCondition->update('table.comments')->rows($updateStruct));
./var/Widget/Abstract/Comments.php:        $num = $this->db->fetchObject($this->db->select(array('COUNT(coid)' => 'num'))->from('table.comments')
./var/Widget/Abstract/Comments.php:        $this->db->query($this->db->update('table.contents')->rows(array('commentsNum' => $num))
./var/Widget/Abstract/Comments.php:        $deleteComment = $this->db->fetchObject($condition->select('cid')->from('table.comments')->limit(1));
./var/Widget/Abstract/Comments.php:        $deleteRows = $this->db->query($deleteCondition->delete('table.comments'));
./var/Widget/Abstract/Comments.php:        $num = $this->db->fetchObject($this->db->select(array('COUNT(coid)' => 'num'))->from('table.comments')
./var/Widget/Abstract/Comments.php:        $this->db->query($this->db->update('table.contents')->rows(array('commentsNum' => $num))
./var/Widget/Abstract/Comments.php:            if ($this->have() && ($this->user->pass('editor', true) || $this->ownerId == $this->user->uid)) {
./var/Widget/Abstract/Comments.php:            $post = $this->db->fetchRow($condition->select('ownerId')->from('table.comments')->limit(1));
./var/Widget/Abstract/Comments.php:            if ($post && ($this->user->pass('editor', true) || $post['ownerId'] == $this->user->uid)) {
./var/Widget/Abstract/Comments.php:        return $this->db->fetchObject($condition->select(array('COUNT(coid)' => 'num'))->from('table.comments'))->num;
./var/Widget/Abstract/Comments.php:        $value = $this->pluginHandle(__CLASS__)->filter($value, $this);
./var/Widget/Abstract/Comments.php:        $value = $this->filter($value);
./var/Widget/Abstract/Comments.php:        echo $this->date->format(empty($format) ? $this->options->commentDateFormat : $format);
./var/Widget/Abstract/Comments.php:        $autoLink = (NULL === $autoLink) ? $this->options->commentsShowUrl : $autoLink;
./var/Widget/Abstract/Comments.php:        $noFollow = (NULL === $noFollow) ? $this->options->commentsUrlNofollow : $noFollow;
./var/Widget/Abstract/Comments.php:        if ($this->url && $autoLink) {
./var/Widget/Abstract/Comments.php:            echo '<a href="' , $this->url , '"' , ($noFollow ? ' rel="external nofollow"' : NULL) , '>' , $this->author , '</a>';
./var/Widget/Abstract/Comments.php:            echo $this->author;
./var/Widget/Abstract/Comments.php:        if ($this->options->commentsAvatar && 'comment' == $this->type) {
./var/Widget/Abstract/Comments.php:            $rating = $this->options->commentsAvatarRating;
./var/Widget/Abstract/Comments.php:            $this->pluginHandle(__CLASS__)->trigger($plugged)->gravatar($size, $rating, $default, $this);
./var/Widget/Abstract/Comments.php:                $url = Typecho_Common::gravatarUrl($this->mail, $size, $rating, $default, $this->request->isSecure());
./var/Widget/Abstract/Comments.php:                $this->author . '" width="' . $size . '" height="' . $size . '" />';
./var/Widget/Abstract/Comments.php:        echo Typecho_Common::subStr(strip_tags($this->content), 0, $length, $trim);
./var/Widget/Abstract/Comments.php:        $html = $this->pluginHandle(__CLASS__)->trigger($parsed)->autoP($text);
./var/Widget/Abstract/Comments.php:        $html = $this->pluginHandle(__CLASS__)->trigger($parsed)->markdown($text);
./var/Widget/Abstract/Contents.php:        return $this->db->fetchAll($this->db
./var/Widget/Abstract/Contents.php:        ->where('table.relationships.cid = ?', $this->cid)
./var/Widget/Abstract/Contents.php:        ->where('table.metas.type = ?', 'tag'), array($this->widget('Widget_Abstract_Metas'), 'filter'));
./var/Widget/Abstract/Contents.php:        return $this->widget('Widget_Users_Author@' . $this->cid, array('uid' => $this->authorId));
./var/Widget/Abstract/Contents.php:        return $this->date->word();
./var/Widget/Abstract/Contents.php:        return $this->row['parent'];
./var/Widget/Abstract/Contents.php:        $plainTxt = str_replace("\n", '', trim(strip_tags($this->excerpt)));
./var/Widget/Abstract/Contents.php:        $plainTxt = $plainTxt ? $plainTxt : $this->title;
./var/Widget/Abstract/Contents.php:        $rows = $this->db->fetchAll($this->db->select()->from('table.fields')
./var/Widget/Abstract/Contents.php:            ->where('cid = ?', $this->cid));
./var/Widget/Abstract/Contents.php:        if ($this->hidden) {
./var/Widget/Abstract/Contents.php:            return $this->text;
./var/Widget/Abstract/Contents.php:        $content = $this->pluginHandle(__CLASS__)->trigger($plugged)->excerpt($this->text, $this);
./var/Widget/Abstract/Contents.php:            $content = $this->isMarkdown ? $this->markdown($content)
./var/Widget/Abstract/Contents.php:                : $this->autoP($content);
./var/Widget/Abstract/Contents.php:        return Typecho_Common::fixHtml($this->pluginHandle(__CLASS__)->excerptEx($excerpt, $this));
./var/Widget/Abstract/Contents.php:        if ($this->hidden) {
./var/Widget/Abstract/Contents.php:            return $this->text;
./var/Widget/Abstract/Contents.php:        $content = $this->pluginHandle(__CLASS__)->trigger($plugged)->content($this->text, $this);
./var/Widget/Abstract/Contents.php:            $content = $this->isMarkdown ? $this->markdown($content)
./var/Widget/Abstract/Contents.php:                : $this->autoP($content);
./var/Widget/Abstract/Contents.php:        return $this->pluginHandle(__CLASS__)->contentEx($content, $this);
./var/Widget/Abstract/Contents.php:        $content = $this->content;
./var/Widget/Abstract/Contents.php:        return $this->type . '-' . $this->cid;
./var/Widget/Abstract/Contents.php:        return 'respond-' . $this->theId;
./var/Widget/Abstract/Contents.php:            array('type' => 'comment', 'permalink' => $this->pathinfo), $this->options->index);
./var/Widget/Abstract/Contents.php:            array('type' => 'trackback', 'permalink' => $this->pathinfo), $this->options->index);
./var/Widget/Abstract/Contents.php:        return $this->permalink . '#' . $this->respondId;
./var/Widget/Abstract/Contents.php:        $select = $this->db->select(array('COUNT(table.contents.cid)' => 'num'))->from('table.contents')
./var/Widget/Abstract/Contents.php:        $count = $this->db->fetchObject($select)->num + 1;
./var/Widget/Abstract/Contents.php:        return $this->db->select('table.contents.cid', 'table.contents.title', 'table.contents.slug', 'table.contents.created', 'table.contents.authorId',
./var/Widget/Abstract/Contents.php:            'created'       =>  empty($content['created']) ? $this->options->gmtTime : $content['created'],
./var/Widget/Abstract/Contents.php:            'modified'      =>  $this->options->gmtTime,
./var/Widget/Abstract/Contents.php:            'authorId'      =>  isset($content['authorId']) ? $content['authorId'] : $this->user->uid,
./var/Widget/Abstract/Contents.php:        $insertId = $this->db->query($this->db->insert('table.contents')->rows($insertStruct));
./var/Widget/Abstract/Contents.php:            $this->applySlug(empty($content['slug']) ? NULL : $content['slug'], $insertId);
./var/Widget/Abstract/Contents.php:        if (!$this->isWriteable(clone $condition)) {
./var/Widget/Abstract/Contents.php:        $updateStruct['modified'] = $this->options->gmtTime;
./var/Widget/Abstract/Contents.php:        $updateRows = $this->db->query($condition->update('table.contents')->rows($updateStruct));
./var/Widget/Abstract/Contents.php:            $this->applySlug(empty($content['slug']) ? NULL : $content['slug'], $updateCondition);
./var/Widget/Abstract/Contents.php:        return $this->db->query($condition->delete('table.contents'));
./var/Widget/Abstract/Contents.php:            $cid = $this->db->fetchObject($cid->select('cid')
./var/Widget/Abstract/Contents.php:        $draft = $this->db->fetchObject($this->db->select('type', 'parent')
./var/Widget/Abstract/Contents.php:        while ($this->db->fetchObject($this->db->select(array('COUNT(cid)' => 'num'))
./var/Widget/Abstract/Contents.php:        $this->db->query($this->db->update('table.contents')->rows(array('slug' => $result))
./var/Widget/Abstract/Contents.php:        return $this->db->query($this->db->delete('table.fields')
./var/Widget/Abstract/Contents.php:        $exists = array_flip(Typecho_Common::arrayFlatten($this->db->fetchAll($this->db->select('name')
./var/Widget/Abstract/Contents.php:            if (!$this->checkFieldName($name)) {
./var/Widget/Abstract/Contents.php:            $isFieldReadOnly = $this->pluginHandle(__CLASS__)->trigger($plugged)->isFieldReadOnly($name);
./var/Widget/Abstract/Contents.php:            $this->setField($name, $type, $value, $cid);
./var/Widget/Abstract/Contents.php:            $this->db->query($this->db->delete('table.fields')
./var/Widget/Abstract/Contents.php:        if (empty($name) || !$this->checkFieldName($name) 
./var/Widget/Abstract/Contents.php:        $exist = $this->db->fetchRow($this->db->select('cid')->from('table.fields')
./var/Widget/Abstract/Contents.php:            return $this->db->query($this->db->insert('table.fields')
./var/Widget/Abstract/Contents.php:            return $this->db->query($this->db->update('table.fields')
./var/Widget/Abstract/Contents.php:        if (!$this->checkFieldName($name)) {
./var/Widget/Abstract/Contents.php:        $exist = $this->db->fetchRow($this->db->select('type')->from('table.fields')
./var/Widget/Abstract/Contents.php:            return $this->db->query($this->db->insert('table.fields')
./var/Widget/Abstract/Contents.php:            return $this->db->query($this->db->update('table.fields')
./var/Widget/Abstract/Contents.php:        $post = $this->db->fetchRow($condition->select('authorId')->from('table.contents')->limit(1));
./var/Widget/Abstract/Contents.php:        return $post && ($this->user->pass('editor', true) || $post['authorId'] == $this->user->uid);
./var/Widget/Abstract/Contents.php:        return $this->db->fetchObject($condition
./var/Widget/Abstract/Contents.php:        $files = glob($this->options->themeFile($this->options->theme, '*.php'));
./var/Widget/Abstract/Contents.php:        $value['categories'] = $this->db->fetchAll($this->db
./var/Widget/Abstract/Contents.php:            ->order('table.metas.order', Typecho_Db::SORT_ASC), array($this->widget('Widget_Metas_Category_List'), 'filter'));
./var/Widget/Abstract/Contents.php:            $value['directory'] = $this->widget('Widget_Metas_Category_List')->getAllParents($value['categories'][0]['mid']);
./var/Widget/Abstract/Contents.php:        $value['permalink'] = Typecho_Common::url($value['pathinfo'], $this->options->index);
./var/Widget/Abstract/Contents.php:        $value['feedUrl'] = $routeExists ? Typecho_Router::url($type, $value, $this->options->feedUrl) : '#';
./var/Widget/Abstract/Contents.php:        $value['feedRssUrl'] = $routeExists ? Typecho_Router::url($type, $value, $this->options->feedRssUrl) : '#';
./var/Widget/Abstract/Contents.php:        $value['feedAtomUrl'] = $routeExists ? Typecho_Router::url($type, $value, $this->options->feedAtomUrl) : '#';
./var/Widget/Abstract/Contents.php:        $value['authorId'] != $this->user->uid && 
./var/Widget/Abstract/Contents.php:        !$this->user->pass('editor', true)) {
./var/Widget/Abstract/Contents.php:            if ($this->request->isPost() && isset($this->request->protectPassword)) {
./var/Widget/Abstract/Contents.php:        $value = $this->pluginHandle(__CLASS__)->filter($value, $this);
./var/Widget/Abstract/Contents.php:            $value['text'] = '<form class="protected" action="' . $this->security->getTokenUrl($value['permalink'])
./var/Widget/Abstract/Contents.php:        $value = $this->filter($value);
./var/Widget/Abstract/Contents.php:        echo $this->date->format(empty($format) ? $this->options->postDateFormat : $format);
./var/Widget/Abstract/Contents.php:        echo false !== $more && false !== strpos($this->text, '<!--more-->') ?
./var/Widget/Abstract/Contents.php:        $this->excerpt . "<p class=\"more\"><a href=\"{$this->permalink}\" title=\"{$this->title}\">{$more}</a></p>" : $this->content;
./var/Widget/Abstract/Contents.php:        echo Typecho_Common::subStr(strip_tags($this->excerpt), 0, $length, $trim);
./var/Widget/Abstract/Contents.php:        $title = $this->pluginHandle()->trigger($plugged)->title($this->title, $this);
./var/Widget/Abstract/Contents.php:            echo $length > 0 ? Typecho_Common::subStr($this->title, 0, $length, $trim) : $this->title;
./var/Widget/Abstract/Contents.php:        $num = intval($this->commentsNum);
./var/Widget/Abstract/Contents.php:                $allow &= ($this->user->pass('editor', true) || $this->authorId == $this->user->uid);
./var/Widget/Abstract/Contents.php:                if (('ping' == $permission || 'comment' == $permission) && $this->options->commentsPostTimeout > 0 &&
./var/Widget/Abstract/Contents.php:                $this->options->commentsAutoClose) {
./var/Widget/Abstract/Contents.php:                    if ($this->options->gmtTime - $this->created > $this->options->commentsPostTimeout) {
./var/Widget/Abstract/Contents.php:                $allow &= ($this->row['allow' . ucfirst($permission)] == 1) and !$this->hidden;
./var/Widget/Abstract/Contents.php:        $categories = $this->categories;
./var/Widget/Abstract/Contents.php:        if ($this->tags) {
./var/Widget/Abstract/Contents.php:            foreach ($this->tags as $tag) {
./var/Widget/Abstract/Contents.php:        echo $this->author->{$item};
./var/Widget/Abstract/Contents.php:        $html = $this->pluginHandle(__CLASS__)->trigger($parsed)->autoP($text);
./var/Widget/Abstract/Contents.php:        $html = $this->pluginHandle(__CLASS__)->trigger($parsed)->markdown($text);
./var/Widget/Abstract/Metas.php:        return $this->type . '-' . $this->mid;
./var/Widget/Abstract/Metas.php:        return $this->db->select()->from('table.metas');
./var/Widget/Abstract/Metas.php:        return $this->db->query($this->db->insert('table.metas')->rows($options));
./var/Widget/Abstract/Metas.php:        return $this->db->query($condition->update('table.metas')->rows($options));
./var/Widget/Abstract/Metas.php:        return $this->db->query($condition->delete('table.metas'));
./var/Widget/Abstract/Metas.php:        return $this->db->fetchObject($condition->select(array('COUNT(mid)' => 'num'))->from('table.metas'))->num;
./var/Widget/Abstract/Metas.php:        $value['permalink'] = $routeExists ? Typecho_Router::url($type, $value, $this->options->index) : '#';
./var/Widget/Abstract/Metas.php:        $value['feedUrl'] = $routeExists ? Typecho_Router::url($type, $value, $this->options->feedUrl) : '#';
./var/Widget/Abstract/Metas.php:        $value['feedRssUrl'] = $routeExists ? Typecho_Router::url($type, $value, $this->options->feedRssUrl) : '#';
./var/Widget/Abstract/Metas.php:        $value['feedAtomUrl'] = $routeExists ? Typecho_Router::url($type, $value, $this->options->feedAtomUrl) : '#';
./var/Widget/Abstract/Metas.php:        $value = $this->pluginHandle(__CLASS__)->filter($value, $this);
./var/Widget/Abstract/Metas.php:        $value = $this->filter($value);
./var/Widget/Abstract/Metas.php:        return $this->db->fetchObject($this->db->select(array('MAX(order)' => 'maxOrder'))
./var/Widget/Abstract/Metas.php:            $this->update(array('order' => $sort + 1),
./var/Widget/Abstract/Metas.php:            $this->db->sql()->where('mid = ?', $mid)->where('type = ?', $type));
./var/Widget/Abstract/Metas.php:        $contents = Typecho_Common::arrayFlatten($this->db->fetchAll($this->select('cid')
./var/Widget/Abstract/Metas.php:                $existsContents = Typecho_Common::arrayFlatten($this->db->fetchAll($this->db
./var/Widget/Abstract/Metas.php:                $where = $this->db->sql()->where('mid = ? AND type = ?', $meta, $type);
./var/Widget/Abstract/Metas.php:                $this->delete($where);
./var/Widget/Abstract/Metas.php:                $this->db->query($this->db->delete('table.relationships')->where('mid = ?', $meta));
./var/Widget/Abstract/Metas.php:                    $this->db->query($this->db->insert('table.relationships')
./var/Widget/Abstract/Metas.php:                $this->update(array('parent' => $mid), $this->db->sql()->where('parent = ?', $meta));
./var/Widget/Abstract/Metas.php:        $num = $this->db->fetchObject($this->db
./var/Widget/Abstract/Metas.php:        $this->update(array('count' => $num), $this->db->sql()->where('mid = ?', $mid));
./var/Widget/Abstract/Metas.php:            $row = $this->db->fetchRow($this->select()
./var/Widget/Abstract/Metas.php:                    $result[] = $this->insert(array(
./var/Widget/Abstract/Metas.php:        $tags = Typecho_Common::arrayFlatten($this->db->fetchAll($this->db->select('mid')
./var/Widget/Abstract/Metas.php:            $content = $this->db->fetchRow($this->db->select('cid')
./var/Widget/Abstract/Metas.php:                $this->db->query($this->db->delete('table.metas')
./var/Widget/Abstract/Metas.php:        $num = $this->db->fetchObject($this->db->select(array('COUNT(table.contents.cid)' => 'num'))->from('table.contents')
./var/Widget/Abstract/Metas.php:        $this->db->query($this->db->update('table.metas')->rows(array('count' => $num))
./var/Widget/Abstract/Options.php:        return $this->db->select()->from('table.options');
./var/Widget/Abstract/Options.php:        return $this->db->query($this->db->insert('table.options')->rows($options));
./var/Widget/Abstract/Options.php:        return $this->db->query($condition->update('table.options')->rows($options));
./var/Widget/Abstract/Options.php:        return $this->db->query($condition->delete('table.options'));
./var/Widget/Abstract/Options.php:        return $this->db->fetchObject($condition->select(array('COUNT(name)' => 'num'))->from('table.options'))->num;
./var/Widget/Abstract/Users.php:        $rows = $this->db->fetchAll($this->db->select()
./var/Widget/Abstract/Users.php:            ->from('table.options')->where('user = ?', $this->uid));
./var/Widget/Abstract/Users.php:        $select = $this->db->select()
./var/Widget/Abstract/Users.php:        if ($this->request->uid) {
./var/Widget/Abstract/Users.php:            $select->where('uid <> ?', $this->request->uid);
./var/Widget/Abstract/Users.php:        $user = $this->db->fetchRow($select);
./var/Widget/Abstract/Users.php:        $select = $this->db->select()
./var/Widget/Abstract/Users.php:        if ($this->request->uid) {
./var/Widget/Abstract/Users.php:            $select->where('uid <> ?', $this->request->uid);
./var/Widget/Abstract/Users.php:        $user = $this->db->fetchRow($select);
./var/Widget/Abstract/Users.php:        $select = $this->db->select()
./var/Widget/Abstract/Users.php:        if ($this->request->uid) {
./var/Widget/Abstract/Users.php:            $select->where('uid <> ?', $this->request->uid);
./var/Widget/Abstract/Users.php:        $user = $this->db->fetchRow($select);
./var/Widget/Abstract/Users.php:        $select = $this->db->select(array('COUNT(uid)' => 'num'))->from('table.users')
./var/Widget/Abstract/Users.php:        $count = $this->db->fetchObject($select)->num + 1;
./var/Widget/Abstract/Users.php:        $value['permalink'] = $routeExists ? Typecho_Router::url('author', $value, $this->options->index) : '#';
./var/Widget/Abstract/Users.php:        $value['feedUrl'] = $routeExists ? Typecho_Router::url('author', $value, $this->options->feedUrl) : '#';
./var/Widget/Abstract/Users.php:        $value['feedRssUrl'] = $routeExists ? Typecho_Router::url('author', $value, $this->options->feedRssUrl) : '#';
./var/Widget/Abstract/Users.php:        $value['feedAtomUrl'] = $routeExists ? Typecho_Router::url('author', $value, $this->options->feedAtomUrl) : '#';
./var/Widget/Abstract/Users.php:        $value = $this->pluginHandle(__CLASS__)->filter($value, $this);
./var/Widget/Abstract/Users.php:        $value = $this->filter($value);
./var/Widget/Abstract/Users.php:        return $this->db->select()->from('table.users');
./var/Widget/Abstract/Users.php:        return $this->db->fetchObject($condition->select(array('COUNT(uid)' => 'num'))->from('table.users'))->num;
./var/Widget/Abstract/Users.php:        return $this->db->query($this->db->insert('table.users')->rows($rows));
./var/Widget/Abstract/Users.php:        return $this->db->query($condition->update('table.users')->rows($rows));
./var/Widget/Abstract/Users.php:        return $this->db->query($condition->delete('table.users'));
./var/Widget/Abstract/Users.php:        $url = Typecho_Common::gravatarUrl($this->mail, $size, $rating, $default, $this->request->isSecure());
./var/Widget/Abstract/Users.php:        $this->screenName . '" width="' . $size . '" height="' . $size . '" />';
./var/Widget/Abstract.php:        $this->db = Typecho_Db::get();
./var/Widget/Abstract.php:        $this->options = $this->widget('Widget_Options');
./var/Widget/Abstract.php:        $this->user = $this->widget('Widget_User');
./var/Widget/Abstract.php:        $this->security = $this->widget('Widget_Security');
./var/Widget/Ajax.php:        if ($this->options->generator == $this->request->getAgent()) {
./var/Widget/Ajax.php:        $this->user->pass('editor');
./var/Widget/Ajax.php:            $client->setHeader('User-Agent', $this->options->generator)
./var/Widget/Ajax.php:            list($soft, $version) = explode(' ', $this->options->generator);
./var/Widget/Ajax.php:            $this->response->throwJson($result);
./var/Widget/Ajax.php:        $this->user->pass('subscriber');
./var/Widget/Ajax.php:            $client->setHeader('User-Agent', $this->options->generator)
./var/Widget/Ajax.php:            $this->response->throwJson($data);
./var/Widget/Ajax.php:        $this->user->pass('contributor');
./var/Widget/Ajax.php:        if ($this->db->fetchObject($this->db->select(array('COUNT(*)' => 'num'))
./var/Widget/Ajax.php:        ->from('table.options')->where('name = ? AND user = ?', 'editorSize', $this->user->uid))->num > 0) {
./var/Widget/Ajax.php:            $this->widget('Widget_Abstract_Options')
./var/Widget/Ajax.php:            ->update(array('value' => $this->request->size), $this->db->sql()->where('name = ? AND user = ?', 'editorSize', $this->user->uid));
./var/Widget/Ajax.php:            $this->widget('Widget_Abstract_Options')->insert(array(
./var/Widget/Ajax.php:                'value' =>  $this->request->size,
./var/Widget/Ajax.php:                'user'  =>  $this->user->uid
./var/Widget/Ajax.php:        if (!$this->request->isAjax()) {
./var/Widget/Ajax.php:            $this->response->goBack();
./var/Widget/Ajax.php:        $this->on($this->request->is('do=remoteCallback'))->remoteCallback();
./var/Widget/Ajax.php:        $this->on($this->request->is('do=feed'))->feed();
./var/Widget/Ajax.php:        $this->on($this->request->is('do=checkVersion'))->checkVersion();
./var/Widget/Ajax.php:        $this->on($this->request->is('do=editorResize'))->editorResize();
./var/Widget/Archive.php:        $this->parameter->setDefault(array(
./var/Widget/Archive.php:            'pageSize'          =>  $this->options->pageSize,
./var/Widget/Archive.php:        if (NULL == $this->parameter->type) {
./var/Widget/Archive.php:            $this->parameter->type = Typecho_Router::$current;
./var/Widget/Archive.php:            $this->_invokeFromOutside = true;
./var/Widget/Archive.php:        if ($this->parameter->isFeed) {
./var/Widget/Archive.php:            $this->_invokeByFeed = true;
./var/Widget/Archive.php:        $this->_themeDir = rtrim($this->options->themeFile($this->options->theme), '/') . '/';
./var/Widget/Archive.php:        if ('feed' == $this->parameter->type) {
./var/Widget/Archive.php:            $this->_currentFeedUrl = '';
./var/Widget/Archive.php:                case 0 === strpos($this->request->feed, '/rss/') || '/rss' == $this->request->feed:
./var/Widget/Archive.php:                    $this->request->feed = substr($this->request->feed, 4);
./var/Widget/Archive.php:                    $this->_feedType = Typecho_Feed::RSS1;
./var/Widget/Archive.php:                    $this->_currentFeedUrl = $this->options->feedRssUrl;
./var/Widget/Archive.php:                    $this->_feedContentType = 'application/rdf+xml';
./var/Widget/Archive.php:                case 0 === strpos($this->request->feed, '/atom/') || '/atom' == $this->request->feed:
./var/Widget/Archive.php:                    $this->request->feed = substr($this->request->feed, 5);
./var/Widget/Archive.php:                    $this->_feedType = Typecho_Feed::ATOM1;
./var/Widget/Archive.php:                    $this->_currentFeedUrl = $this->options->feedAtomUrl;
./var/Widget/Archive.php:                    $this->_feedContentType = 'application/atom+xml';
./var/Widget/Archive.php:                    $this->_feedType = Typecho_Feed::RSS2;
./var/Widget/Archive.php:                    $this->_currentFeedUrl = $this->options->feedUrl;
./var/Widget/Archive.php:                    $this->_feedContentType = 'application/rss+xml';
./var/Widget/Archive.php:            $feedQuery = $this->request->feed;
./var/Widget/Archive.php:            //$this->parameter->type = Typecho_Router::$current;
./var/Widget/Archive.php:            //$this->request->setParams($params);
./var/Widget/Archive.php:                $this->parameter->type = 'comments';
./var/Widget/Archive.php:                $matched = Typecho_Router::match($this->request->feed, 'pageSize=10&isFeed=1');
./var/Widget/Archive.php:                    $this->import($matched);
./var/Widget/Archive.php:            $this->setFeed(new Typecho_Feed(Typecho_Common::VERSION, $this->_feedType, $this->options->charset, _t('zh-CN')));
./var/Widget/Archive.php:            $this->parameter->pageSize = 10;
./var/Widget/Archive.php:        $reply = $this->request->filter('int')->replyTo;
./var/Widget/Archive.php:        if ($reply && $this->is('single')) {
./var/Widget/Archive.php:        return $this->options->commentsAntiSpam ? $commentUrl : $this->security->getTokenUrl($commentUrl);
./var/Widget/Archive.php:        $this->_pageRow = $pageRow;
./var/Widget/Archive.php:        $this->_archiveSlug = $archiveSlug;
./var/Widget/Archive.php:        $this->_archiveSingle = $archiveSingle;
./var/Widget/Archive.php:        $this->_archiveType = $archiveType;
./var/Widget/Archive.php:        $this->_archiveTitle = $archiveTitle;
./var/Widget/Archive.php:        $current = $this->getArchiveTitle();
./var/Widget/Archive.php:        $this->setArchiveTitle($current);
./var/Widget/Archive.php:        $this->_feedType = $feedType;
./var/Widget/Archive.php:        $this->_description = $description;
./var/Widget/Archive.php:        $this->_keywords = $keywords;
./var/Widget/Archive.php:        $this->_feedAtomUrl = $feedAtomUrl;
./var/Widget/Archive.php:        $this->_feedRssUrl = $feedRssUrl;
./var/Widget/Archive.php:        $this->_feedUrl = $feedUrl;
./var/Widget/Archive.php:        $this->_feed = $feed;
./var/Widget/Archive.php:        $this->_countSql = $countSql;
./var/Widget/Archive.php:        $this->_total = $total;
./var/Widget/Archive.php:        $this->_themeFile = $themeFile;
./var/Widget/Archive.php:        $this->_themeDir = $themeDir;
./var/Widget/Archive.php:        return $this->_pageRow;
./var/Widget/Archive.php:        return $this->_archiveSlug;
./var/Widget/Archive.php:        return $this->_archiveSingle;
./var/Widget/Archive.php:        return $this->_archiveType;
./var/Widget/Archive.php:        return $this->_archiveTitle;
./var/Widget/Archive.php:        return $this->_feedType;
./var/Widget/Archive.php:        return $this->_description;
./var/Widget/Archive.php:        return $this->_keywords;
./var/Widget/Archive.php:        return $this->_feedAtomUrl;
./var/Widget/Archive.php:        return $this->_feedRssUrl;
./var/Widget/Archive.php:        return $this->_feedUrl;
./var/Widget/Archive.php:        return $this->_feed;
./var/Widget/Archive.php:        return $this->_countSql;
./var/Widget/Archive.php:        if (false === $this->_total) {
./var/Widget/Archive.php:            $this->_total = $this->size($this->_countSql);
./var/Widget/Archive.php:        return $this->_total;
./var/Widget/Archive.php:        return $this->_currentPage;
./var/Widget/Archive.php:        return ceil($this->getTotal() / $this->parameter->pageSize);
./var/Widget/Archive.php:        return $this->_themeFile;
./var/Widget/Archive.php:        return $this->_themeDir;
./var/Widget/Archive.php:        $type = $this->parameter->type;
./var/Widget/Archive.php:            || $this->_makeSinglePageAsFrontPage    // 自定义首页不处理
./var/Widget/Archive.php:            || !$this->parameter->checkPermalink) { // 强制关闭
./var/Widget/Archive.php:        if ($this->_archiveSingle) {
./var/Widget/Archive.php:            $permalink = $this->permalink;
./var/Widget/Archive.php:            $value = array_merge($this->_pageRow, array(
./var/Widget/Archive.php:                'page'  =>  $this->_currentPage
./var/Widget/Archive.php:            $permalink = Typecho_Common::url($path, $this->options->index);
./var/Widget/Archive.php:        $requestUrl = $this->request->getRequestUrl();
./var/Widget/Archive.php:            $this->response->redirect($permalink, true);
./var/Widget/Archive.php:                $this->{$name} = $widget->{$name};
./var/Widget/Archive.php:                    $this->{$setMethod}($widget->{$getMethod}());
./var/Widget/Archive.php:        $this->pluginHandle()->indexHandle($this, $select);
./var/Widget/Archive.php:        $this->response->setStatus(404);
./var/Widget/Archive.php:        $this->_archiveTitle = _t('页面没找到');
./var/Widget/Archive.php:        $this->_archiveType = 'archive';
./var/Widget/Archive.php:        $this->_archiveSlug = 404;
./var/Widget/Archive.php:        $this->_themeFile = '404.php';
./var/Widget/Archive.php:        $this->_archiveSingle = false;
./var/Widget/Archive.php:        $this->pluginHandle()->error404Handle($this, $select);
./var/Widget/Archive.php:        if ('comment_page' == $this->parameter->type) {
./var/Widget/Archive.php:            $matched = Typecho_Router::match($this->request->permalink);
./var/Widget/Archive.php:                $this->import($matched);
./var/Widget/Archive.php:        $this->_archiveSingle = true;
./var/Widget/Archive.php:        $this->_archiveType = 'single';
./var/Widget/Archive.php:        if ('single' != $this->parameter->type) {
./var/Widget/Archive.php:            $select->where('table.contents.type = ?', $this->parameter->type);
./var/Widget/Archive.php:        if (isset($this->request->cid)) {
./var/Widget/Archive.php:            $select->where('table.contents.cid = ?', $this->request->filter('int')->cid);
./var/Widget/Archive.php:        if (isset($this->request->slug)) {
./var/Widget/Archive.php:            $select->where('table.contents.slug = ?', $this->request->slug);
./var/Widget/Archive.php:        if (isset($this->request->year)) {
./var/Widget/Archive.php:            $year = $this->request->filter('int')->year;
./var/Widget/Archive.php:            if (isset($this->request->month)) {
./var/Widget/Archive.php:                $fromMonth = $this->request->filter('int')->month;
./var/Widget/Archive.php:                if (isset($this->request->day)) {
./var/Widget/Archive.php:                    $fromDay = $this->request->filter('int')->day;
./var/Widget/Archive.php:            $from = mktime(0, 0, 0, $fromMonth, $fromDay, $year) - $this->options->timezone + $this->options->serverTimezone;
./var/Widget/Archive.php:            $to = mktime(23, 59, 59, $toMonth, $toDay, $year) - $this->options->timezone + $this->options->serverTimezone;
./var/Widget/Archive.php:        if ($this->request->isPost() && isset($this->request->protectPassword)) {
./var/Widget/Archive.php:            $this->security->protect();
./var/Widget/Archive.php:            Typecho_Cookie::set('protectPassword', $this->request->protectPassword, 0);
./var/Widget/Archive.php:        $this->query($select);
./var/Widget/Archive.php:        if (!$this->have() 
./var/Widget/Archive.php:            || (isset($this->request->category) && $this->category != $this->request->category)
./var/Widget/Archive.php:            || (isset($this->request->directory) && $this->request->directory != implode('/', $this->directory))) {
./var/Widget/Archive.php:            if (!$this->_invokeFromOutside) {
./var/Widget/Archive.php:        if ($this->template) {
./var/Widget/Archive.php:            $this->_themeFile = $this->template;
./var/Widget/Archive.php:        if (!$this->_makeSinglePageAsFrontPage) {
./var/Widget/Archive.php:            $this->_feedUrl = $this->feedUrl;
./var/Widget/Archive.php:            $this->_feedRssUrl = $this->feedRssUrl;
./var/Widget/Archive.php:            $this->_feedAtomUrl = $this->feedAtomUrl;
./var/Widget/Archive.php:            $this->_archiveTitle = $this->title;
./var/Widget/Archive.php:            $this->_keywords = implode(',', Typecho_Common::arrayFlatten($this->tags, 'name'));
./var/Widget/Archive.php:            $this->_description = $this->description;
./var/Widget/Archive.php:        $this->_archiveType = $this->type;
./var/Widget/Archive.php:        $this->_archiveSlug = ('post' == $this->type || 'attachment' == $this->type) ? $this->cid : $this->slug;
./var/Widget/Archive.php:        if ($this->hidden) {
./var/Widget/Archive.php:            $this->response->setStatus(403);
./var/Widget/Archive.php:        $this->pluginHandle()->singleHandle($this, $select);
./var/Widget/Archive.php:        $categorySelect = $this->db->select()
./var/Widget/Archive.php:        if (isset($this->request->mid)) {
./var/Widget/Archive.php:            $categorySelect->where('mid = ?', $this->request->filter('int')->mid);
./var/Widget/Archive.php:        if (isset($this->request->slug)) {
./var/Widget/Archive.php:            $categorySelect->where('slug = ?', $this->request->slug);
./var/Widget/Archive.php:        if (isset($this->request->directory)) {
./var/Widget/Archive.php:            $directory = explode('/', $this->request->directory);
./var/Widget/Archive.php:        $category = $this->db->fetchRow($categorySelect);
./var/Widget/Archive.php:        $categoryListWidget = $this->widget('Widget_Metas_Category_List', 'current=' . $category['mid']);
./var/Widget/Archive.php:        if (isset($directory) && ($this->request->directory != implode('/', $category['directory']))) {
./var/Widget/Archive.php:        $this->_pageRow = array_merge($category, array(
./var/Widget/Archive.php:        $this->_keywords = $category['name'];
./var/Widget/Archive.php:        $this->_description = $category['description'];
./var/Widget/Archive.php:        $this->_feedUrl = $category['feedUrl'];
./var/Widget/Archive.php:        $this->_feedRssUrl = $category['feedRssUrl'];
./var/Widget/Archive.php:        $this->_feedAtomUrl = $category['feedAtomUrl'];
./var/Widget/Archive.php:        $this->_archiveTitle = $category['name'];
./var/Widget/Archive.php:        $this->_archiveType = 'category';
./var/Widget/Archive.php:        $this->_archiveSlug = $category['slug'];
./var/Widget/Archive.php:        $this->pluginHandle()->categoryHandle($this, $select);
./var/Widget/Archive.php:        $tagSelect = $this->db->select()->from('table.metas')
./var/Widget/Archive.php:        if (isset($this->request->mid)) {
./var/Widget/Archive.php:            $tagSelect->where('mid = ?', $this->request->filter('int')->mid);
./var/Widget/Archive.php:        if (isset($this->request->slug)) {
./var/Widget/Archive.php:            $tagSelect->where('slug = ?', $this->request->slug);
./var/Widget/Archive.php:        $tag = $this->db->fetchRow($tagSelect,
./var/Widget/Archive.php:        array($this->widget('Widget_Abstract_Metas'), 'filter'));
./var/Widget/Archive.php:        $this->_pageRow = array_merge($tag, array(
./var/Widget/Archive.php:        $this->_keywords = $tag['name'];
./var/Widget/Archive.php:        $this->_description = $tag['description'];
./var/Widget/Archive.php:        $this->_feedUrl = $tag['feedUrl'];
./var/Widget/Archive.php:        $this->_feedRssUrl = $tag['feedRssUrl'];
./var/Widget/Archive.php:        $this->_feedAtomUrl = $tag['feedAtomUrl'];
./var/Widget/Archive.php:        $this->_archiveTitle = $tag['name'];
./var/Widget/Archive.php:        $this->_archiveType = 'tag';
./var/Widget/Archive.php:        $this->_archiveSlug = $tag['slug'];
./var/Widget/Archive.php:        $this->pluginHandle()->tagHandle($this, $select);
./var/Widget/Archive.php:        $uid = $this->request->filter('int')->uid;
./var/Widget/Archive.php:        $author = $this->db->fetchRow($this->db->select()->from('table.users')
./var/Widget/Archive.php:        array($this->widget('Widget_Abstract_Users'), 'filter'));
./var/Widget/Archive.php:        $this->_pageRow = $author;
./var/Widget/Archive.php:        $this->_keywords = $author['screenName'];
./var/Widget/Archive.php:        $this->_description = $author['screenName'];
./var/Widget/Archive.php:        $this->_feedUrl = $author['feedUrl'];
./var/Widget/Archive.php:        $this->_feedRssUrl = $author['feedRssUrl'];
./var/Widget/Archive.php:        $this->_feedAtomUrl = $author['feedAtomUrl'];
./var/Widget/Archive.php:        $this->_archiveTitle = $author['screenName'];
./var/Widget/Archive.php:        $this->_archiveType = 'author';
./var/Widget/Archive.php:        $this->_archiveSlug = $author['uid'];
./var/Widget/Archive.php:        $this->pluginHandle()->authorHandle($this, $select);
./var/Widget/Archive.php:        $year = $this->request->filter('int')->year;
./var/Widget/Archive.php:        $month = $this->request->filter('int')->month;
./var/Widget/Archive.php:        $day = $this->request->filter('int')->day;
./var/Widget/Archive.php:            $this->_archiveSlug = 'day';
./var/Widget/Archive.php:            $this->_archiveTitle = _t('%d年%d月%d日', $year, $month, $day);
./var/Widget/Archive.php:            $this->_archiveSlug = 'month';
./var/Widget/Archive.php:            $this->_archiveTitle = _t('%d年%d月', $year, $month);
./var/Widget/Archive.php:            $this->_archiveSlug = 'year';
./var/Widget/Archive.php:            $this->_archiveTitle = _t('%d年', $year);
./var/Widget/Archive.php:        $select->where('table.contents.created >= ?', $from - $this->options->timezone + $this->options->serverTimezone)
./var/Widget/Archive.php:        ->where('table.contents.created <= ?', $to - $this->options->timezone + $this->options->serverTimezone)
./var/Widget/Archive.php:        $this->_archiveType = 'date';
./var/Widget/Archive.php:        $this->_pageRow = $value;
./var/Widget/Archive.php:        $currentRoute = str_replace('_page', '', $this->parameter->type);
./var/Widget/Archive.php:        $this->_feedUrl = Typecho_Router::url($currentRoute, $value, $this->options->feedUrl);
./var/Widget/Archive.php:        $this->_feedRssUrl = Typecho_Router::url($currentRoute, $value, $this->options->feedRssUrl);
./var/Widget/Archive.php:        $this->_feedAtomUrl = Typecho_Router::url($currentRoute, $value, $this->options->feedAtomUrl);
./var/Widget/Archive.php:        $this->pluginHandle()->dateHandle($this, $select);
./var/Widget/Archive.php:        $keywords = $this->request->filter('url', 'search')->keywords;
./var/Widget/Archive.php:        $this->pluginHandle()->trigger($hasPushed)->search($keywords, $this);
./var/Widget/Archive.php:        $this->_keywords = $keywords;
./var/Widget/Archive.php:        $this->_pageRow = array('keywords' => urlencode($keywords));
./var/Widget/Archive.php:        $this->_feedUrl = Typecho_Router::url('search', array('keywords' => $keywords), $this->options->feedUrl);
./var/Widget/Archive.php:        $this->_feedRssUrl = Typecho_Router::url('search', array('keywords' => $keywords), $this->options->feedAtomUrl);
./var/Widget/Archive.php:        $this->_feedAtomUrl = Typecho_Router::url('search', array('keywords' => $keywords), $this->options->feedAtomUrl);
./var/Widget/Archive.php:        $this->_archiveTitle = $keywords;
./var/Widget/Archive.php:        $this->_archiveType = 'search';
./var/Widget/Archive.php:        $this->_archiveSlug = $keywords;
./var/Widget/Archive.php:        $this->pluginHandle()->searchHandle($this, $select);
./var/Widget/Archive.php:        if ($this->_feed) {
./var/Widget/Archive.php:        $this->pluginHandle()->trigger($queryPlugged)->query($this, $select);
./var/Widget/Archive.php:            $this->db->fetchAll($select, array($this, 'push'));
./var/Widget/Archive.php:        if ($this->have()) {
./var/Widget/Archive.php:        if (isset($this->request->s)) {
./var/Widget/Archive.php:            $filterKeywords = $this->request->filter('search')->s;
./var/Widget/Archive.php:                $this->response->redirect(Typecho_Router::url('search',
./var/Widget/Archive.php:                array('keywords' => urlencode($filterKeywords)), $this->options->index));
./var/Widget/Archive.php:        $frontPage = $this->options->frontPage;
./var/Widget/Archive.php:        if (!$this->_invokeByFeed && ('index' == $this->parameter->type || 'index_page' == $this->parameter->type)) {
./var/Widget/Archive.php:                $this->request->setParam('cid', intval(substr($frontPage, 5)));
./var/Widget/Archive.php:                $this->parameter->type = 'page';
./var/Widget/Archive.php:                $this->_makeSinglePageAsFrontPage = true;
./var/Widget/Archive.php:                $this->setThemeFile(substr($frontPage, 5));
./var/Widget/Archive.php:        if ('recent' != $frontPage && $this->options->frontArchive) {
./var/Widget/Archive.php:            $this->_archiveType = 'front';
./var/Widget/Archive.php:        $this->_currentPage = isset($this->request->page) ? $this->request->page : 1;
./var/Widget/Archive.php:        $select = $this->pluginHandle()->trigger($selectPlugged)->select($this);
./var/Widget/Archive.php:            if ('post' == $this->parameter->type || 'page' == $this->parameter->type) {
./var/Widget/Archive.php:                if ($this->user->hasLogin()) {
./var/Widget/Archive.php:                    $select = $this->select()->where('table.contents.status = ? OR table.contents.status = ? OR
./var/Widget/Archive.php:                            'publish', 'hidden', 'private', $this->user->uid);
./var/Widget/Archive.php:                    $select = $this->select()->where('table.contents.status = ? OR table.contents.status = ?',
./var/Widget/Archive.php:                if ($this->user->hasLogin()) {
./var/Widget/Archive.php:                    $select = $this->select()->where('table.contents.status = ? OR
./var/Widget/Archive.php:                            (table.contents.status = ? AND table.contents.authorId = ?)', 'publish', 'private', $this->user->uid);
./var/Widget/Archive.php:                    $select = $this->select()->where('table.contents.status = ?', 'publish');
./var/Widget/Archive.php:            $select->where('table.contents.created < ?', $this->options->gmtTime);
./var/Widget/Archive.php:        $this->pluginHandle()->handleInit($this, $select);
./var/Widget/Archive.php:        $this->_feedUrl = $this->options->feedUrl;
./var/Widget/Archive.php:        $this->_feedRssUrl = $this->options->feedRssUrl;
./var/Widget/Archive.php:        $this->_feedAtomUrl = $this->options->feedAtomUrl;
./var/Widget/Archive.php:        $this->_keywords = $this->options->keywords;
./var/Widget/Archive.php:        $this->_description = $this->options->description; 
./var/Widget/Archive.php:        if (isset($handles[$this->parameter->type])) {
./var/Widget/Archive.php:            $handle = $handles[$this->parameter->type];
./var/Widget/Archive.php:            $this->{$handle}($select, $hasPushed);
./var/Widget/Archive.php:            $hasPushed = $this->pluginHandle()->handle($this->parameter->type, $this, $select);
./var/Widget/Archive.php:        $functionsFile = $this->_themeDir . 'functions.php';
./var/Widget/Archive.php:        if ((!$this->_invokeFromOutside || $this->parameter->type == 404) && file_exists($functionsFile)) {
./var/Widget/Archive.php:        $this->_countSql = clone $select;
./var/Widget/Archive.php:        ->page($this->_currentPage, $this->parameter->pageSize);
./var/Widget/Archive.php:        $this->query($select);
./var/Widget/Archive.php:        parent::content($this->is('single') ? false : $more);
./var/Widget/Archive.php:        if ($this->have()) {
./var/Widget/Archive.php:            $total = $this->getTotal();
./var/Widget/Archive.php:            $this->pluginHandle()->trigger($hasNav)->pageNav($this->_currentPage, $total, 
./var/Widget/Archive.php:                $this->parameter->pageSize, $prev, $next, $splitPage, $splitWord);
./var/Widget/Archive.php:            if (!$hasNav && $total > $this->parameter->pageSize) {
./var/Widget/Archive.php:                $query = Typecho_Router::url($this->parameter->type .
./var/Widget/Archive.php:                (false === strpos($this->parameter->type, '_page') ? '_page' : NULL),
./var/Widget/Archive.php:                $this->_pageRow, $this->options->index);
./var/Widget/Archive.php:                    $this->_currentPage, $this->parameter->pageSize, $query);
./var/Widget/Archive.php:        if ($this->have()) {
./var/Widget/Archive.php:            if (empty($this->_pageNav)) {
./var/Widget/Archive.php:                $query = Typecho_Router::url($this->parameter->type .
./var/Widget/Archive.php:                (false === strpos($this->parameter->type, '_page') ? '_page' : NULL),
./var/Widget/Archive.php:                $this->_pageRow, $this->options->index);
./var/Widget/Archive.php:                $this->_pageNav = new Typecho_Widget_Helper_PageNavigator_Classic($this->getTotal(),
./var/Widget/Archive.php:                $this->_currentPage, $this->parameter->pageSize, $query);
./var/Widget/Archive.php:            $this->_pageNav->{$page}($word);
./var/Widget/Archive.php:            'parentId'      => $this->hidden ? 0 : $this->cid,
./var/Widget/Archive.php:            'parentContent' => $this->row,
./var/Widget/Archive.php:            'respondId'     => $this->respondId,
./var/Widget/Archive.php:            'commentPage'   => $this->request->filter('int')->commentPage,
./var/Widget/Archive.php:            'allowComment'  => $this->allow('comment')
./var/Widget/Archive.php:        return $this->widget('Widget_Comments_Archive', $parameter);
./var/Widget/Archive.php:        return $this->widget('Widget_Comments_Ping', array(
./var/Widget/Archive.php:            'parentId'      => $this->hidden ? 0 : $this->cid,
./var/Widget/Archive.php:            'parentContent' => $this->row,
./var/Widget/Archive.php:            'allowPing'     =>  $this->allow('ping')
./var/Widget/Archive.php:        return $this->widget('Widget_Contents_Attachment_Related@' . $this->cid . '-' . uniqid(), array(
./var/Widget/Archive.php:            'parentId'  => $this->cid,
./var/Widget/Archive.php:        $content = $this->db->fetchRow($this->select()->where('table.contents.created > ? AND table.contents.created < ?',
./var/Widget/Archive.php:            $this->created, $this->options->gmtTime)
./var/Widget/Archive.php:            ->where('table.contents.type = ?', $this->type)
./var/Widget/Archive.php:            $content = $this->filter($content);
./var/Widget/Archive.php:        $content = $this->db->fetchRow($this->select()->where('table.contents.created < ?', $this->created)
./var/Widget/Archive.php:            ->where('table.contents.type = ?', $this->type)
./var/Widget/Archive.php:            $content = $this->filter($content);
./var/Widget/Archive.php:                return $this->widget('Widget_Contents_Related_Author',
./var/Widget/Archive.php:                array('cid' => $this->cid, 'type' => $this->type, 'author' => $this->author->uid, 'limit' => $limit));
./var/Widget/Archive.php:                return $this->widget('Widget_Contents_Related',
./var/Widget/Archive.php:                array('cid' => $this->cid, 'type' => $this->type, 'tags' => $this->tags, 'limit' => $limit));
./var/Widget/Archive.php:            'description'   =>  htmlspecialchars($this->_description),
./var/Widget/Archive.php:            'keywords'      =>  htmlspecialchars($this->_keywords),
./var/Widget/Archive.php:            'generator'     =>  $this->options->generator,
./var/Widget/Archive.php:            'template'      =>  $this->options->theme,
./var/Widget/Archive.php:            'pingback'      =>  $this->options->xmlRpcUrl,
./var/Widget/Archive.php:            'xmlrpc'        =>  $this->options->xmlRpcUrl . '?rsd',
./var/Widget/Archive.php:            'wlw'           =>  $this->options->xmlRpcUrl . '?wlw',
./var/Widget/Archive.php:            'rss2'          =>  $this->_feedUrl,
./var/Widget/Archive.php:            'rss1'          =>  $this->_feedRssUrl,
./var/Widget/Archive.php:            'atom'          =>  $this->_feedAtomUrl
./var/Widget/Archive.php:        $allowFeed = !$this->is('single') || $this->allow('feed') || $this->_makeSinglePageAsFrontPage;
./var/Widget/Archive.php:        $allows = $this->pluginHandle()->headerOptions($allows, $this);
./var/Widget/Archive.php:        if ($this->options->commentsThreaded && $this->is('single')) {
./var/Widget/Archive.php:                response = this.dom('" . $this->respondId . "'), input = this.dom('comment-parent'),
./var/Widget/Archive.php:            var response = this.dom('{$this->respondId}'),
./var/Widget/Archive.php:        if ($this->options->commentsAntiSpam && $this->is('single')) {
./var/Widget/Archive.php:        var r = document.getElementById('{$this->respondId}');
./var/Widget/Archive.php:                                $this->security->getToken($this->request->getRequestUrl())) . "
./var/Widget/Archive.php:        $this->pluginHandle()->header($header, $this);
./var/Widget/Archive.php:        $this->pluginHandle()->footer($this);
./var/Widget/Archive.php:        if ($this->_archiveTitle) {
./var/Widget/Archive.php:            if (is_array($defines) && !empty($defines[$this->_archiveType])) {
./var/Widget/Archive.php:                $define = $defines[$this->_archiveType];
./var/Widget/Archive.php:            echo $before . sprintf($define, $this->_archiveTitle) . $end;
./var/Widget/Archive.php:        echo empty($this->_keywords) ? $default : str_replace(',', $split, htmlspecialchars($this->_keywords));
./var/Widget/Archive.php:        return ($archiveType == $this->_archiveType ||
./var/Widget/Archive.php:        (($this->_archiveSingle ? 'single' : 'archive') == $archiveType && 'index' != $this->_archiveType) ||
./var/Widget/Archive.php:        ('index' == $archiveType && $this->_makeSinglePageAsFrontPage))
./var/Widget/Archive.php:        && (empty($archiveSlug) ? true : $archiveSlug == $this->_archiveSlug);
./var/Widget/Archive.php:        require $this->_themeDir . $fileName;
./var/Widget/Archive.php:        $this->checkPermalink();
./var/Widget/Archive.php:        $this->response->setHeader('X-Pingback', $this->options->xmlRpcUrl);
./var/Widget/Archive.php:        if (!empty($this->_themeFile)) {
./var/Widget/Archive.php:            if (file_exists($this->_themeDir . $this->_themeFile)) {
./var/Widget/Archive.php:        if (!$validated && !empty($this->_archiveType)) {
./var/Widget/Archive.php:            if (!$validated && !empty($this->_archiveSlug)) {
./var/Widget/Archive.php:                $themeFile = $this->_archiveType . '/' . $this->_archiveSlug . '.php';
./var/Widget/Archive.php:                if (file_exists($this->_themeDir . $themeFile)) {
./var/Widget/Archive.php:                    $this->_themeFile = $themeFile;
./var/Widget/Archive.php:                $themeFile = $this->_archiveType . '.php';
./var/Widget/Archive.php:                if (file_exists($this->_themeDir . $themeFile)) {
./var/Widget/Archive.php:                    $this->_themeFile = $themeFile;
./var/Widget/Archive.php:            if (!$validated && 'attachment' == $this->_archiveType) {
./var/Widget/Archive.php:                if (file_exists($this->_themeDir . 'page.php')) {
./var/Widget/Archive.php:                    $this->_themeFile = 'page.php';
./var/Widget/Archive.php:                } else if (file_exists($this->_themeDir . 'post.php')) {
./var/Widget/Archive.php:                    $this->_themeFile = 'post.php';
./var/Widget/Archive.php:            if (!$validated && 'index' != $this->_archiveType && 'front' != $this->_archiveType) {
./var/Widget/Archive.php:                $themeFile = $this->_archiveSingle ? 'single.php' : 'archive.php';
./var/Widget/Archive.php:                if (file_exists($this->_themeDir . $themeFile)) {
./var/Widget/Archive.php:                    $this->_themeFile = $themeFile;
./var/Widget/Archive.php:                if (file_exists($this->_themeDir . $themeFile)) {
./var/Widget/Archive.php:                    $this->_themeFile = $themeFile;
./var/Widget/Archive.php:        $this->pluginHandle()->beforeRender($this);
./var/Widget/Archive.php:        require_once $this->_themeDir . $this->_themeFile;
./var/Widget/Archive.php:        $this->pluginHandle()->afterRender($this);
./var/Widget/Archive.php:        $this->_feed->setSubTitle($this->_description);
./var/Widget/Archive.php:        $this->_feed->setFeedUrl($this->_currentFeedUrl);
./var/Widget/Archive.php:        $this->_feed->setBaseUrl(('/' == $this->request->feed || 0 == strlen($this->request->feed)
./var/Widget/Archive.php:        || '/comments' == $this->request->feed || '/comments/' == $this->request->feed) ?
./var/Widget/Archive.php:        $this->options->siteUrl : Typecho_Common::url($this->request->feed, $this->options->index));
./var/Widget/Archive.php:        $this->_feed->setFeedUrl($this->request->makeUriByRequest());
./var/Widget/Archive.php:        if ($this->is('single') || 'comments' == $this->parameter->type) {
./var/Widget/Archive.php:            $this->_feed->setTitle(_t('%s 的评论',
./var/Widget/Archive.php:            $this->options->title . ($this->_archiveTitle ? ' - ' . $this->_archiveTitle : NULL)));
./var/Widget/Archive.php:            if ('comments' == $this->parameter->type) {
./var/Widget/Archive.php:                $comments = $this->widget('Widget_Comments_Recent', 'pageSize=10');
./var/Widget/Archive.php:                $comments = $this->widget('Widget_Comments_Recent', 'pageSize=10&parentId=' . $this->cid);
./var/Widget/Archive.php:                $suffix = $this->pluginHandle()->trigger($plugged)->commentFeedItem($this->_feedType, $comments);
./var/Widget/Archive.php:                $this->_feed->addItem(array(
./var/Widget/Archive.php:            $this->_feed->setTitle($this->options->title . ($this->_archiveTitle ? ' - ' . $this->_archiveTitle : NULL));
./var/Widget/Archive.php:            while ($this->next()) {
./var/Widget/Archive.php:                $suffix = $this->pluginHandle()->trigger($plugged)->feedItem($this->_feedType, $this);
./var/Widget/Archive.php:                if (Typecho_Feed::RSS2 == $this->_feedType) {
./var/Widget/Archive.php:                    $feedUrl = $this->feedUrl;
./var/Widget/Archive.php:                } else if (Typecho_Feed::RSS1 == $this->_feedType) {
./var/Widget/Archive.php:                    $feedUrl = $this->feedRssUrl;
./var/Widget/Archive.php:                } else if (Typecho_Feed::ATOM1 == $this->_feedType) {
./var/Widget/Archive.php:                    $feedUrl = $this->feedAtomUrl;
./var/Widget/Archive.php:                $this->_feed->addItem(array(
./var/Widget/Archive.php:                    'title'     =>  $this->title,
./var/Widget/Archive.php:                    'content'   =>  $this->options->feedFullText ? $this->content : (false !== strpos($this->text, '<!--more-->') ?
./var/Widget/Archive.php:                    $this->excerpt . "<p class=\"more\"><a href=\"{$this->permalink}\" title=\"{$this->title}\">[...]</a></p>" : $this->content),
./var/Widget/Archive.php:                    'date'      =>  $this->created,
./var/Widget/Archive.php:                    'link'      =>  $this->permalink,
./var/Widget/Archive.php:                    'author'    =>  $this->author,
./var/Widget/Archive.php:                    'excerpt'   =>  $this->description,
./var/Widget/Archive.php:                    'comments'  =>  $this->commentsNum,
./var/Widget/Archive.php:        $this->response->setContentType($this->_feedContentType);
./var/Widget/Archive.php:        echo $this->_feed->__toString();
./var/Widget/Comments/Admin.php:        $cid = isset($this->request->cid) ? $this->request->filter('int')->cid : $this->cid;
./var/Widget/Comments/Admin.php:        return $this->db->fetchRow($this->widget('Widget_Abstract_Contents')->select()
./var/Widget/Comments/Admin.php:        ->limit(1), array($this->widget('Widget_Abstract_Contents'), 'filter'));
./var/Widget/Comments/Admin.php:        $content = $this->parentContent;
./var/Widget/Comments/Admin.php:        $select = $this->select();
./var/Widget/Comments/Admin.php:        $this->parameter->setDefault('pageSize=20');
./var/Widget/Comments/Admin.php:        $this->_currentPage = $this->request->get('page', 1);
./var/Widget/Comments/Admin.php:        if (NULL != ($keywords = $this->request->filter('search')->keywords)) {
./var/Widget/Comments/Admin.php:        if (!$this->user->pass('editor', true)) {
./var/Widget/Comments/Admin.php:            $select->where('table.comments.ownerId = ?', $this->user->uid);
./var/Widget/Comments/Admin.php:        } else if (!isset($this->request->cid)) {
./var/Widget/Comments/Admin.php:            if ('on' == $this->request->__typecho_all_comments) {
./var/Widget/Comments/Admin.php:                if ('off' == $this->request->__typecho_all_comments) {
./var/Widget/Comments/Admin.php:                    $select->where('table.comments.ownerId = ?', $this->user->uid);
./var/Widget/Comments/Admin.php:        if (in_array($this->request->status, array('approved', 'waiting', 'spam'))) {
./var/Widget/Comments/Admin.php:            $select->where('table.comments.status = ?', $this->request->status);
./var/Widget/Comments/Admin.php:        } else if ('hold' == $this->request->status) {
./var/Widget/Comments/Admin.php:        if (isset($this->request->cid)) {
./var/Widget/Comments/Admin.php:            $select->where('table.comments.cid = ?', $this->request->filter('int')->cid);
./var/Widget/Comments/Admin.php:        $this->_countSql = clone $select;
./var/Widget/Comments/Admin.php:        ->page($this->_currentPage, $this->parameter->pageSize);
./var/Widget/Comments/Admin.php:        $this->db->fetchAll($select, array($this, 'push'));
./var/Widget/Comments/Admin.php:        $query = $this->request->makeUriByRequest('page={page}');
./var/Widget/Comments/Admin.php:        $nav = new Typecho_Widget_Helper_PageNavigator_Box(false === $this->_total ? $this->_total = $this->size($this->_countSql) : $this->_total,
./var/Widget/Comments/Admin.php:        $this->_currentPage, $this->parameter->pageSize, $query);
./var/Widget/Comments/Archive.php:        $this->parameter->setDefault('parentId=0&commentPage=0&commentsNum=0&allowComment=1');
./var/Widget/Comments/Archive.php:        $singleCommentOptions = $this->_singleCommentOptions;
./var/Widget/Comments/Archive.php:        if ($this->authorId) {
./var/Widget/Comments/Archive.php:            if ($this->authorId == $this->ownerId) {
./var/Widget/Comments/Archive.php:<li itemscope itemtype="http://schema.org/UserComments" id="<?php $this->theId(); ?>" class="comment-body<?php
./var/Widget/Comments/Archive.php:    if ($this->levels > 0) {
./var/Widget/Comments/Archive.php:        $this->levelsAlt(' comment-level-odd', ' comment-level-even');
./var/Widget/Comments/Archive.php:    $this->alt(' comment-odd', ' comment-even');
./var/Widget/Comments/Archive.php:        <span itemprop="image"><?php $this->gravatar($singleCommentOptions->avatarSize, $singleCommentOptions->defaultAvatar); ?></span>
./var/Widget/Comments/Archive.php:        $this->author();
./var/Widget/Comments/Archive.php:        <a href="<?php $this->permalink(); ?>"><time itemprop="commentTime" datetime="<?php $this->date('c'); ?>"><?php $singleCommentOptions->beforeDate();
./var/Widget/Comments/Archive.php:        $this->date($singleCommentOptions->dateFormat);
./var/Widget/Comments/Archive.php:        <?php if ('waiting' == $this->status) { ?>
./var/Widget/Comments/Archive.php:    <?php $this->content(); ?>
./var/Widget/Comments/Archive.php:        <?php $this->reply($singleCommentOptions->replyWord); ?>
./var/Widget/Comments/Archive.php:    <?php if ($this->children) { ?>
./var/Widget/Comments/Archive.php:        <?php $this->threadedComments(); ?>
./var/Widget/Comments/Archive.php:        if ($this->options->commentsPageBreak) {            
./var/Widget/Comments/Archive.php:            $pageRow = array('permalink' => $this->parentContent['pathinfo'], 'commentPage' => $this->_currentPage);
./var/Widget/Comments/Archive.php:                        $pageRow, $this->options->index) . '#' . $this->theId;
./var/Widget/Comments/Archive.php:        return $this->parentContent['permalink'] . '#' . $this->theId;
./var/Widget/Comments/Archive.php:        return $this->options->commentsThreaded && !$this->isTopLevel && isset($this->_threadedComments[$this->coid]) 
./var/Widget/Comments/Archive.php:            ? $this->_threadedComments[$this->coid] : array();
./var/Widget/Comments/Archive.php:        return $this->levels > $this->options->commentsMaxNestingLevels - 2;
./var/Widget/Comments/Archive.php:        return $this->parameter->parentContent;
./var/Widget/Comments/Archive.php:        $num = intval($this->_total);
./var/Widget/Comments/Archive.php:        if (!$this->parameter->parentId) {
./var/Widget/Comments/Archive.php:        $select = $this->select()->where('table.comments.cid = ?', $this->parameter->parentId)
./var/Widget/Comments/Archive.php:        if ($this->options->commentsShowCommentOnly) {
./var/Widget/Comments/Archive.php:        $this->db->fetchAll($select, array($this, 'push'));
./var/Widget/Comments/Archive.php:        if ($this->options->commentsThreaded) {
./var/Widget/Comments/Archive.php:            foreach ($this->stack as $coid => &$comment) {
./var/Widget/Comments/Archive.php:                if (0 != $parent && isset($this->stack[$parent])) {
./var/Widget/Comments/Archive.php:                    if ($comment['levels'] >= $this->options->commentsMaxNestingLevels) {
./var/Widget/Comments/Archive.php:                        $comment['levels'] = $this->stack[$parent]['levels'];
./var/Widget/Comments/Archive.php:                        $parent = $this->stack[$parent]['parent'];     // 上上层节点
./var/Widget/Comments/Archive.php:                    $comment['order'] = isset($this->_threadedComments[$parent]) 
./var/Widget/Comments/Archive.php:                        ? count($this->_threadedComments[$parent]) + 1 : 1;
./var/Widget/Comments/Archive.php:                    $this->_threadedComments[$parent][$coid] = $comment;
./var/Widget/Comments/Archive.php:            $this->stack = $outputComments;
./var/Widget/Comments/Archive.php:        if ('DESC' == $this->options->commentsOrder) {
./var/Widget/Comments/Archive.php:            $this->stack = array_reverse($this->stack, true);
./var/Widget/Comments/Archive.php:            $this->_threadedComments = array_map('array_reverse', $this->_threadedComments);
./var/Widget/Comments/Archive.php:        $this->_total = count($this->stack);
./var/Widget/Comments/Archive.php:        if ($this->options->commentsPageBreak) {
./var/Widget/Comments/Archive.php:            if ('last' == $this->options->commentsPageDisplay && !$this->parameter->commentPage) {
./var/Widget/Comments/Archive.php:                $this->_currentPage = ceil($this->_total / $this->options->commentsPageSize);
./var/Widget/Comments/Archive.php:                $this->_currentPage = $this->parameter->commentPage ? $this->parameter->commentPage : 1;
./var/Widget/Comments/Archive.php:            $this->stack = array_slice($this->stack,
./var/Widget/Comments/Archive.php:                ($this->_currentPage - 1) * $this->options->commentsPageSize, $this->options->commentsPageSize);
./var/Widget/Comments/Archive.php:            $this->row = current($this->stack);
./var/Widget/Comments/Archive.php:            $this->length = count($this->stack);
./var/Widget/Comments/Archive.php:        reset($this->stack);
./var/Widget/Comments/Archive.php:        $value = $this->filter($value);
./var/Widget/Comments/Archive.php:        if (0 != $value['parent'] && isset($this->stack[$value['parent']]['levels'])) {
./var/Widget/Comments/Archive.php:            $value['levels'] = $this->stack[$value['parent']]['levels'] + 1;
./var/Widget/Comments/Archive.php:        $this->stack[$value['coid']] = $value;
./var/Widget/Comments/Archive.php:        $this->length ++;
./var/Widget/Comments/Archive.php:        if ($this->options->commentsPageBreak && $this->_total > $this->options->commentsPageSize) {
./var/Widget/Comments/Archive.php:            $pageRow = $this->parameter->parentContent;
./var/Widget/Comments/Archive.php:            $query = Typecho_Router::url('comment_page', $pageRow, $this->options->index);
./var/Widget/Comments/Archive.php:            $nav = new Typecho_Widget_Helper_PageNavigator_Box($this->_total,
./var/Widget/Comments/Archive.php:                $this->_currentPage, $this->options->commentsPageSize, $query);
./var/Widget/Comments/Archive.php:        $children = $this->children;
./var/Widget/Comments/Archive.php:            $tmp = $this->row;
./var/Widget/Comments/Archive.php:            $this->sequence ++;
./var/Widget/Comments/Archive.php:            echo $this->_singleCommentOptions->before;
./var/Widget/Comments/Archive.php:                $this->row = $child;
./var/Widget/Comments/Archive.php:                $this->threadedCommentsCallback();
./var/Widget/Comments/Archive.php:                $this->row = $tmp;
./var/Widget/Comments/Archive.php:            echo $this->_singleCommentOptions->after;
./var/Widget/Comments/Archive.php:            $this->sequence --;
./var/Widget/Comments/Archive.php:        $this->_singleCommentOptions = Typecho_Config::factory($singleCommentOptions);
./var/Widget/Comments/Archive.php:        $this->_singleCommentOptions->setDefault(array(
./var/Widget/Comments/Archive.php:            'dateFormat'    =>  $this->options->commentDateFormat,
./var/Widget/Comments/Archive.php:        $this->pluginHandle()->trigger($plugged)->listComments($this->_singleCommentOptions, $this);
./var/Widget/Comments/Archive.php:            if ($this->have()) { 
./var/Widget/Comments/Archive.php:                echo $this->_singleCommentOptions->before;
./var/Widget/Comments/Archive.php:                while ($this->next()) {
./var/Widget/Comments/Archive.php:                    $this->threadedCommentsCallback();
./var/Widget/Comments/Archive.php:                echo $this->_singleCommentOptions->after;
./var/Widget/Comments/Archive.php:        $sequence = $this->levels <= 0 ? $this->sequence : $this->order;
./var/Widget/Comments/Archive.php:        $split = $this->levels % $num;
./var/Widget/Comments/Archive.php:        if ($this->options->commentsThreaded && !$this->isTopLevel && $this->parameter->allowComment) {
./var/Widget/Comments/Archive.php:            $this->pluginHandle()->trigger($plugged)->reply($word, $this);
./var/Widget/Comments/Archive.php:                echo '<a href="' . substr($this->permalink, 0, - strlen($this->theId) - 1) . '?replyTo=' . $this->coid .
./var/Widget/Comments/Archive.php:                    '#' . $this->parameter->respondId . '" rel="nofollow" onclick="return TypechoComment.reply(\'' .
./var/Widget/Comments/Archive.php:                    $this->theId . '\', ' . $this->coid . ');">' . $word . '</a>';
./var/Widget/Comments/Archive.php:        if ($this->options->commentsThreaded) {
./var/Widget/Comments/Archive.php:            $this->pluginHandle()->trigger($plugged)->cancelReply($word, $this);
./var/Widget/Comments/Archive.php:                $replyId = $this->request->filter('int')->replyTo;
./var/Widget/Comments/Archive.php:                echo '<a id="cancel-comment-reply-link" href="' . $this->parameter->parentContent['permalink'] . '#' . $this->parameter->respondId .
./var/Widget/Comments/Edit.php:        $comment = $this->db->fetchRow($this->select()
./var/Widget/Comments/Edit.php:        if ($comment && $this->commentIsWriteable()) {
./var/Widget/Comments/Edit.php:            $this->pluginHandle()->mark($comment, $this, $status);
./var/Widget/Comments/Edit.php:            $this->db->query($this->db->update('table.comments')
./var/Widget/Comments/Edit.php:                $this->db->query($this->db->update('table.contents')
./var/Widget/Comments/Edit.php:                $this->db->query($this->db->update('table.contents')
./var/Widget/Comments/Edit.php:        $comments = $this->request->filter('int')->getArray('coid');
./var/Widget/Comments/Edit.php:            if ($this->mark($comment, 'waiting')) {
./var/Widget/Comments/Edit.php:        $this->widget('Widget_Notice')->set($updateRows > 0 ? _t('评论已经被标记为待审核') : _t('没有评论被标记为待审核'),
./var/Widget/Comments/Edit.php:        $this->response->goBack();
./var/Widget/Comments/Edit.php:        $comments = $this->request->filter('int')->getArray('coid');
./var/Widget/Comments/Edit.php:            if ($this->mark($comment, 'spam')) {
./var/Widget/Comments/Edit.php:        $this->widget('Widget_Notice')->set($updateRows > 0 ? _t('评论已经被标记为垃圾') : _t('没有评论被标记为垃圾'),
./var/Widget/Comments/Edit.php:        $this->response->goBack();
./var/Widget/Comments/Edit.php:        $comments = $this->request->filter('int')->getArray('coid');
./var/Widget/Comments/Edit.php:            if ($this->mark($comment, 'approved')) {
./var/Widget/Comments/Edit.php:        $this->widget('Widget_Notice')->set($updateRows > 0 ? _t('评论已经被通过') : _t('没有评论被通过'),
./var/Widget/Comments/Edit.php:        $this->response->goBack();
./var/Widget/Comments/Edit.php:        $comments = $this->request->filter('int')->getArray('coid');
./var/Widget/Comments/Edit.php:            $comment = $this->db->fetchRow($this->select()
./var/Widget/Comments/Edit.php:            if ($comment && $this->commentIsWriteable()) {
./var/Widget/Comments/Edit.php:                $this->pluginHandle()->delete($comment, $this);
./var/Widget/Comments/Edit.php:                $this->db->query($this->db->delete('table.comments')->where('coid = ?', $coid));
./var/Widget/Comments/Edit.php:                    $this->db->query($this->db->update('table.contents')
./var/Widget/Comments/Edit.php:                $this->pluginHandle()->finishDelete($comment, $this);
./var/Widget/Comments/Edit.php:        if ($this->request->isAjax()) {
./var/Widget/Comments/Edit.php:                $this->response->throwJson(array(
./var/Widget/Comments/Edit.php:                $this->response->throwJson(array(
./var/Widget/Comments/Edit.php:            $this->widget('Widget_Notice')->set($deleteRows > 0 ? _t('评论已经被删除') : _t('没有评论被删除'),
./var/Widget/Comments/Edit.php:            $this->response->goBack();
./var/Widget/Comments/Edit.php:        $deleteQuery = $this->db->delete('table.comments')->where('status = ?', 'spam');
./var/Widget/Comments/Edit.php:        if (!$this->request->__typecho_all_comments || !$this->user->pass('editor', true)) {
./var/Widget/Comments/Edit.php:            $deleteQuery->where('ownerId = ?', $this->user->uid);
./var/Widget/Comments/Edit.php:        if (isset($this->request->cid)) {
./var/Widget/Comments/Edit.php:            $deleteQuery->where('cid = ?', $this->request->cid);
./var/Widget/Comments/Edit.php:        $deleteRows = $this->db->query($deleteQuery);
./var/Widget/Comments/Edit.php:        $this->widget('Widget_Notice')->set($deleteRows > 0 ?
./var/Widget/Comments/Edit.php:        $this->response->goBack();
./var/Widget/Comments/Edit.php:        $coid = $this->request->filter('int')->coid;
./var/Widget/Comments/Edit.php:        $comment = $this->db->fetchRow($this->select()
./var/Widget/Comments/Edit.php:        if ($comment && $this->commentIsWriteable()) {
./var/Widget/Comments/Edit.php:            $this->response->throwJson(array(
./var/Widget/Comments/Edit.php:            $this->response->throwJson(array(
./var/Widget/Comments/Edit.php:        $coid = $this->request->filter('int')->coid;
./var/Widget/Comments/Edit.php:        $commentSelect = $this->db->fetchRow($this->select()
./var/Widget/Comments/Edit.php:        if ($commentSelect && $this->commentIsWriteable()) {
./var/Widget/Comments/Edit.php:            $comment['text'] = $this->request->text;
./var/Widget/Comments/Edit.php:            $comment['author'] = $this->request->filter('strip_tags', 'trim', 'xss')->author;
./var/Widget/Comments/Edit.php:            $comment['mail'] = $this->request->filter('strip_tags', 'trim', 'xss')->mail;
./var/Widget/Comments/Edit.php:            $comment['url'] = $this->request->filter('url')->url;
./var/Widget/Comments/Edit.php:            $this->pluginHandle()->edit($comment, $this);
./var/Widget/Comments/Edit.php:            $this->update($comment, $this->db->sql()->where('coid = ?', $coid));
./var/Widget/Comments/Edit.php:            $updatedComment = $this->db->fetchRow($this->select()
./var/Widget/Comments/Edit.php:            $updatedComment['content'] = $this->content;
./var/Widget/Comments/Edit.php:            $this->pluginHandle()->finishEdit($this);
./var/Widget/Comments/Edit.php:            $this->response->throwJson(array(
./var/Widget/Comments/Edit.php:        $this->response->throwJson(array(
./var/Widget/Comments/Edit.php:        $coid = $this->request->filter('int')->coid;
./var/Widget/Comments/Edit.php:        $commentSelect = $this->db->fetchRow($this->select()
./var/Widget/Comments/Edit.php:        if ($commentSelect && $this->commentIsWriteable()) {
./var/Widget/Comments/Edit.php:                'created'   =>  $this->options->gmtTime,
./var/Widget/Comments/Edit.php:                'agent'     =>  $this->request->getAgent(),
./var/Widget/Comments/Edit.php:                'ip'        =>  $this->request->getIp(),
./var/Widget/Comments/Edit.php:                'authorId'  =>  $this->user->uid,
./var/Widget/Comments/Edit.php:                'author'    =>  $this->user->screenName,
./var/Widget/Comments/Edit.php:                'mail'      =>  $this->user->mail,
./var/Widget/Comments/Edit.php:                'url'       =>  $this->user->url,
./var/Widget/Comments/Edit.php:                'text'      =>  $this->request->text,
./var/Widget/Comments/Edit.php:            $this->pluginHandle()->comment($comment, $this);
./var/Widget/Comments/Edit.php:            $commentId = $this->insert($comment);
./var/Widget/Comments/Edit.php:            $insertComment = $this->db->fetchRow($this->select()
./var/Widget/Comments/Edit.php:            $insertComment['content'] = $this->content;
./var/Widget/Comments/Edit.php:            $this->pluginHandle()->finishComment($this);
./var/Widget/Comments/Edit.php:            $this->response->throwJson(array(
./var/Widget/Comments/Edit.php:        $this->response->throwJson(array(
./var/Widget/Comments/Edit.php:        $this->user->pass('contributor');
./var/Widget/Comments/Edit.php:        $this->security->protect();
./var/Widget/Comments/Edit.php:        $this->on($this->request->is('do=waiting'))->waitingComment();
./var/Widget/Comments/Edit.php:        $this->on($this->request->is('do=spam'))->spamComment();
./var/Widget/Comments/Edit.php:        $this->on($this->request->is('do=approved'))->approvedComment();
./var/Widget/Comments/Edit.php:        $this->on($this->request->is('do=delete'))->deleteComment();
./var/Widget/Comments/Edit.php:        $this->on($this->request->is('do=delete-spam'))->deleteSpamComment();
./var/Widget/Comments/Edit.php:        $this->on($this->request->is('do=get&coid'))->getComment();
./var/Widget/Comments/Edit.php:        $this->on($this->request->is('do=edit&coid'))->editComment();
./var/Widget/Comments/Edit.php:        $this->on($this->request->is('do=reply&coid'))->replyComment();
./var/Widget/Comments/Edit.php:        $this->response->redirect($this->options->adminUrl);
./var/Widget/Comments/Ping.php:        $this->parameter->setDefault('parentId=0');
./var/Widget/Comments/Ping.php:            $this->_customSinglePingCallback = true;
./var/Widget/Comments/Ping.php:        return $this->parameter->parentContent;
./var/Widget/Comments/Ping.php:        if ($this->_customSinglePingCallback) {
./var/Widget/Comments/Ping.php:<li id="<?php $this->theId(); ?>" class="ping-body">
./var/Widget/Comments/Ping.php:        $this->author(true);
./var/Widget/Comments/Ping.php:        <a href="<?php $this->permalink(); ?>"><?php $singlePingOptions->beforeDate();
./var/Widget/Comments/Ping.php:        $this->date($singlePingOptions->dateFormat);
./var/Widget/Comments/Ping.php:    <?php $this->content(); ?>
./var/Widget/Comments/Ping.php:        echo sprintf(isset($args[$this->length]) ? $args[$this->length] : array_pop($this->length), $this->length);
./var/Widget/Comments/Ping.php:        if (!$this->parameter->parentId) {
./var/Widget/Comments/Ping.php:        $select = $this->select()->where('table.comments.status = ?', 'approved')
./var/Widget/Comments/Ping.php:        ->where('table.comments.cid = ?', $this->parameter->parentId)
./var/Widget/Comments/Ping.php:        $this->db->fetchAll($select, array($this, 'push'));
./var/Widget/Comments/Ping.php:        if ($this->have()) {
./var/Widget/Comments/Ping.php:                'dateFormat'    =>  $this->options->commentDateFormat
./var/Widget/Comments/Ping.php:            while ($this->next()) {
./var/Widget/Comments/Ping.php:                $this->singlePingCallback($parsedSinglePingOptions);
./var/Widget/Comments/Recent.php:        $this->parameter->setDefault(array('pageSize' => $this->options->commentsListSize, 'parentId' => 0, 'ignoreAuthor' => false));
./var/Widget/Comments/Recent.php:        $select  = $this->select()->limit($this->parameter->pageSize)
./var/Widget/Comments/Recent.php:        if ($this->parameter->parentId) {
./var/Widget/Comments/Recent.php:            $select->where('cid = ?', $this->parameter->parentId);
./var/Widget/Comments/Recent.php:        if ($this->options->commentsShowCommentOnly) {
./var/Widget/Comments/Recent.php:        if ($this->parameter->ignoreAuthor) {
./var/Widget/Comments/Recent.php:        $this->db->fetchAll($select, array($this, 'push'));
./var/Widget/Contents/Attachment/Admin.php:        return new Typecho_Config($this->db->fetchRow(
./var/Widget/Contents/Attachment/Admin.php:        $this->select()->where('table.contents.cid = ?', $this->parentId)
./var/Widget/Contents/Attachment/Admin.php:        $this->parameter->setDefault('pageSize=20');
./var/Widget/Contents/Attachment/Admin.php:        $this->_currentPage = $this->request->get('page', 1);
./var/Widget/Contents/Attachment/Admin.php:        $select = $this->select()->where('table.contents.type = ?', 'attachment');
./var/Widget/Contents/Attachment/Admin.php:        if (!$this->user->pass('editor', true)) {
./var/Widget/Contents/Attachment/Admin.php:            $select->where('table.contents.authorId = ?', $this->user->uid);
./var/Widget/Contents/Attachment/Admin.php:        if (NULL != ($keywords = $this->request->filter('search')->keywords)) {
./var/Widget/Contents/Attachment/Admin.php:        $this->_countSql = clone $select;
./var/Widget/Contents/Attachment/Admin.php:        ->page($this->_currentPage, $this->parameter->pageSize);
./var/Widget/Contents/Attachment/Admin.php:        $this->db->fetchAll($select, array($this, 'push'));
./var/Widget/Contents/Attachment/Admin.php:        $query = $this->request->makeUriByRequest('page={page}');
./var/Widget/Contents/Attachment/Admin.php:        $nav = new Typecho_Widget_Helper_PageNavigator_Box(false === $this->_total ? $this->_total = $this->size($this->_countSql) : $this->_total,
./var/Widget/Contents/Attachment/Admin.php:        $this->_currentPage, $this->parameter->pageSize, $query);
./var/Widget/Contents/Attachment/Edit.php:        return 'page=' . $this->getPageOffset('cid', $cid, 'attachment', $status,
./var/Widget/Contents/Attachment/Edit.php:        $this->user->pass('editor', true) ? 0 : $this->user->uid);
./var/Widget/Contents/Attachment/Edit.php:        $this->user->pass('contributor');
./var/Widget/Contents/Attachment/Edit.php:        if ((isset($this->request->cid) && 'delete' != $this->request->do
./var/Widget/Contents/Attachment/Edit.php:         && 'insert' != $this->request->do) || 'update' == $this->request->do) {
./var/Widget/Contents/Attachment/Edit.php:            $this->db->fetchRow($this->select()
./var/Widget/Contents/Attachment/Edit.php:            ->where('table.contents.cid = ?', $this->request->filter('int')->cid)
./var/Widget/Contents/Attachment/Edit.php:            if (!$this->have()) {
./var/Widget/Contents/Attachment/Edit.php:            } else if ($this->have() && !$this->allow('edit')) {
./var/Widget/Contents/Attachment/Edit.php:        if (empty($this->request->slug)) {
./var/Widget/Contents/Attachment/Edit.php:            if (empty($slug) || !$this->slugExists($name)) {
./var/Widget/Contents/Attachment/Edit.php:        $select = $this->db->select()
./var/Widget/Contents/Attachment/Edit.php:        if ($this->request->cid) {
./var/Widget/Contents/Attachment/Edit.php:            $select->where('cid <> ?', $this->request->cid);
./var/Widget/Contents/Attachment/Edit.php:        $attachment = $this->db->fetchRow($select);
./var/Widget/Contents/Attachment/Edit.php:        $form = new Typecho_Widget_Helper_Form($this->security->getIndex('/action/contents-attachment-edit'),
./var/Widget/Contents/Attachment/Edit.php:        $name = new Typecho_Widget_Helper_Form_Element_Text('name', NULL, $this->title, _t('标题 *'));
./var/Widget/Contents/Attachment/Edit.php:        $slug = new Typecho_Widget_Helper_Form_Element_Text('slug', NULL, $this->slug, _t('缩略名'),
./var/Widget/Contents/Attachment/Edit.php:        $description =  new Typecho_Widget_Helper_Form_Element_Textarea('description', NULL, $this->attachment->description,
./var/Widget/Contents/Attachment/Edit.php:        $cid = new Typecho_Widget_Helper_Form_Element_Hidden('cid', NULL, $this->cid);
./var/Widget/Contents/Attachment/Edit.php:            'href'  => $this->security->getIndex('/action/contents-attachment-edit?do=delete&cid=' . $this->cid),
./var/Widget/Contents/Attachment/Edit.php:            'lang'  => _t('你确认删除文件 %s 吗?', $this->attachment->name)
./var/Widget/Contents/Attachment/Edit.php:        if ($this->form('update')->validate()) {
./var/Widget/Contents/Attachment/Edit.php:            $this->response->goBack();
./var/Widget/Contents/Attachment/Edit.php:        $input = $this->request->from('name', 'slug', 'description');
./var/Widget/Contents/Attachment/Edit.php:        $content = unserialize($this->attachment->__toString());
./var/Widget/Contents/Attachment/Edit.php:        $cid = $this->request->filter('int')->cid;
./var/Widget/Contents/Attachment/Edit.php:        $updateRows = $this->update($attachment, $this->db->sql()->where('cid = ?', $cid));
./var/Widget/Contents/Attachment/Edit.php:            $this->db->fetchRow($this->select()
./var/Widget/Contents/Attachment/Edit.php:            $this->widget('Widget_Notice')->highlight($this->theId);
./var/Widget/Contents/Attachment/Edit.php:            $this->widget('Widget_Notice')->set('publish' == $this->status ?
./var/Widget/Contents/Attachment/Edit.php:            _t('文件 <a href="%s">%s</a> 已经被更新', $this->permalink, $this->title) :
./var/Widget/Contents/Attachment/Edit.php:            _t('未归档文件 %s 已经被更新', $this->title), 'success');
./var/Widget/Contents/Attachment/Edit.php:        $this->response->redirect(Typecho_Common::url('manage-medias.php?' .
./var/Widget/Contents/Attachment/Edit.php:        $this->getPageOffsetQuery($cid, $this->status), $this->options->adminUrl));
./var/Widget/Contents/Attachment/Edit.php:        $posts = $this->request->filter('int')->getArray('cid');
./var/Widget/Contents/Attachment/Edit.php:            $this->pluginHandle()->delete($post, $this);
./var/Widget/Contents/Attachment/Edit.php:            $condition = $this->db->sql()->where('cid = ?', $post);
./var/Widget/Contents/Attachment/Edit.php:            $row = $this->db->fetchRow($this->select()
./var/Widget/Contents/Attachment/Edit.php:            if ($this->isWriteable($condition) && $this->delete($condition)) {
./var/Widget/Contents/Attachment/Edit.php:                $this->db->query($this->db->delete('table.comments')
./var/Widget/Contents/Attachment/Edit.php:                $this->pluginHandle()->finishDelete($post, $this);
./var/Widget/Contents/Attachment/Edit.php:        if ($this->request->isAjax()) {
./var/Widget/Contents/Attachment/Edit.php:            $this->response->throwJson($deleteCount > 0 ? array('code' => 200, 'message' => _t('文件已经被删除'))
./var/Widget/Contents/Attachment/Edit.php:            $this->widget('Widget_Notice')->set($deleteCount > 0 ? _t('文件已经被删除') : _t('没有文件被删除'), 
./var/Widget/Contents/Attachment/Edit.php:            $this->response->redirect(Typecho_Common::url('manage-medias.php', $this->options->adminUrl));
./var/Widget/Contents/Attachment/Edit.php:            $posts = Typecho_Common::arrayFlatten($this->db->fetchAll($this->select('cid')
./var/Widget/Contents/Attachment/Edit.php:                $this->pluginHandle()->delete($post, $this);
./var/Widget/Contents/Attachment/Edit.php:                $condition = $this->db->sql()->where('cid = ?', $post);
./var/Widget/Contents/Attachment/Edit.php:                $row = $this->db->fetchRow($this->select()
./var/Widget/Contents/Attachment/Edit.php:                if ($this->isWriteable($condition) && $this->delete($condition)) {
./var/Widget/Contents/Attachment/Edit.php:                    $this->db->query($this->db->delete('table.comments')
./var/Widget/Contents/Attachment/Edit.php:                    $status = $this->status;
./var/Widget/Contents/Attachment/Edit.php:                    $this->pluginHandle()->finishDelete($post, $this);
./var/Widget/Contents/Attachment/Edit.php:        $this->widget('Widget_Notice')->set($deleteCount > 0 ? _t('未归档文件已经被清理') : _t('没有未归档文件被清理'), 
./var/Widget/Contents/Attachment/Edit.php:        $this->response->redirect(Typecho_Common::url('manage-medias.php', $this->options->adminUrl));
./var/Widget/Contents/Attachment/Edit.php:        $this->security->protect();
./var/Widget/Contents/Attachment/Edit.php:        $this->on($this->request->is('do=delete'))->deleteAttachment();
./var/Widget/Contents/Attachment/Edit.php:        $this->on($this->request->is('do=update'))->updateAttachment();
./var/Widget/Contents/Attachment/Edit.php:        $this->on($this->request->is('do=clear'))->clearAttachment();
./var/Widget/Contents/Attachment/Edit.php:        $this->response->redirect($this->options->adminUrl);
./var/Widget/Contents/Attachment/Related.php:        $this->parameter->setDefault('parentId=0&limit=0');
./var/Widget/Contents/Attachment/Related.php:        if (!$this->parameter->parentId) {
./var/Widget/Contents/Attachment/Related.php:        $select = $this->select()->where('table.contents.type = ?', 'attachment');
./var/Widget/Contents/Attachment/Related.php:        $select->where('table.contents.parent = ?', $this->parameter->parentId);
./var/Widget/Contents/Attachment/Related.php:        if ($this->parameter->limit > 0) {
./var/Widget/Contents/Attachment/Related.php:            $select->limit($this->parameter->limit);
./var/Widget/Contents/Attachment/Related.php:        if ($this->parameter->offset > 0) {
./var/Widget/Contents/Attachment/Related.php:            $select->offset($this->parameter->offset);
./var/Widget/Contents/Attachment/Related.php:        $this->db->fetchAll($select, array($this, 'push'));
./var/Widget/Contents/Attachment/Unattached.php:        $select = $this->select()->where('table.contents.type = ? AND
./var/Widget/Contents/Attachment/Unattached.php:        $this->where('table.contents.authorId = ?', $this->user->uid);
./var/Widget/Contents/Attachment/Unattached.php:        $this->db->fetchAll($select, array($this, 'push'));
./var/Widget/Contents/Page/Admin.php:        $select = $this->select()->where('table.contents.type = ? OR (table.contents.type = ? AND table.contents.parent = ?)', 'page', 'page_draft', 0);
./var/Widget/Contents/Page/Admin.php:        if (NULL != ($keywords = $this->request->keywords)) {
./var/Widget/Contents/Page/Admin.php:        $this->db->fetchAll($select, array($this, 'push'));
./var/Widget/Contents/Page/Edit.php:        $this->user->pass('editor');
./var/Widget/Contents/Page/Edit.php:        if (!empty($this->request->cid) && 'delete' != $this->request->do 
./var/Widget/Contents/Page/Edit.php:            && 'sort' != $this->request->do) {
./var/Widget/Contents/Page/Edit.php:            $this->db->fetchRow($this->select()
./var/Widget/Contents/Page/Edit.php:            ->where('table.contents.cid = ?', $this->request->filter('int')->cid)
./var/Widget/Contents/Page/Edit.php:            if ('page_draft' == $this->status && $this->parent) {
./var/Widget/Contents/Page/Edit.php:                $this->response->redirect(Typecho_Common::url('write-page.php?cid=' . $this->parent, $this->options->adminUrl));
./var/Widget/Contents/Page/Edit.php:            if (!$this->have()) {
./var/Widget/Contents/Page/Edit.php:            } else if ($this->have() && !$this->allow('edit')) {
./var/Widget/Contents/Page/Edit.php:        $contents = $this->request->from('text', 'template', 'allowComment',
./var/Widget/Contents/Page/Edit.php:        $contents['title'] = $this->request->get('title', _t('未命名页面'));
./var/Widget/Contents/Page/Edit.php:        $contents['created'] = $this->getCreated();
./var/Widget/Contents/Page/Edit.php:        if ($this->request->markdown && $this->options->markdown) {
./var/Widget/Contents/Page/Edit.php:        $contents = $this->pluginHandle()->write($contents, $this);
./var/Widget/Contents/Page/Edit.php:        if ($this->request->is('do=publish')) { 
./var/Widget/Contents/Page/Edit.php:            $this->publish($contents);
./var/Widget/Contents/Page/Edit.php:            $this->pluginHandle()->finishPublish($contents, $this);
./var/Widget/Contents/Page/Edit.php:            $this->widget('Widget_Service')->sendPing($this->cid);
./var/Widget/Contents/Page/Edit.php:            $this->widget('Widget_Notice')->set(_t('页面 "<a href="%s">%s</a>" 已经发布', $this->permalink, $this->title), 'success');
./var/Widget/Contents/Page/Edit.php:            $this->widget('Widget_Notice')->highlight($this->theId);
./var/Widget/Contents/Page/Edit.php:            $this->response->redirect(Typecho_Common::url('manage-pages.php?', $this->options->adminUrl));
./var/Widget/Contents/Page/Edit.php:            $this->save($contents);
./var/Widget/Contents/Page/Edit.php:            $this->pluginHandle()->finishSave($contents, $this);
./var/Widget/Contents/Page/Edit.php:            if ($this->request->isAjax()) {
./var/Widget/Contents/Page/Edit.php:                $created = new Typecho_Date($this->options->gmtTime);
./var/Widget/Contents/Page/Edit.php:                $this->response->throwJson(array(
./var/Widget/Contents/Page/Edit.php:                    'cid'       =>  $this->cid
./var/Widget/Contents/Page/Edit.php:                $this->widget('Widget_Notice')->set(_t('草稿 "%s" 已经被保存', $this->title), 'success');
./var/Widget/Contents/Page/Edit.php:                $this->response->redirect(Typecho_Common::url('write-page.php?cid=' . $this->cid, $this->options->adminUrl));
./var/Widget/Contents/Page/Edit.php:        $pages = $this->request->filter('int')->getArray('cid');
./var/Widget/Contents/Page/Edit.php:            $this->pluginHandle()->delete($page, $this);
./var/Widget/Contents/Page/Edit.php:            if ($this->delete($this->db->sql()->where('cid = ?', $page))) {
./var/Widget/Contents/Page/Edit.php:                $this->db->query($this->db->delete('table.comments')
./var/Widget/Contents/Page/Edit.php:                $this->unAttach($page);
./var/Widget/Contents/Page/Edit.php:                if ($this->options->frontPage == 'page:' . $page) {
./var/Widget/Contents/Page/Edit.php:                    $this->db->query($this->db->update('table.options')
./var/Widget/Contents/Page/Edit.php:                $draft = $this->db->fetchRow($this->db->select('cid')
./var/Widget/Contents/Page/Edit.php:                $this->deleteFields($page);
./var/Widget/Contents/Page/Edit.php:                    $this->deleteDraft($draft['cid']);
./var/Widget/Contents/Page/Edit.php:                    $this->deleteFields($draft['cid']);
./var/Widget/Contents/Page/Edit.php:                $this->pluginHandle()->finishDelete($page, $this);
./var/Widget/Contents/Page/Edit.php:        $this->widget('Widget_Notice')->set($deleteCount > 0 ? _t('页面已经被删除') : _t('没有页面被删除'),
./var/Widget/Contents/Page/Edit.php:        $this->response->goBack();
./var/Widget/Contents/Page/Edit.php:        $pages = $this->request->filter('int')->getArray('cid');
./var/Widget/Contents/Page/Edit.php:            $draft = $this->db->fetchRow($this->db->select('cid')
./var/Widget/Contents/Page/Edit.php:                $this->deleteDraft($draft['cid']);
./var/Widget/Contents/Page/Edit.php:                $this->deleteFields($draft['cid']);
./var/Widget/Contents/Page/Edit.php:        $this->widget('Widget_Notice')->set($deleteCount > 0 ? _t('草稿已经被删除') : _t('没有草稿被删除'),
./var/Widget/Contents/Page/Edit.php:        $this->response->goBack();
./var/Widget/Contents/Page/Edit.php:        $pages = $this->request->filter('int')->getArray('cid');
./var/Widget/Contents/Page/Edit.php:                $this->db->query($this->db->update('table.contents')->rows(array('order' => $sort + 1))
./var/Widget/Contents/Page/Edit.php:        if (!$this->request->isAjax()) {
./var/Widget/Contents/Page/Edit.php:            $this->response->goBack();
./var/Widget/Contents/Page/Edit.php:            $this->response->throwJson(array('success' => 1, 'message' => _t('页面排序已经完成')));
./var/Widget/Contents/Page/Edit.php:        $this->security->protect();
./var/Widget/Contents/Page/Edit.php:        $this->on($this->request->is('do=publish') || $this->request->is('do=save'))->writePage();
./var/Widget/Contents/Page/Edit.php:        $this->on($this->request->is('do=delete'))->deletePage();
./var/Widget/Contents/Page/Edit.php:        $this->on($this->request->is('do=deleteDraft'))->deletePageDraft();
./var/Widget/Contents/Page/Edit.php:        $this->on($this->request->is('do=sort'))->sortPage();
./var/Widget/Contents/Page/Edit.php:        $this->response->redirect($this->options->adminUrl);
./var/Widget/Contents/Page/List.php:        $select = $this->select()->where('table.contents.type = ?', 'page')
./var/Widget/Contents/Page/List.php:        ->where('table.contents.created < ?', $this->options->gmtTime)
./var/Widget/Contents/Page/List.php:        $frontPage = explode(':', $this->options->frontPage);
./var/Widget/Contents/Page/List.php:        $this->db->fetchAll($select, array($this, 'push'));
./var/Widget/Contents/Post/Admin.php:        $savedPost = $this->db->fetchRow($this->db->select('cid', 'modified')
./var/Widget/Contents/Post/Admin.php:            $this->cid, 'post_draft', 'page_draft')
./var/Widget/Contents/Post/Admin.php:            $this->modified = $savedPost['modified'];
./var/Widget/Contents/Post/Admin.php:        if (isset($this->request->uid)) {
./var/Widget/Contents/Post/Admin.php:            return _t('%s的文章', $this->db->fetchObject($this->db->select('screenName')->from('table.users')
./var/Widget/Contents/Post/Admin.php:                ->where('uid = ?', $this->request->filter('int')->uid))->screenName);
./var/Widget/Contents/Post/Admin.php:        $this->parameter->setDefault('pageSize=20');
./var/Widget/Contents/Post/Admin.php:        $this->_currentPage = $this->request->get('page', 1);
./var/Widget/Contents/Post/Admin.php:        $select = $this->select()->where('table.contents.type = ? OR (table.contents.type = ? AND table.contents.parent = ?)', 'post', 'post_draft', 0);
./var/Widget/Contents/Post/Admin.php:        if (NULL != ($category = $this->request->category)) {
./var/Widget/Contents/Post/Admin.php:        if (!$this->user->pass('editor', true)) {
./var/Widget/Contents/Post/Admin.php:            $select->where('table.contents.authorId = ?', $this->user->uid);
./var/Widget/Contents/Post/Admin.php:        } else if (isset($this->request->uid)) {
./var/Widget/Contents/Post/Admin.php:            $select->where('table.contents.authorId = ?', $this->request->filter('int')->uid);
./var/Widget/Contents/Post/Admin.php:        if (NULL != ($keywords = $this->request->filter('search')->keywords)) {
./var/Widget/Contents/Post/Admin.php:        $this->_countSql = clone $select;
./var/Widget/Contents/Post/Admin.php:        ->page($this->_currentPage, $this->parameter->pageSize);
./var/Widget/Contents/Post/Admin.php:        $this->db->fetchAll($select, array($this, 'push'));
./var/Widget/Contents/Post/Admin.php:        $query = $this->request->makeUriByRequest('page={page}');
./var/Widget/Contents/Post/Admin.php:        $nav = new Typecho_Widget_Helper_PageNavigator_Box(false === $this->_total ? $this->_total = $this->size($this->_countSql) : $this->_total,
./var/Widget/Contents/Post/Admin.php:        $this->_currentPage, $this->parameter->pageSize, $query);
./var/Widget/Contents/Post/Date.php:        $this->db = Typecho_Db::get();
./var/Widget/Contents/Post/Date.php:        $this->options = $this->widget('Widget_Options');
./var/Widget/Contents/Post/Date.php:        $this->parameter->setDefault('format=Y-m&type=month&limit=0');
./var/Widget/Contents/Post/Date.php:        $resource = $this->db->query($this->db->select('created')->from('table.contents')
./var/Widget/Contents/Post/Date.php:        ->where('table.contents.created < ?', $this->options->gmtTime)
./var/Widget/Contents/Post/Date.php:        $offset = $this->options->timezone - $this->options->serverTimezone;
./var/Widget/Contents/Post/Date.php:        while ($post = $this->db->fetchRow($resource)) {
./var/Widget/Contents/Post/Date.php:            $date = date($this->parameter->format, $timeStamp);
./var/Widget/Contents/Post/Date.php:        if ($this->parameter->limit > 0) {
./var/Widget/Contents/Post/Date.php:            $result = array_slice($result, 0, $this->parameter->limit);
./var/Widget/Contents/Post/Date.php:            $row['permalink'] = Typecho_Router::url('archive_' . $this->parameter->type, $row, $this->widget('Widget_Options')->index);
./var/Widget/Contents/Post/Date.php:            $this->push($row);
./var/Widget/Contents/Post/Edit.php:        if ($this->have()) {
./var/Widget/Contents/Post/Edit.php:            return $this->db->fetchAll($this->db
./var/Widget/Contents/Post/Edit.php:            ->where('table.relationships.cid = ?', $this->cid)
./var/Widget/Contents/Post/Edit.php:            ->where('table.metas.type = ?', 'tag'), array($this->widget('Widget_Abstract_Metas'), 'filter'));
./var/Widget/Contents/Post/Edit.php:        return new Typecho_Date($this->options->gmtTime);
./var/Widget/Contents/Post/Edit.php:        if ($this->have()) {
./var/Widget/Contents/Post/Edit.php:            if ('post_draft' == $this->type) {
./var/Widget/Contents/Post/Edit.php:                return $this->row;
./var/Widget/Contents/Post/Edit.php:                return $this->db->fetchRow($this->widget('Widget_Abstract_Contents')->select()
./var/Widget/Contents/Post/Edit.php:                    $this->cid, 'post_draft', 'page_draft')
./var/Widget/Contents/Post/Edit.php:                ->limit(1), array($this->widget('Widget_Abstract_Contents'), 'filter'));
./var/Widget/Contents/Post/Edit.php:        $fieldNames = $this->request->getArray('fieldNames');
./var/Widget/Contents/Post/Edit.php:                'fieldNames'    =>  $this->request->getArray('fieldNames'),
./var/Widget/Contents/Post/Edit.php:                'fieldTypes'    =>  $this->request->getArray('fieldTypes'),
./var/Widget/Contents/Post/Edit.php:                'fieldValues'   =>  $this->request->getArray('fieldValues')
./var/Widget/Contents/Post/Edit.php:        $customFields = $this->request->getArray('fields');
./var/Widget/Contents/Post/Edit.php:        $created = $this->options->gmtTime;
./var/Widget/Contents/Post/Edit.php:        if (!empty($this->request->created)) {
./var/Widget/Contents/Post/Edit.php:            $created = $this->request->created;
./var/Widget/Contents/Post/Edit.php:        } else if (!empty($this->request->date)) {
./var/Widget/Contents/Post/Edit.php:            $created = strtotime($this->request->date) - $this->options->timezone + $this->options->serverTimezone;
./var/Widget/Contents/Post/Edit.php:        } else if (!empty($this->request->year) && !empty($this->request->month) && !empty($this->request->day)) {
./var/Widget/Contents/Post/Edit.php:            $second = intval($this->request->get('sec', date('s')));
./var/Widget/Contents/Post/Edit.php:            $min = intval($this->request->get('min', date('i')));
./var/Widget/Contents/Post/Edit.php:            $hour = intval($this->request->get('hour', date('H')));
./var/Widget/Contents/Post/Edit.php:            $year = intval($this->request->year);
./var/Widget/Contents/Post/Edit.php:            $month = intval($this->request->month);
./var/Widget/Contents/Post/Edit.php:            $day = intval($this->request->day);
./var/Widget/Contents/Post/Edit.php:            $created = mktime($hour, $min, $second, $month, $day, $year) - $this->options->timezone + $this->options->serverTimezone;
./var/Widget/Contents/Post/Edit.php:        } else if ($this->request->is('cid')) {
./var/Widget/Contents/Post/Edit.php:            $created = $this->created;
./var/Widget/Contents/Post/Edit.php:        $attachments = $this->request->getArray('attachment');
./var/Widget/Contents/Post/Edit.php:                $this->db->query($this->db->update('table.contents')->rows(array('parent' => $cid, 'status' => 'publish',
./var/Widget/Contents/Post/Edit.php:        $this->db->query($this->db->update('table.contents')->rows(array('parent' => 0, 'status' => 'publish'))
./var/Widget/Contents/Post/Edit.php:        return 'page=' . $this->getPageOffset('created', $created, 'post', $status,
./var/Widget/Contents/Post/Edit.php:        'on' == $this->request->__typecho_all_posts ? 0 : $this->user->uid);
./var/Widget/Contents/Post/Edit.php:        $this->delete($this->db->sql()->where('cid = ?', $cid));
./var/Widget/Contents/Post/Edit.php:        $this->setCategories($cid, array(), false, false);
./var/Widget/Contents/Post/Edit.php:        $this->setTags($cid, NULL, false, false);
./var/Widget/Contents/Post/Edit.php:        if ($this->user->pass('editor', true)) {
./var/Widget/Contents/Post/Edit.php:        $isDraftToPublish = ('post_draft' == $this->type);
./var/Widget/Contents/Post/Edit.php:        $isBeforePublish = ('publish' == $this->status);
./var/Widget/Contents/Post/Edit.php:        if ($this->have()) {
./var/Widget/Contents/Post/Edit.php:            if (!$isDraftToPublish && $this->draft) {
./var/Widget/Contents/Post/Edit.php:                $this->deleteDraft($this->draft['cid']);
./var/Widget/Contents/Post/Edit.php:                $this->deleteFields($this->draft['cid']);
./var/Widget/Contents/Post/Edit.php:            if ($this->update($contents, $this->db->sql()->where('cid = ?', $this->cid))) {
./var/Widget/Contents/Post/Edit.php:                $realId = $this->cid;
./var/Widget/Contents/Post/Edit.php:            $realId = $this->insert($contents);
./var/Widget/Contents/Post/Edit.php:                $this->setCategories($realId, !empty($contents['category']) && is_array($contents['category']) ?
./var/Widget/Contents/Post/Edit.php:                $contents['category'] : array($this->options->defaultCategory), !$isDraftToPublish && $isBeforePublish, $isAfterPublish);
./var/Widget/Contents/Post/Edit.php:                $this->setTags($realId, $contents['tags'], !$isDraftToPublish && $isBeforePublish, $isAfterPublish);
./var/Widget/Contents/Post/Edit.php:            $this->attach($realId);
./var/Widget/Contents/Post/Edit.php:            $this->applyFields($this->getFields(), $realId);
./var/Widget/Contents/Post/Edit.php:            $this->db->fetchRow($this->select()->where('table.contents.cid = ?', $realId)->limit(1), array($this, 'push'));
./var/Widget/Contents/Post/Edit.php:        if ($this->user->pass('editor', true)) {
./var/Widget/Contents/Post/Edit.php:        if ($this->draft) {
./var/Widget/Contents/Post/Edit.php:            if ($this->update($contents, $this->db->sql()->where('cid = ?', $this->draft['cid']))) {
./var/Widget/Contents/Post/Edit.php:                $realId = $this->draft['cid'];
./var/Widget/Contents/Post/Edit.php:            if ($this->have()) {
./var/Widget/Contents/Post/Edit.php:                $contents['parent'] = $this->cid;
./var/Widget/Contents/Post/Edit.php:            $realId = $this->insert($contents);
./var/Widget/Contents/Post/Edit.php:            if (!$this->have()) {
./var/Widget/Contents/Post/Edit.php:                $this->db->fetchRow($this->select()->where('table.contents.cid = ?', $realId)->limit(1), array($this, 'push'));
./var/Widget/Contents/Post/Edit.php:            //$this->db->fetchRow($this->select()->where('table.contents.cid = ?', $realId)->limit(1), array($this, 'push'));
./var/Widget/Contents/Post/Edit.php:                $this->setCategories($realId, !empty($contents['category']) && is_array($contents['category']) ?
./var/Widget/Contents/Post/Edit.php:                $contents['category'] : array($this->options->defaultCategory), false, false);
./var/Widget/Contents/Post/Edit.php:                $this->setTags($realId, $contents['tags'], false, false);
./var/Widget/Contents/Post/Edit.php:            $this->attach($this->cid);
./var/Widget/Contents/Post/Edit.php:            $this->applyFields($this->getFields(), $realId);
./var/Widget/Contents/Post/Edit.php:        $this->user->pass('contributor');
./var/Widget/Contents/Post/Edit.php:        if (!empty($this->request->cid) && 'delete' != $this->request->do) {
./var/Widget/Contents/Post/Edit.php:            $this->db->fetchRow($this->select()
./var/Widget/Contents/Post/Edit.php:            ->where('table.contents.cid = ?', $this->request->filter('int')->cid)
./var/Widget/Contents/Post/Edit.php:            if ('post_draft' == $this->type && $this->parent) {
./var/Widget/Contents/Post/Edit.php:                $this->response->redirect(Typecho_Common::url('write-post.php?cid=' . $this->parent, $this->options->adminUrl));
./var/Widget/Contents/Post/Edit.php:            if (!$this->have()) {
./var/Widget/Contents/Post/Edit.php:            } else if ($this->have() && !$this->allow('edit')) {
./var/Widget/Contents/Post/Edit.php:            $draft = $this->db->fetchRow($this->widget('Widget_Abstract_Contents')->select()
./var/Widget/Contents/Post/Edit.php:                $draft['tags'] = $this->db->fetchAll($this->db
./var/Widget/Contents/Post/Edit.php:                ->where('table.metas.type = ?', 'tag'), array($this->widget('Widget_Abstract_Metas'), 'filter'));
./var/Widget/Contents/Post/Edit.php:        if (isset($this->created)) {
./var/Widget/Contents/Post/Edit.php:            echo date($format, $this->options->gmtTime + $this->options->timezone - $this->options->serverTimezone);
./var/Widget/Contents/Post/Edit.php:                $allow &= ($this->user->pass('editor', true) || $this->authorId == $this->user->uid);
./var/Widget/Contents/Post/Edit.php:                $allow &= (isset($this->{$permission}) ? $this->{$permission} : $this->options->{$optionPermission});
./var/Widget/Contents/Post/Edit.php:        return _t('编辑 %s', $this->title);
./var/Widget/Contents/Post/Edit.php:        $configFile = $this->options->themeFile($this->options->theme, 'functions.php');
./var/Widget/Contents/Post/Edit.php:        if ($this->have()) {
./var/Widget/Contents/Post/Edit.php:            $fields = $this->fields;
./var/Widget/Contents/Post/Edit.php:        $this->pluginHandle()->getDefaultFieldItems($layout);
./var/Widget/Contents/Post/Edit.php:            if (function_exists($this->themeCustomFieldsHook)) {
./var/Widget/Contents/Post/Edit.php:                call_user_func($this->themeCustomFieldsHook, $layout);
./var/Widget/Contents/Post/Edit.php:                $isFieldReadOnly = $this->pluginHandle('Widget_Abstract_Contents')
./var/Widget/Contents/Post/Edit.php:        if ($this->have()) {
./var/Widget/Contents/Post/Edit.php:            $defaultFields = $this->getDefaultFieldItems();
./var/Widget/Contents/Post/Edit.php:            $rows = $this->db->fetchAll($this->db->select()->from('table.fields')
./var/Widget/Contents/Post/Edit.php:                ->where('cid = ?', $this->cid));
./var/Widget/Contents/Post/Edit.php:                $isFieldReadOnly = $this->pluginHandle('Widget_Abstract_Contents')
./var/Widget/Contents/Post/Edit.php:        $existTags = Typecho_Common::arrayFlatten($this->db->fetchAll(
./var/Widget/Contents/Post/Edit.php:        $this->db->select('table.metas.mid')
./var/Widget/Contents/Post/Edit.php:                $this->db->query($this->db->delete('table.relationships')
./var/Widget/Contents/Post/Edit.php:                    $this->db->query($this->db->update('table.metas')
./var/Widget/Contents/Post/Edit.php:        $insertTags = $this->widget('Widget_Abstract_Metas')->scanTags($tags);
./var/Widget/Contents/Post/Edit.php:                $this->db->query($this->db->insert('table.relationships')
./var/Widget/Contents/Post/Edit.php:                    $this->db->query($this->db->update('table.metas')
./var/Widget/Contents/Post/Edit.php:        $existCategories = Typecho_Common::arrayFlatten($this->db->fetchAll(
./var/Widget/Contents/Post/Edit.php:        $this->db->select('table.metas.mid')
./var/Widget/Contents/Post/Edit.php:                $this->db->query($this->db->delete('table.relationships')
./var/Widget/Contents/Post/Edit.php:                    $this->db->query($this->db->update('table.metas')
./var/Widget/Contents/Post/Edit.php:                if (!$this->db->fetchRow($this->db->select('mid')
./var/Widget/Contents/Post/Edit.php:                $this->db->query($this->db->insert('table.relationships')
./var/Widget/Contents/Post/Edit.php:                    $this->db->query($this->db->update('table.metas')
./var/Widget/Contents/Post/Edit.php:        $contents = $this->request->from('password', 'allowComment',
./var/Widget/Contents/Post/Edit.php:        $contents['category'] = $this->request->getArray('category');
./var/Widget/Contents/Post/Edit.php:        $contents['title'] = $this->request->get('title', _t('未命名文档'));
./var/Widget/Contents/Post/Edit.php:        $contents['created'] = $this->getCreated();
./var/Widget/Contents/Post/Edit.php:        if ($this->request->markdown && $this->options->markdown) {
./var/Widget/Contents/Post/Edit.php:        $contents = $this->pluginHandle()->write($contents, $this);
./var/Widget/Contents/Post/Edit.php:        if ($this->request->is('do=publish')) {
./var/Widget/Contents/Post/Edit.php:            $this->publish($contents);
./var/Widget/Contents/Post/Edit.php:            $this->pluginHandle()->finishPublish($contents, $this);
./var/Widget/Contents/Post/Edit.php:            $trackback = array_unique(preg_split("/(\r|\n|\r\n)/", trim($this->request->trackback)));
./var/Widget/Contents/Post/Edit.php:            $this->widget('Widget_Service')->sendPing($this->cid, $trackback);
./var/Widget/Contents/Post/Edit.php:            $this->widget('Widget_Notice')->set('post' == $this->type ?
./var/Widget/Contents/Post/Edit.php:            _t('文章 "<a href="%s">%s</a>" 已经发布', $this->permalink, $this->title) :
./var/Widget/Contents/Post/Edit.php:            _t('文章 "%s" 等待审核', $this->title), 'success');
./var/Widget/Contents/Post/Edit.php:            $this->widget('Widget_Notice')->highlight($this->theId);
./var/Widget/Contents/Post/Edit.php:            $pageQuery = $this->getPageOffsetQuery($this->created);
./var/Widget/Contents/Post/Edit.php:            $this->response->redirect(Typecho_Common::url('manage-posts.php?' . $pageQuery, $this->options->adminUrl));
./var/Widget/Contents/Post/Edit.php:            $this->save($contents);
./var/Widget/Contents/Post/Edit.php:            $this->pluginHandle()->finishSave($contents, $this);
./var/Widget/Contents/Post/Edit.php:            if ($this->request->isAjax()) {
./var/Widget/Contents/Post/Edit.php:                $created = new Typecho_Date($this->options->gmtTime);
./var/Widget/Contents/Post/Edit.php:                $this->response->throwJson(array(
./var/Widget/Contents/Post/Edit.php:                    'cid'       =>  $this->cid
./var/Widget/Contents/Post/Edit.php:                $this->widget('Widget_Notice')->set(_t('草稿 "%s" 已经被保存', $this->title), 'success');
./var/Widget/Contents/Post/Edit.php:                $this->response->redirect(Typecho_Common::url('write-post.php?cid=' . $this->cid, $this->options->adminUrl));
./var/Widget/Contents/Post/Edit.php:        $posts = $this->request->filter('int')->getArray('cid');
./var/Widget/Contents/Post/Edit.php:            $this->pluginHandle()->delete($post, $this);
./var/Widget/Contents/Post/Edit.php:            $condition = $this->db->sql()->where('cid = ?', $post);
./var/Widget/Contents/Post/Edit.php:            $postObject = $this->db->fetchObject($this->db->select('status', 'type')
./var/Widget/Contents/Post/Edit.php:            if ($this->isWriteable($condition) &&
./var/Widget/Contents/Post/Edit.php:                $this->delete($condition)) {
./var/Widget/Contents/Post/Edit.php:                $this->setCategories($post, array(), 'publish' == $postObject->status
./var/Widget/Contents/Post/Edit.php:                $this->setTags($post, NULL, 'publish' == $postObject->status
./var/Widget/Contents/Post/Edit.php:                $this->db->query($this->db->delete('table.comments')
./var/Widget/Contents/Post/Edit.php:                $this->unAttach($post);
./var/Widget/Contents/Post/Edit.php:                $draft = $this->db->fetchRow($this->db->select('cid')
./var/Widget/Contents/Post/Edit.php:                $this->deleteFields($post);
./var/Widget/Contents/Post/Edit.php:                    $this->deleteDraft($draft['cid']);
./var/Widget/Contents/Post/Edit.php:                    $this->deleteFields($draft['cid']);
./var/Widget/Contents/Post/Edit.php:                $this->pluginHandle()->finishDelete($post, $this);
./var/Widget/Contents/Post/Edit.php:            $this->widget('Widget_Abstract_Metas')->clearTags();
./var/Widget/Contents/Post/Edit.php:        $this->widget('Widget_Notice')->set($deleteCount > 0 ? _t('文章已经被删除') : _t('没有文章被删除'),
./var/Widget/Contents/Post/Edit.php:        $this->response->goBack();
./var/Widget/Contents/Post/Edit.php:        $posts = $this->request->filter('int')->getArray('cid');
./var/Widget/Contents/Post/Edit.php:            $draft = $this->db->fetchRow($this->db->select('cid')
./var/Widget/Contents/Post/Edit.php:                $this->deleteDraft($draft['cid']);
./var/Widget/Contents/Post/Edit.php:                $this->deleteFields($draft['cid']);
./var/Widget/Contents/Post/Edit.php:        $this->widget('Widget_Notice')->set($deleteCount > 0 ? _t('草稿已经被删除') : _t('没有草稿被删除'),
./var/Widget/Contents/Post/Edit.php:        $this->response->goBack();
./var/Widget/Contents/Post/Edit.php:        $this->response->throwJson($this->markdown($this->request->text));
./var/Widget/Contents/Post/Edit.php:        $this->security->protect();
./var/Widget/Contents/Post/Edit.php:        $this->on($this->request->is('do=publish') || $this->request->is('do=save'))->writePost();
./var/Widget/Contents/Post/Edit.php:        $this->on($this->request->is('do=delete'))->deletePost();
./var/Widget/Contents/Post/Edit.php:        $this->on($this->request->is('do=deleteDraft'))->deletePostDraft();
./var/Widget/Contents/Post/Edit.php:        $this->on($this->request->is('do=preview'))->preview();
./var/Widget/Contents/Post/Edit.php:        $this->response->redirect($this->options->adminUrl);
./var/Widget/Contents/Post/Recent.php:        $this->parameter->setDefault(array('pageSize' => $this->options->postsListSize));
./var/Widget/Contents/Post/Recent.php:        $this->db->fetchAll($this->select()
./var/Widget/Contents/Post/Recent.php:        ->where('table.contents.created < ?', $this->options->gmtTime)
./var/Widget/Contents/Post/Recent.php:        ->limit($this->parameter->pageSize), array($this, 'push'));
./var/Widget/Contents/Related/Author.php:        $this->parameter->setDefault('limit=5');
./var/Widget/Contents/Related/Author.php:        if ($this->parameter->author) {
./var/Widget/Contents/Related/Author.php:            $this->db->fetchAll($this->select()
./var/Widget/Contents/Related/Author.php:            ->where('table.contents.authorId = ?', $this->parameter->author)
./var/Widget/Contents/Related/Author.php:            ->where('table.contents.cid <> ?', $this->parameter->cid)
./var/Widget/Contents/Related/Author.php:            ->where('table.contents.created < ?', $this->options->gmtTime)
./var/Widget/Contents/Related/Author.php:            ->where('table.contents.type = ?', $this->parameter->type)
./var/Widget/Contents/Related/Author.php:            ->limit($this->parameter->limit), array($this, 'push'));
./var/Widget/Contents/Related.php:        return $this->db->select('DISTINCT table.contents.cid', 'table.contents.title', 'table.contents.slug', 'table.contents.created', 'table.contents.authorId',
./var/Widget/Contents/Related.php:        $this->parameter->setDefault('limit=5');
./var/Widget/Contents/Related.php:        if ($this->parameter->tags) {
./var/Widget/Contents/Related.php:            $tagsGroup = implode(',', Typecho_Common::arrayFlatten($this->parameter->tags, 'mid'));
./var/Widget/Contents/Related.php:            $this->db->fetchAll($this->select()
./var/Widget/Contents/Related.php:            ->where('table.contents.cid <> ?', $this->parameter->cid)
./var/Widget/Contents/Related.php:            ->where('table.contents.created < ?', $this->options->gmtTime)
./var/Widget/Contents/Related.php:            ->where('table.contents.type = ?', $this->parameter->type)
./var/Widget/Contents/Related.php:            ->limit($this->parameter->limit), array($this, 'push'));
./var/Widget/Do.php:        $action = $this->request->action;
./var/Widget/Do.php:            $widget = trim($this->request->widget, '/');
./var/Widget/Do.php:            $actionTable = array_merge($this->_map, unserialize($this->widget('Widget_Options')->actionTable));
./var/Widget/Do.php:                $this->widget($widgetName)->action();
./var/Widget/ExceptionHandle.php:        $this->widget('Widget_Archive@404', 'type=404')->render();
./var/Widget/Feedback.php:        $this->security->protect();
./var/Widget/Feedback.php:            'cid'       =>  $this->_content->cid,
./var/Widget/Feedback.php:            'created'   =>  $this->options->gmtTime,
./var/Widget/Feedback.php:            'agent'     =>  $this->request->getAgent(),
./var/Widget/Feedback.php:            'ip'        =>  $this->request->getIp(),
./var/Widget/Feedback.php:            'ownerId'   =>  $this->_content->author->uid,
./var/Widget/Feedback.php:            'status'    =>  !$this->_content->allow('edit') && $this->options->commentsRequireModeration ? 'waiting' : 'approved'
./var/Widget/Feedback.php:        if ($parentId = $this->request->filter('int')->get('parent')) {
./var/Widget/Feedback.php:            if ($this->options->commentsThreaded && ($parent = $this->db->fetchRow($this->db->select('coid', 'cid')->from('table.comments')
./var/Widget/Feedback.php:            ->where('coid = ?', $parentId))) && $this->_content->cid == $parent['cid']) {
./var/Widget/Feedback.php:        if ($this->options->commentsRequireMail && !$this->user->hasLogin()) {
./var/Widget/Feedback.php:        if ($this->options->commentsRequireUrl && !$this->user->hasLogin()) {
./var/Widget/Feedback.php:        $comment['text'] = $this->request->text;
./var/Widget/Feedback.php:        if (!$this->user->hasLogin()) {
./var/Widget/Feedback.php:            $comment['author'] = $this->request->filter('trim')->author;
./var/Widget/Feedback.php:            $comment['mail'] = $this->request->filter('trim')->mail;
./var/Widget/Feedback.php:            $comment['url'] = $this->request->filter('trim')->url;
./var/Widget/Feedback.php:            $expire = $this->options->gmtTime + $this->options->timezone + 30*24*3600;
./var/Widget/Feedback.php:            $comment['author'] = $this->user->screenName;
./var/Widget/Feedback.php:            $comment['mail'] = $this->user->mail;
./var/Widget/Feedback.php:            $comment['url'] = $this->user->url;
./var/Widget/Feedback.php:            $comment['authorId'] = $this->user->uid;
./var/Widget/Feedback.php:        if (!$this->options->commentsRequireModeration && $this->options->commentsWhitelist) {
./var/Widget/Feedback.php:            if ($this->size($this->select()->where('author = ? AND mail = ? AND status = ?', $comment['author'], $comment['mail'], 'approved'))) {
./var/Widget/Feedback.php:            $comment = $this->pluginHandle()->comment($comment, $this->_content);
./var/Widget/Feedback.php:        $commentId = $this->insert($comment);
./var/Widget/Feedback.php:        $this->db->fetchRow($this->select()->where('coid = ?', $commentId)
./var/Widget/Feedback.php:        $this->pluginHandle()->finishComment($this);
./var/Widget/Feedback.php:        $this->response->goBack('#' . $this->theId);
./var/Widget/Feedback.php:        if (!$this->request->isPost() || $this->request->getReferer()) {
./var/Widget/Feedback.php:            $this->response->redirect($this->_content->permalink);
./var/Widget/Feedback.php:        if ($this->size($this->select()
./var/Widget/Feedback.php:        ->where('status = ? AND ip = ?', 'spam', $this->request->getIp())) > 0) {
./var/Widget/Feedback.php:            'cid'       =>  $this->_content->cid,
./var/Widget/Feedback.php:            'created'   =>  $this->options->gmtTime,
./var/Widget/Feedback.php:            'agent'     =>  $this->request->getAgent(),
./var/Widget/Feedback.php:            'ip'        =>  $this->request->getIp(),
./var/Widget/Feedback.php:            'ownerId'   =>  $this->_content->author->uid,
./var/Widget/Feedback.php:            'status'    =>  $this->options->commentsRequireModeration ? 'waiting' : 'approved'
./var/Widget/Feedback.php:        $trackback['author'] = $this->request->filter('trim')->blog_name;
./var/Widget/Feedback.php:        $trackback['url'] = $this->request->filter('trim')->url;
./var/Widget/Feedback.php:        $trackback['text'] = $this->request->excerpt;
./var/Widget/Feedback.php:            $this->response->throwXml($message);
./var/Widget/Feedback.php:        if ($this->size($this->select()
./var/Widget/Feedback.php:        ->where('cid = ? AND url = ? AND type <> ?', $this->_content->cid, $trackback['url'], 'comment')) > 0) {
./var/Widget/Feedback.php:        $trackback = $this->pluginHandle()->trackback($trackback, $this->_content);
./var/Widget/Feedback.php:        $this->insert($trackback);
./var/Widget/Feedback.php:        $this->pluginHandle()->finishTrackback($this);
./var/Widget/Feedback.php:        $this->response->throwXml(array('success' => 0, 'message' => 'Trackback has registered.'));
./var/Widget/Feedback.php:        $text, $this->options->commentsHTMLTagAllowed));
./var/Widget/Feedback.php:        if ($this->user->hasLogin() && $this->user->screenName != $userName) {
./var/Widget/Feedback.php:        } else if (!$this->user->hasLogin() && $this->db->fetchRow($this->db->select('uid')
./var/Widget/Feedback.php:        $callback = $this->request->type;
./var/Widget/Feedback.php:        $this->_content = Typecho_Router::match($this->request->permalink);
./var/Widget/Feedback.php:        if (false !== $this->_content && $this->_content instanceof Widget_Archive &&
./var/Widget/Feedback.php:        $this->_content->have() && $this->_content->is('single') &&
./var/Widget/Feedback.php:                if (!$this->_content->allow('comment')) {
./var/Widget/Feedback.php:                if ($this->options->commentsCheckReferer && 'false' != $this->parameter->checkReferer) {
./var/Widget/Feedback.php:                    $referer = $this->request->getReferer();
./var/Widget/Feedback.php:                    $currentPart = parse_url($this->_content->permalink);
./var/Widget/Feedback.php:                        if ('page:' . $this->_content->cid == $this->options->frontPage) {
./var/Widget/Feedback.php:                            $currentPart = parse_url(rtrim($this->options->siteUrl, '/') . '/');
./var/Widget/Feedback.php:                if (!$this->user->pass('editor', true) && $this->_content->authorId != $this->user->uid &&
./var/Widget/Feedback.php:                $this->options->commentsPostIntervalEnable) {
./var/Widget/Feedback.php:                    $latestComment = $this->db->fetchRow($this->db->select('created')->from('table.comments')
./var/Widget/Feedback.php:                    ->where('cid = ?', $this->_content->cid)
./var/Widget/Feedback.php:                    if ($latestComment && ($this->options->gmtTime - $latestComment['created'] > 0 &&
./var/Widget/Feedback.php:                    $this->options->gmtTime - $latestComment['created'] < $this->options->commentsPostInterval)) {
./var/Widget/Feedback.php:            if ('trackback' == $callback && !$this->_content->allow('ping')) {
./var/Widget/Feedback.php:            $this->$callback();
./var/Widget/Init.php:        $options = $this->widget('Widget_Options');
./var/Widget/Init.php:            $pathInfo = $this->request->getPathInfo(__TYPECHO_PATHINFO_ENCODING__, $options->charset);
./var/Widget/Init.php:            $pathInfo = $this->request->getPathInfo();
./var/Widget/Init.php:        $this->response->setCharset($options->charset);
./var/Widget/Init.php:        $this->response->setContentType($options->contentType);
./var/Widget/Init.php:        if ($this->widget('Widget_User')->hasLogin()) {
./var/Widget/Login.php:        $this->security->protect();
./var/Widget/Login.php:        if ($this->user->hasLogin()) {
./var/Widget/Login.php:            $this->response->redirect($this->options->index);
./var/Widget/Login.php:        if ($error = $validator->run($this->request->from('name', 'password'))) {
./var/Widget/Login.php:            Typecho_Cookie::set('__typecho_remember_name', $this->request->name);
./var/Widget/Login.php:            $this->widget('Widget_Notice')->set($error);
./var/Widget/Login.php:            $this->response->goBack();
./var/Widget/Login.php:        $valid = $this->user->login($this->request->name, $this->request->password,
./var/Widget/Login.php:        false, 1 == $this->request->remember ? $this->options->gmtTime + $this->options->timezone + 30*24*3600 : 0);
./var/Widget/Login.php:            $this->pluginHandle()->loginFail($this->user, $this->request->name,
./var/Widget/Login.php:            $this->request->password, 1 == $this->request->remember);
./var/Widget/Login.php:            Typecho_Cookie::set('__typecho_remember_name', $this->request->name);
./var/Widget/Login.php:            $this->widget('Widget_Notice')->set(_t('用户名或密码无效'), 'error');
./var/Widget/Login.php:            $this->response->goBack('?referer=' . urlencode($this->request->referer));
./var/Widget/Login.php:        $this->pluginHandle()->loginSucceed($this->user, $this->request->name,
./var/Widget/Login.php:        $this->request->password, 1 == $this->request->remember);
./var/Widget/Login.php:        if (NULL != $this->request->referer) {
./var/Widget/Login.php:            $this->response->redirect($this->request->referer);
./var/Widget/Login.php:        } else if (!$this->user->pass('contributor', true)) {
./var/Widget/Login.php:            $this->response->redirect($this->options->profileUrl);
./var/Widget/Login.php:            $this->response->redirect($this->options->adminUrl);
./var/Widget/Logout.php:        $this->user->logout();
./var/Widget/Logout.php:        $this->pluginHandle()->logout();
./var/Widget/Logout.php:        $this->response->goBack(NULL, $this->options->index);
./var/Widget/Menu.php:        $this->options = $this->widget('Widget_Options');
./var/Widget/Menu.php:        $this->user = $this->widget('Widget_User');
./var/Widget/Menu.php:            array(_t('登录'), _t('登录到%s', $this->options->title), 'login.php', 'visitor'),
./var/Widget/Menu.php:            array(_t('注册'), _t('注册到%s', $this->options->title), 'register.php', 'visitor')
./var/Widget/Menu.php:        $panelTable = unserialize($this->options->panelTable);
./var/Widget/Menu.php:        $currentUrl = $this->request->makeUriByRequest();
./var/Widget/Menu.php:        $adminUrl = $this->options->adminUrl;
./var/Widget/Menu.php:                if (!$hidden && !$this->user->pass($access, true)) {
./var/Widget/Menu.php:                        $this->user->pass($access);
./var/Widget/Menu.php:                    $this->_currentParent = $key;
./var/Widget/Menu.php:                    $this->_currentChild = $inKey;
./var/Widget/Menu.php:                    $this->title = $title;
./var/Widget/Menu.php:                    $this->addLink = $addLink ? Typecho_Common::url($addLink, $adminUrl) : NULL;
./var/Widget/Menu.php:        $this->_menu = $menu;
./var/Widget/Menu.php:        $this->_currentUrl = $currentUrl;
./var/Widget/Menu.php:        return $this->_currentParent > 0 ? $this->_menu[$this->_currentParent][3][$this->_currentChild] : NULL;
./var/Widget/Menu.php:        foreach ($this->_menu as $key => $node) {
./var/Widget/Menu.php:            echo "<ul class=\"root" . ($key == $this->_currentParent ? ' ' . $class : NULL) 
./var/Widget/Menu.php:                if ($key == $this->_currentParent && $inKey == $this->_currentChild) {
./var/Widget/Menu.php:                    "><a href=\"" . ($key == $this->_currentParent && $inKey == $this->_currentChild ? $this->_currentUrl : $inNode[2]) . "\">{$inNode[0]}</a></li>";
./var/Widget/Metas/Category/Admin.php:        $select = $this->db->select('mid')->from('table.metas')->where('type = ?', 'category');
./var/Widget/Metas/Category/Admin.php:        $select->where('parent = ?', $this->request->parent ? $this->request->parent : 0);
./var/Widget/Metas/Category/Admin.php:        $this->stack = $this->getCategories(Typecho_Common::arrayFlatten(
./var/Widget/Metas/Category/Admin.php:            $this->db->fetchAll($select->order('table.metas.order', Typecho_Db::SORT_ASC)), 'mid'));
./var/Widget/Metas/Category/Admin.php:        if (isset($this->request->parent)) {
./var/Widget/Metas/Category/Admin.php:            $category = $this->db->fetchRow($this->select()
./var/Widget/Metas/Category/Admin.php:                ->where('type = ? AND mid = ?', 'category', $this->request->parent));
./var/Widget/Metas/Category/Admin.php:                $parent = $this->db->fetchRow($this->select()
./var/Widget/Metas/Category/Admin.php:                    echo '<a href="' . Typecho_Common::url('manage-categories.php?parent=' . $parent['mid'], $this->options->adminUrl) . '">';
./var/Widget/Metas/Category/Admin.php:                    echo '<a href="' . Typecho_Common::url('manage-categories.php', $this->options->adminUrl) . '">';
./var/Widget/Metas/Category/Admin.php:        if (isset($this->request->parent)) {
./var/Widget/Metas/Category/Admin.php:            $category = $this->db->fetchRow($this->select()
./var/Widget/Metas/Category/Admin.php:                ->where('type = ? AND mid = ?', 'category', $this->request->parent));
./var/Widget/Metas/Category/Admin.php:        if (isset($this->request->parent)) {
./var/Widget/Metas/Category/Admin.php:            return 'category.php?parent=' . $this->request->filter('int')->parent;
./var/Widget/Metas/Category/Edit.php:        $this->user->pass('editor');
./var/Widget/Metas/Category/Edit.php:        $category = $this->db->fetchRow($this->db->select()
./var/Widget/Metas/Category/Edit.php:        $select = $this->db->select()
./var/Widget/Metas/Category/Edit.php:        if ($this->request->mid) {
./var/Widget/Metas/Category/Edit.php:            $select->where('mid <> ?', $this->request->mid);
./var/Widget/Metas/Category/Edit.php:        $category = $this->db->fetchRow($select);
./var/Widget/Metas/Category/Edit.php:        if (empty($this->request->slug)) {
./var/Widget/Metas/Category/Edit.php:            if (empty($slug) || !$this->slugExists($name)) {
./var/Widget/Metas/Category/Edit.php:        $select = $this->db->select()
./var/Widget/Metas/Category/Edit.php:        if ($this->request->mid) {
./var/Widget/Metas/Category/Edit.php:            $select->where('mid <> ?', $this->request->mid);
./var/Widget/Metas/Category/Edit.php:        $category = $this->db->fetchRow($select);
./var/Widget/Metas/Category/Edit.php:        $form = new Typecho_Widget_Helper_Form($this->security->getIndex('/action/metas-category-edit'),
./var/Widget/Metas/Category/Edit.php:        $parents = $this->widget('Widget_Metas_Category_List@options', 
./var/Widget/Metas/Category/Edit.php:            (isset($this->request->mid) ? 'ignore=' . $this->request->mid : ''));
./var/Widget/Metas/Category/Edit.php:        $parent = new Typecho_Widget_Helper_Form_Element_Select('parent', $options, $this->request->parent, _t('父级分类'),
./var/Widget/Metas/Category/Edit.php:        if (isset($this->request->mid) && 'insert' != $action) {
./var/Widget/Metas/Category/Edit.php:            $meta = $this->db->fetchRow($this->select()
./var/Widget/Metas/Category/Edit.php:            ->where('mid = ?', $this->request->mid)
./var/Widget/Metas/Category/Edit.php:                $this->response->redirect(Typecho_Common::url('manage-categories.php', $this->options->adminUrl));
./var/Widget/Metas/Category/Edit.php:        if ($this->form('insert')->validate()) {
./var/Widget/Metas/Category/Edit.php:            $this->response->goBack();
./var/Widget/Metas/Category/Edit.php:        $category = $this->request->from('name', 'slug', 'description', 'parent');
./var/Widget/Metas/Category/Edit.php:        $category['order'] = $this->getMaxOrder('category', $category['parent']) + 1;
./var/Widget/Metas/Category/Edit.php:        $category['mid'] = $this->insert($category);
./var/Widget/Metas/Category/Edit.php:        $this->push($category);
./var/Widget/Metas/Category/Edit.php:        $this->widget('Widget_Notice')->highlight($this->theId);
./var/Widget/Metas/Category/Edit.php:        $this->widget('Widget_Notice')->set(_t('分类 <a href="%s">%s</a> 已经被增加',
./var/Widget/Metas/Category/Edit.php:        $this->permalink, $this->name), 'success');
./var/Widget/Metas/Category/Edit.php:        $this->response->redirect(Typecho_Common::url('manage-categories.php'
./var/Widget/Metas/Category/Edit.php:            . ($category['parent'] ? '?parent=' . $category['parent'] : ''), $this->options->adminUrl));
./var/Widget/Metas/Category/Edit.php:        if ($this->form('update')->validate()) {
./var/Widget/Metas/Category/Edit.php:            $this->response->goBack();
./var/Widget/Metas/Category/Edit.php:        $category = $this->request->from('name', 'slug', 'description', 'parent');
./var/Widget/Metas/Category/Edit.php:        $category['mid'] = $this->request->mid;
./var/Widget/Metas/Category/Edit.php:        $current = $this->db->fetchRow($this->select()->where('mid = ?', $category['mid']));
./var/Widget/Metas/Category/Edit.php:            $parent = $this->db->fetchRow($this->select()->where('mid = ?', $category['parent']));
./var/Widget/Metas/Category/Edit.php:                $this->update(array(
./var/Widget/Metas/Category/Edit.php:                ), $this->db->sql()->where('mid = ?', $parent['mid']));
./var/Widget/Metas/Category/Edit.php:                $category['order'] = $this->getMaxOrder('category', $category['parent']) + 1;
./var/Widget/Metas/Category/Edit.php:        $this->update($category, $this->db->sql()->where('mid = ?', $this->request->filter('int')->mid));
./var/Widget/Metas/Category/Edit.php:        $this->push($category);
./var/Widget/Metas/Category/Edit.php:        $this->widget('Widget_Notice')->highlight($this->theId);
./var/Widget/Metas/Category/Edit.php:        $this->widget('Widget_Notice')->set(_t('分类 <a href="%s">%s</a> 已经被更新',
./var/Widget/Metas/Category/Edit.php:        $this->permalink, $this->name), 'success');
./var/Widget/Metas/Category/Edit.php:        $this->response->redirect(Typecho_Common::url('manage-categories.php'
./var/Widget/Metas/Category/Edit.php:            . ($category['parent'] ? '?parent=' . $category['parent'] : ''), $this->options->adminUrl));
./var/Widget/Metas/Category/Edit.php:        $categories = $this->request->filter('int')->getArray('mid');
./var/Widget/Metas/Category/Edit.php:            $parent = $this->db->fetchObject($this->select()->where('mid = ?', $category))->parent;
./var/Widget/Metas/Category/Edit.php:            if ($this->delete($this->db->sql()->where('mid = ?', $category))) {
./var/Widget/Metas/Category/Edit.php:                $this->db->query($this->db->delete('table.relationships')->where('mid = ?', $category));
./var/Widget/Metas/Category/Edit.php:                $this->update(array('parent' => $parent), $this->db->sql()->where('parent = ?', $category));
./var/Widget/Metas/Category/Edit.php:        $this->widget('Widget_Notice')->set($deleteCount > 0 ? _t('分类已经删除') : _t('没有分类被删除'),
./var/Widget/Metas/Category/Edit.php:        $this->response->goBack();
./var/Widget/Metas/Category/Edit.php:        if ($error = $validator->run($this->request->from('merge'))) {
./var/Widget/Metas/Category/Edit.php:            $this->widget('Widget_Notice')->set($error, 'error');
./var/Widget/Metas/Category/Edit.php:            $this->response->goBack();
./var/Widget/Metas/Category/Edit.php:        $merge = $this->request->merge;
./var/Widget/Metas/Category/Edit.php:        $categories = $this->request->filter('int')->getArray('mid');
./var/Widget/Metas/Category/Edit.php:            $this->merge($merge, 'category', $categories);
./var/Widget/Metas/Category/Edit.php:            $this->widget('Widget_Notice')->set(_t('分类已经合并'), 'success');
./var/Widget/Metas/Category/Edit.php:            $this->widget('Widget_Notice')->set(_t('没有选择任何分类'), 'notice');
./var/Widget/Metas/Category/Edit.php:        $this->response->goBack();
./var/Widget/Metas/Category/Edit.php:        $categories = $this->request->filter('int')->getArray('mid');
./var/Widget/Metas/Category/Edit.php:            $this->sort($categories, 'category');
./var/Widget/Metas/Category/Edit.php:        if (!$this->request->isAjax()) {
./var/Widget/Metas/Category/Edit.php:            $this->response->redirect(Typecho_Common::url('manage-categories.php', $this->options->adminUrl));
./var/Widget/Metas/Category/Edit.php:            $this->response->throwJson(array('success' => 1, 'message' => _t('分类排序已经完成')));
./var/Widget/Metas/Category/Edit.php:        $categories = $this->request->filter('int')->getArray('mid');
./var/Widget/Metas/Category/Edit.php:                $this->refreshCountByTypeAndStatus($category, 'post', 'publish');
./var/Widget/Metas/Category/Edit.php:            $this->widget('Widget_Notice')->set(_t('分类刷新已经完成'), 'success');
./var/Widget/Metas/Category/Edit.php:            $this->widget('Widget_Notice')->set(_t('没有选择任何分类'), 'notice');
./var/Widget/Metas/Category/Edit.php:        $this->response->goBack();
./var/Widget/Metas/Category/Edit.php:        if ($error = $validator->run($this->request->from('mid'))) {
./var/Widget/Metas/Category/Edit.php:            $this->widget('Widget_Notice')->set($error, 'error');
./var/Widget/Metas/Category/Edit.php:            $this->db->query($this->db->update('table.options')
./var/Widget/Metas/Category/Edit.php:            ->rows(array('value' => $this->request->mid))
./var/Widget/Metas/Category/Edit.php:            $this->db->fetchRow($this->select()->where('mid = ?', $this->request->mid)
./var/Widget/Metas/Category/Edit.php:            $this->widget('Widget_Notice')->highlight($this->theId);
./var/Widget/Metas/Category/Edit.php:            $this->widget('Widget_Notice')->set(_t('<a href="%s">%s</a> 已经被设为默认分类',
./var/Widget/Metas/Category/Edit.php:            $this->permalink, $this->name), 'success');
./var/Widget/Metas/Category/Edit.php:        $this->response->redirect(Typecho_Common::url('manage-categories.php', $this->options->adminUrl));
./var/Widget/Metas/Category/Edit.php:        if (isset($this->request->mid)) {
./var/Widget/Metas/Category/Edit.php:            $category = $this->db->fetchRow($this->select()
./var/Widget/Metas/Category/Edit.php:                ->where('type = ? AND mid = ?', 'category', $this->request->mid));
./var/Widget/Metas/Category/Edit.php:        } if (isset($this->request->parent)) {
./var/Widget/Metas/Category/Edit.php:            $category = $this->db->fetchRow($this->select()
./var/Widget/Metas/Category/Edit.php:                ->where('type = ? AND mid = ?', 'category', $this->request->parent));
./var/Widget/Metas/Category/Edit.php:        $this->security->protect();
./var/Widget/Metas/Category/Edit.php:        $this->on($this->request->is('do=insert'))->insertCategory();
./var/Widget/Metas/Category/Edit.php:        $this->on($this->request->is('do=update'))->updateCategory();
./var/Widget/Metas/Category/Edit.php:        $this->on($this->request->is('do=delete'))->deleteCategory();
./var/Widget/Metas/Category/Edit.php:        $this->on($this->request->is('do=merge'))->mergeCategory();
./var/Widget/Metas/Category/Edit.php:        $this->on($this->request->is('do=sort'))->sortCategory();
./var/Widget/Metas/Category/Edit.php:        $this->on($this->request->is('do=refresh'))->refreshCategory();
./var/Widget/Metas/Category/Edit.php:        $this->on($this->request->is('do=default'))->defaultCategory();
./var/Widget/Metas/Category/Edit.php:        $this->response->redirect($this->options->adminUrl);
./var/Widget/Metas/Category/List.php:        $this->parameter->setDefault('ignore=0&current=');
./var/Widget/Metas/Category/List.php:        $select = $this->select()->where('type = ?', 'category');
./var/Widget/Metas/Category/List.php:        if ($this->parameter->ignore) {
./var/Widget/Metas/Category/List.php:            $select->where('mid <> ?', $this->parameter->ignore);
./var/Widget/Metas/Category/List.php:        $categories = $this->db->fetchAll($select->order('table.metas.order', Typecho_Db::SORT_ASC));
./var/Widget/Metas/Category/List.php:            $this->_map[$category['mid']] = $category;
./var/Widget/Metas/Category/List.php:        foreach ($this->_map as $mid => $category) {
./var/Widget/Metas/Category/List.php:            if (0 != $parent && isset($this->_map[$parent])) {
./var/Widget/Metas/Category/List.php:                $this->_treeViewCategories[$parent][] = $mid;
./var/Widget/Metas/Category/List.php:                $this->_top[] = $mid;
./var/Widget/Metas/Category/List.php:        $this->levelWalkCallback($this->_top);
./var/Widget/Metas/Category/List.php:        $this->_map = array_map(array($this, 'filter'), $this->_map);
./var/Widget/Metas/Category/List.php:        $categoryOptions = $this->_categoryOptions;
./var/Widget/Metas/Category/List.php:        $classes[] = 'category-level-' . $this->levels;
./var/Widget/Metas/Category/List.php:        if ($this->levels > 0) {
./var/Widget/Metas/Category/List.php:            $this->levelsAlt(' category-level-odd', ' category-level-even');
./var/Widget/Metas/Category/List.php:        if ($this->mid == $this->parameter->current) {
./var/Widget/Metas/Category/List.php:        } else if (isset($this->_children[$this->mid]) && in_array($this->parameter->current, $this->_children[$this->mid])) {
./var/Widget/Metas/Category/List.php:        echo '"><a href="' . $this->permalink . '">' . $this->name . '</a>';
./var/Widget/Metas/Category/List.php:            printf($categoryOptions->countTemplate, intval($this->count));
./var/Widget/Metas/Category/List.php:            printf($categoryOptions->feedTemplate, $this->feedUrl);
./var/Widget/Metas/Category/List.php:        if ($this->children) {
./var/Widget/Metas/Category/List.php:            $this->treeViewCategories();
./var/Widget/Metas/Category/List.php:            if (!isset($this->_children[$parent])) {
./var/Widget/Metas/Category/List.php:                $this->_children[$parent] = array();
./var/Widget/Metas/Category/List.php:            $this->_children[$parent] = array_merge($this->_children[$parent], $categories);
./var/Widget/Metas/Category/List.php:            $this->_orders[] = $mid;
./var/Widget/Metas/Category/List.php:            $parent = $this->_map[$mid]['parent'];
./var/Widget/Metas/Category/List.php:            if (0 != $parent && isset($this->_map[$parent])) {
./var/Widget/Metas/Category/List.php:                $levels = $this->_map[$parent]['levels'] + 1;
./var/Widget/Metas/Category/List.php:                $this->_map[$mid]['levels'] = $levels;
./var/Widget/Metas/Category/List.php:            $this->_parents[$mid] = $parents;
./var/Widget/Metas/Category/List.php:            if (!empty($this->_treeViewCategories[$mid])) {
./var/Widget/Metas/Category/List.php:                $this->levelWalkCallback($this->_treeViewCategories[$mid], $new);
./var/Widget/Metas/Category/List.php:        return isset($this->_treeViewCategories[$this->mid]) ?
./var/Widget/Metas/Category/List.php:            $this->getCategories($this->_treeViewCategories[$this->mid]) : array();
./var/Widget/Metas/Category/List.php:        $this->stack = $this->getCategories($this->_orders);
./var/Widget/Metas/Category/List.php:        $children = $this->children;
./var/Widget/Metas/Category/List.php:            $tmp = $this->row;
./var/Widget/Metas/Category/List.php:            $this->sequence ++;
./var/Widget/Metas/Category/List.php:            echo '<' . $this->_categoryOptions->wrapTag . (empty($this->_categoryOptions->wrapClass)
./var/Widget/Metas/Category/List.php:                ? '' : ' class="' . $this->_categoryOptions->wrapClass . '"') . '>';
./var/Widget/Metas/Category/List.php:                $this->row = $child;
./var/Widget/Metas/Category/List.php:                $this->treeViewCategoriesCallback();
./var/Widget/Metas/Category/List.php:                $this->row = $tmp;
./var/Widget/Metas/Category/List.php:            echo '</' . $this->_categoryOptions->wrapTag . '>';
./var/Widget/Metas/Category/List.php:            $this->sequence --;
./var/Widget/Metas/Category/List.php:        $this->_categoryOptions = Typecho_Config::factory($categoryOptions);
./var/Widget/Metas/Category/List.php:        $this->_categoryOptions->setDefault(array(
./var/Widget/Metas/Category/List.php:        $this->pluginHandle()->trigger($plugged)->listCategories($this->_categoryOptions, $this);
./var/Widget/Metas/Category/List.php:            $this->stack = $this->getCategories($this->_top);
./var/Widget/Metas/Category/List.php:            if ($this->have()) { 
./var/Widget/Metas/Category/List.php:                echo '<' . $this->_categoryOptions->wrapTag . (empty($this->_categoryOptions->wrapClass)
./var/Widget/Metas/Category/List.php:                    ? '' : ' class="' . $this->_categoryOptions->wrapClass . '"') . '>';
./var/Widget/Metas/Category/List.php:                while ($this->next()) {
./var/Widget/Metas/Category/List.php:                    $this->treeViewCategoriesCallback();
./var/Widget/Metas/Category/List.php:                echo '</' . $this->_categoryOptions->wrapTag . '>';
./var/Widget/Metas/Category/List.php:            $this->stack = $this->_map;
./var/Widget/Metas/Category/List.php:        $split = $this->levels % $num;
./var/Widget/Metas/Category/List.php:        $value['directory'] = $this->getAllParents($value['mid']);
./var/Widget/Metas/Category/List.php:        return isset($this->_children[$mid]) ? $this->_children[$mid] : array();
./var/Widget/Metas/Category/List.php:        if (isset($this->_parents[$mid])) {
./var/Widget/Metas/Category/List.php:            foreach ($this->_parents[$mid] as $parent) {
./var/Widget/Metas/Category/List.php:                $parents[] = $this->_map[$parent]['slug'];
./var/Widget/Metas/Category/List.php:        return isset($this->_map[$mid]) ? $this->_map[$mid] : NULL;
./var/Widget/Metas/Category/List.php:                $result[] = $this->_map[$mid];
./var/Widget/Metas/Tag/Admin.php:        $select = $this->select()->where('type = ?', 'tag')->order('mid', Typecho_Db::SORT_DESC);
./var/Widget/Metas/Tag/Admin.php:        $this->db->fetchAll($select, array($this, 'push'));
./var/Widget/Metas/Tag/Admin.php:        if (isset($this->request->mid)) {
./var/Widget/Metas/Tag/Admin.php:            $tag = $this->db->fetchRow($this->select()
./var/Widget/Metas/Tag/Admin.php:                ->where('type = ? AND mid = ?', 'tag', $this->request->mid));
./var/Widget/Metas/Tag/Cloud.php:        $this->parameter->setDefault(array('sort' => 'count', 'ignoreZeroCount' => false, 'desc' => true, 'limit' => 0));
./var/Widget/Metas/Tag/Cloud.php:        $select = $this->select()->where('type = ?', 'tag')->order($this->parameter->sort,
./var/Widget/Metas/Tag/Cloud.php:        $this->parameter->desc ? Typecho_Db::SORT_DESC : Typecho_Db::SORT_ASC);
./var/Widget/Metas/Tag/Cloud.php:        if ($this->parameter->ignoreZeroCount) {
./var/Widget/Metas/Tag/Cloud.php:        if ($this->parameter->limit) {
./var/Widget/Metas/Tag/Cloud.php:            $select->limit($this->parameter->limit);
./var/Widget/Metas/Tag/Cloud.php:        $this->db->fetchAll($select, array($this, 'push'));
./var/Widget/Metas/Tag/Cloud.php:        array_unshift($args, $this->count);
./var/Widget/Metas/Tag/Edit.php:        $this->user->pass('editor');
./var/Widget/Metas/Tag/Edit.php:        $tag = $this->db->fetchRow($this->db->select()
./var/Widget/Metas/Tag/Edit.php:        $select = $this->db->select()
./var/Widget/Metas/Tag/Edit.php:        if ($this->request->mid) {
./var/Widget/Metas/Tag/Edit.php:            $select->where('mid <> ?', $this->request->filter('int')->mid);
./var/Widget/Metas/Tag/Edit.php:        $tag = $this->db->fetchRow($select);
./var/Widget/Metas/Tag/Edit.php:        if (empty($this->request->slug)) {
./var/Widget/Metas/Tag/Edit.php:            if (empty($slug) || !$this->slugExists($name)) {
./var/Widget/Metas/Tag/Edit.php:        $select = $this->db->select()
./var/Widget/Metas/Tag/Edit.php:        if ($this->request->mid) {
./var/Widget/Metas/Tag/Edit.php:            $select->where('mid <> ?', $this->request->mid);
./var/Widget/Metas/Tag/Edit.php:        $tag = $this->db->fetchRow($select);
./var/Widget/Metas/Tag/Edit.php:        $form = new Typecho_Widget_Helper_Form($this->security->getIndex('/action/metas-tag-edit'),
./var/Widget/Metas/Tag/Edit.php:        if (isset($this->request->mid) && 'insert' != $action) {
./var/Widget/Metas/Tag/Edit.php:            $meta = $this->db->fetchRow($this->select()
./var/Widget/Metas/Tag/Edit.php:            ->where('mid = ?', $this->request->mid)
./var/Widget/Metas/Tag/Edit.php:                $this->response->redirect(Typecho_Common::url('manage-tags.php', $this->options->adminUrl));
./var/Widget/Metas/Tag/Edit.php:        if ($this->form('insert')->validate()) {
./var/Widget/Metas/Tag/Edit.php:            $this->response->goBack();
./var/Widget/Metas/Tag/Edit.php:        $tag = $this->request->from('name', 'slug');
./var/Widget/Metas/Tag/Edit.php:        $tag['mid'] = $this->insert($tag);
./var/Widget/Metas/Tag/Edit.php:        $this->push($tag);
./var/Widget/Metas/Tag/Edit.php:        $this->widget('Widget_Notice')->highlight($this->theId);
./var/Widget/Metas/Tag/Edit.php:        $this->widget('Widget_Notice')->set(_t('标签 <a href="%s">%s</a> 已经被增加',
./var/Widget/Metas/Tag/Edit.php:        $this->permalink, $this->name), 'success');
./var/Widget/Metas/Tag/Edit.php:        $this->response->redirect(Typecho_Common::url('manage-tags.php', $this->options->adminUrl));
./var/Widget/Metas/Tag/Edit.php:        if ($this->form('update')->validate()) {
./var/Widget/Metas/Tag/Edit.php:            $this->response->goBack();
./var/Widget/Metas/Tag/Edit.php:        $tag = $this->request->from('name', 'slug', 'mid');
./var/Widget/Metas/Tag/Edit.php:        $this->update($tag, $this->db->sql()->where('mid = ?', $this->request->filter('int')->mid));
./var/Widget/Metas/Tag/Edit.php:        $this->push($tag);
./var/Widget/Metas/Tag/Edit.php:        $this->widget('Widget_Notice')->highlight($this->theId);
./var/Widget/Metas/Tag/Edit.php:        $this->widget('Widget_Notice')->set(_t('标签 <a href="%s">%s</a> 已经被更新',
./var/Widget/Metas/Tag/Edit.php:        $this->permalink, $this->name), 'success');
./var/Widget/Metas/Tag/Edit.php:        $this->response->redirect(Typecho_Common::url('manage-tags.php', $this->options->adminUrl));
./var/Widget/Metas/Tag/Edit.php:        $tags = $this->request->filter('int')->getArray('mid');
./var/Widget/Metas/Tag/Edit.php:                if ($this->delete($this->db->sql()->where('mid = ?', $tag))) {
./var/Widget/Metas/Tag/Edit.php:                    $this->db->query($this->db->delete('table.relationships')->where('mid = ?', $tag));
./var/Widget/Metas/Tag/Edit.php:        $this->widget('Widget_Notice')->set($deleteCount > 0 ? _t('标签已经删除') : _t('没有标签被删除'),
./var/Widget/Metas/Tag/Edit.php:        $this->response->redirect(Typecho_Common::url('manage-tags.php', $this->options->adminUrl));
./var/Widget/Metas/Tag/Edit.php:        if (empty($this->request->merge)) {
./var/Widget/Metas/Tag/Edit.php:            $this->widget('Widget_Notice')->set(_t('请填写需要合并到的标签'), 'notice');
./var/Widget/Metas/Tag/Edit.php:            $this->response->goBack();
./var/Widget/Metas/Tag/Edit.php:        $merge = $this->scanTags($this->request->merge);
./var/Widget/Metas/Tag/Edit.php:            $this->widget('Widget_Notice')->set(_t('合并到的标签名不合法'), 'error');
./var/Widget/Metas/Tag/Edit.php:            $this->response->goBack();
./var/Widget/Metas/Tag/Edit.php:        $tags = $this->request->filter('int')->getArray('mid');
./var/Widget/Metas/Tag/Edit.php:            $this->merge($merge, 'tag', $tags);
./var/Widget/Metas/Tag/Edit.php:            $this->widget('Widget_Notice')->set(_t('标签已经合并'), 'success');
./var/Widget/Metas/Tag/Edit.php:            $this->widget('Widget_Notice')->set(_t('没有选择任何标签'), 'notice');
./var/Widget/Metas/Tag/Edit.php:        $this->response->redirect(Typecho_Common::url('manage-tags.php', $this->options->adminUrl));
./var/Widget/Metas/Tag/Edit.php:        $tags = $this->request->filter('int')->getArray('mid');
./var/Widget/Metas/Tag/Edit.php:                $this->refreshCountByTypeAndStatus($tag, 'post', 'publish');
./var/Widget/Metas/Tag/Edit.php:            $this->clearTags();
./var/Widget/Metas/Tag/Edit.php:            $this->widget('Widget_Notice')->set(_t('标签刷新已经完成'), 'success');
./var/Widget/Metas/Tag/Edit.php:            $this->widget('Widget_Notice')->set(_t('没有选择任何标签'), 'notice');
./var/Widget/Metas/Tag/Edit.php:        $this->response->goBack();
./var/Widget/Metas/Tag/Edit.php:        $this->security->protect();
./var/Widget/Metas/Tag/Edit.php:        $this->on($this->request->is('do=insert'))->insertTag();
./var/Widget/Metas/Tag/Edit.php:        $this->on($this->request->is('do=update'))->updateTag();
./var/Widget/Metas/Tag/Edit.php:        $this->on($this->request->is('do=delete'))->deleteTag();
./var/Widget/Metas/Tag/Edit.php:        $this->on($this->request->is('do=merge'))->mergeTag();
./var/Widget/Metas/Tag/Edit.php:        $this->on($this->request->is('do=refresh'))->refreshTag();
./var/Widget/Metas/Tag/Edit.php:        $this->response->redirect($this->options->adminUrl);
./var/Widget/Notice.php:        $this->highlight = $theId;
./var/Widget/Notice.php:        $this->widget('Widget_Options')->gmtTime + $this->widget('Widget_Options')->timezone + 86400);
./var/Widget/Notice.php:        return preg_match("/[0-9]+/", $this->highlight, $matches) ? $matches[0] : 0;
./var/Widget/Notice.php:        $this->widget('Widget_Options')->gmtTime + $this->widget('Widget_Options')->timezone + 86400);
./var/Widget/Notice.php:        $this->widget('Widget_Options')->gmtTime + $this->widget('Widget_Options')->timezone + 86400);
./var/Widget/Options/Discussion.php:        $form = new Typecho_Widget_Helper_Form($this->security->getIndex('/action/options-discussion'),
./var/Widget/Options/Discussion.php:        $commentDateFormat = new Typecho_Widget_Helper_Form_Element_Text('commentDateFormat', NULL, $this->options->commentDateFormat,
./var/Widget/Options/Discussion.php:        $commentsListSize = new Typecho_Widget_Helper_Form_Element_Text('commentsListSize', NULL, $this->options->commentsListSize,
./var/Widget/Options/Discussion.php:            <option value="G"' . ('G' == $this->options->commentsAvatarRating ? ' selected="true"' : '') . '>G - 普通</option>
./var/Widget/Options/Discussion.php:            <option value="PG"' . ('PG' == $this->options->commentsAvatarRating ? ' selected="true"' : '') . '>PG - 13岁以上</option>
./var/Widget/Options/Discussion.php:            <option value="R"' . ('R' == $this->options->commentsAvatarRating ? ' selected="true"' : '') . '>R - 17岁以上成人</option>
./var/Widget/Options/Discussion.php:            <option value="X"' . ('X' == $this->options->commentsAvatarRating ? ' selected="true"' : '') . '>X - 限制级</option></select>
./var/Widget/Options/Discussion.php:            '</label><input type="text" value="' . $this->options->commentsPageSize
./var/Widget/Options/Discussion.php:            <option value="first"' . ('first' == $this->options->commentsPageDisplay ? ' selected="true"' : '') . '>' . _t('第一页') . '</option>
./var/Widget/Options/Discussion.php:            <option value="last"' . ('last' == $this->options->commentsPageDisplay ? ' selected="true"' : '') . '>' . _t('最后一页') . '</option></select>'
./var/Widget/Options/Discussion.php:            '</label><input name="commentsMaxNestingLevels" type="text" class="text num text-s" value="' . $this->options->commentsMaxNestingLevels . '" id="commentsShow-commentsMaxNestingLevels" />
./var/Widget/Options/Discussion.php:            <option value="DESC"' . ('DESC' == $this->options->commentsOrder ? ' selected="true"' : '') . '>' . _t('较新的') . '</option>
./var/Widget/Options/Discussion.php:            <option value="ASC"' . ('ASC' == $this->options->commentsOrder ? ' selected="true"' : '') . '>' . _t('较旧的') . '</option></select><label for="commentsShow-commentsOrder">')
./var/Widget/Options/Discussion.php:        if ($this->options->commentsShowCommentOnly) {
./var/Widget/Options/Discussion.php:        if ($this->options->commentsMarkdown) {
./var/Widget/Options/Discussion.php:        if ($this->options->commentsShowUrl) {
./var/Widget/Options/Discussion.php:        if ($this->options->commentsUrlNofollow) {
./var/Widget/Options/Discussion.php:        if ($this->options->commentsAvatar) {
./var/Widget/Options/Discussion.php:        if ($this->options->commentsPageBreak) {
./var/Widget/Options/Discussion.php:        if ($this->options->commentsThreaded) {
./var/Widget/Options/Discussion.php:            '</label><input name="commentsPostTimeout" type="text" class="text num text-s" value="' . intval($this->options->commentsPostTimeout / (24 * 3600)) . '" id="commentsPost-commentsPostTimeout" />
./var/Widget/Options/Discussion.php:            '</label><input name="commentsPostInterval" type="text" class="text num text-s" value="' . round($this->options->commentsPostInterval / (60), 1) . '" id="commentsPost-commentsPostInterval" />
./var/Widget/Options/Discussion.php:        if ($this->options->commentsRequireModeration) {
./var/Widget/Options/Discussion.php:        if ($this->options->commentsWhitelist) {
./var/Widget/Options/Discussion.php:        if ($this->options->commentsRequireMail) {
./var/Widget/Options/Discussion.php:        if ($this->options->commentsRequireURL) {
./var/Widget/Options/Discussion.php:        if ($this->options->commentsCheckReferer) {
./var/Widget/Options/Discussion.php:        if ($this->options->commentsAntiSpam) {
./var/Widget/Options/Discussion.php:        if ($this->options->commentsAutoClose) {
./var/Widget/Options/Discussion.php:        if ($this->options->commentsPostIntervalEnable) {
./var/Widget/Options/Discussion.php:        $this->options->commentsHTMLTagAllowed,
./var/Widget/Options/Discussion.php:        if ($this->form()->validate()) {
./var/Widget/Options/Discussion.php:            $this->response->goBack();
./var/Widget/Options/Discussion.php:        $settings = $this->request->from('commentDateFormat', 'commentsListSize', 'commentsPageSize', 'commentsPageDisplay', 'commentsAvatar',
./var/Widget/Options/Discussion.php:        $settings['commentsShow'] = $this->request->getArray('commentsShow');
./var/Widget/Options/Discussion.php:        $settings['commentsPost'] = $this->request->getArray('commentsPost');
./var/Widget/Options/Discussion.php:        $settings['commentsShowCommentOnly'] = $this->isEnableByCheckbox($settings['commentsShow'], 'commentsShowCommentOnly');
./var/Widget/Options/Discussion.php:        $settings['commentsMarkdown'] = $this->isEnableByCheckbox($settings['commentsShow'], 'commentsMarkdown');
./var/Widget/Options/Discussion.php:        $settings['commentsShowUrl'] = $this->isEnableByCheckbox($settings['commentsShow'], 'commentsShowUrl');
./var/Widget/Options/Discussion.php:        $settings['commentsUrlNofollow'] = $this->isEnableByCheckbox($settings['commentsShow'], 'commentsUrlNofollow');
./var/Widget/Options/Discussion.php:        $settings['commentsAvatar'] = $this->isEnableByCheckbox($settings['commentsShow'], 'commentsAvatar');
./var/Widget/Options/Discussion.php:        $settings['commentsPageBreak'] = $this->isEnableByCheckbox($settings['commentsShow'], 'commentsPageBreak');
./var/Widget/Options/Discussion.php:        $settings['commentsThreaded'] = $this->isEnableByCheckbox($settings['commentsShow'], 'commentsThreaded');
./var/Widget/Options/Discussion.php:        $settings['commentsRequireModeration'] = $this->isEnableByCheckbox($settings['commentsPost'], 'commentsRequireModeration');
./var/Widget/Options/Discussion.php:        $settings['commentsWhitelist'] = $this->isEnableByCheckbox($settings['commentsPost'], 'commentsWhitelist');
./var/Widget/Options/Discussion.php:        $settings['commentsRequireMail'] = $this->isEnableByCheckbox($settings['commentsPost'], 'commentsRequireMail');
./var/Widget/Options/Discussion.php:        $settings['commentsRequireURL'] = $this->isEnableByCheckbox($settings['commentsPost'], 'commentsRequireURL');
./var/Widget/Options/Discussion.php:        $settings['commentsCheckReferer'] = $this->isEnableByCheckbox($settings['commentsPost'], 'commentsCheckReferer');
./var/Widget/Options/Discussion.php:        $settings['commentsAntiSpam'] = $this->isEnableByCheckbox($settings['commentsPost'], 'commentsAntiSpam');
./var/Widget/Options/Discussion.php:        $settings['commentsAutoClose'] = $this->isEnableByCheckbox($settings['commentsPost'], 'commentsAutoClose');
./var/Widget/Options/Discussion.php:        $settings['commentsPostIntervalEnable'] = $this->isEnableByCheckbox($settings['commentsPost'], 'commentsPostIntervalEnable');
./var/Widget/Options/Discussion.php:            $this->update(array('value' => $value), $this->db->sql()->where('name = ?', $name));
./var/Widget/Options/Discussion.php:        $this->widget('Widget_Notice')->set(_t("设置已经保存"), 'success');
./var/Widget/Options/Discussion.php:        $this->response->goBack();
./var/Widget/Options/Discussion.php:        $this->user->pass('administrator');
./var/Widget/Options/Discussion.php:        $this->security->protect();
./var/Widget/Options/Discussion.php:        $this->on($this->request->isPost())->updateDiscussionSettings();
./var/Widget/Options/Discussion.php:        $this->response->redirect($this->options->adminUrl);
./var/Widget/Options/General.php:        $form = new Typecho_Widget_Helper_Form($this->security->getIndex('/action/options-general'),
./var/Widget/Options/General.php:        $title = new Typecho_Widget_Helper_Form_Element_Text('title', NULL, $this->options->title, _t('站点名称'), _t('站点的名称将显示在网页的标题处.'));
./var/Widget/Options/General.php:            $siteUrl = new Typecho_Widget_Helper_Form_Element_Text('siteUrl', NULL, $this->options->originalSiteUrl, _t('站点地址'), _t('站点地址主要用于生成内容的永久链接.') . ($this->options->originalSiteUrl == $this->options->rootUrl ? 
./var/Widget/Options/General.php:                    $this->options->rootUrl)));
./var/Widget/Options/General.php:        $description = new Typecho_Widget_Helper_Form_Element_Text('description', NULL, $this->options->description, _t('站点描述'), _t('站点描述将显示在网页代码的头部.'));
./var/Widget/Options/General.php:        $keywords = new Typecho_Widget_Helper_Form_Element_Text('keywords', NULL, $this->options->keywords, _t('关键词'), _t('请以半角逗号 "," 分割多个关键字.'));
./var/Widget/Options/General.php:        $allowRegister = new Typecho_Widget_Helper_Form_Element_Radio('allowRegister', array('0' => _t('不允许'), '1' => _t('允许')), $this->options->allowRegister, _t('是否允许注册'),
./var/Widget/Options/General.php:            $lang = new Typecho_Widget_Helper_Form_Element_Select('lang', $langs, $this->options->lang, _t('语言'));
./var/Widget/Options/General.php:        $timezone = new Typecho_Widget_Helper_Form_Element_Select('timezone', $timezoneList, $this->options->timezone, _t('时区'));
./var/Widget/Options/General.php:        $attachmentTypesOptionsResult = (NULL != trim($this->options->attachmentTypes)) ? 
./var/Widget/Options/General.php:        array_map('trim', explode(',', $this->options->attachmentTypes)) : array();
./var/Widget/Options/General.php:        if ($this->form()->validate()) {
./var/Widget/Options/General.php:            $this->response->goBack();
./var/Widget/Options/General.php:        $settings = $this->request->from('title','description', 'keywords', 'allowRegister', 'lang', 'timezone');
./var/Widget/Options/General.php:        $settings['attachmentTypes'] = $this->request->getArray('attachmentTypes');
./var/Widget/Options/General.php:            $settings['siteUrl'] = rtrim($this->request->siteUrl, '/');
./var/Widget/Options/General.php:        if ($this->isEnableByCheckbox($settings['attachmentTypes'], '@image@')) {
./var/Widget/Options/General.php:        if ($this->isEnableByCheckbox($settings['attachmentTypes'], '@media@')) {
./var/Widget/Options/General.php:        if ($this->isEnableByCheckbox($settings['attachmentTypes'], '@doc@')) {
./var/Widget/Options/General.php:        $attachmentTypesOther = $this->request->filter('trim', 'strtolower')->attachmentTypesOther;
./var/Widget/Options/General.php:        if ($this->isEnableByCheckbox($settings['attachmentTypes'], '@other@') && !empty($attachmentTypesOther)) {
./var/Widget/Options/General.php:            $this->update(array('value' => $value), $this->db->sql()->where('name = ?', $name));
./var/Widget/Options/General.php:        $this->widget('Widget_Notice')->set(_t("设置已经保存"), 'success');
./var/Widget/Options/General.php:        $this->response->goBack();
./var/Widget/Options/General.php:        $this->user->pass('administrator');
./var/Widget/Options/General.php:        $this->security->protect();
./var/Widget/Options/General.php:        $this->on($this->request->isPost())->updateGeneralSettings();
./var/Widget/Options/General.php:        $this->response->redirect($this->options->adminUrl);
./var/Widget/Options/Permalink.php:        $routingTable = $this->options->routingTable;
./var/Widget/Options/Permalink.php:        $currentTable = array('custom' => array('url' => $this->encodeRule($this->request->customPattern)));
./var/Widget/Options/Permalink.php:            $this->user->pass('administrator');
./var/Widget/Options/Permalink.php:                    $parsed = parse_url($this->options->siteUrl);
./var/Widget/Options/Permalink.php:                    ->setHeader('User-Agent', $this->options->generator)
./var/Widget/Options/Permalink.php:                    ->send(Typecho_Common::url('/action/ajax', $this->options->siteUrl));
./var/Widget/Options/Permalink.php:                        ->setHeader('User-Agent', $this->options->generator)
./var/Widget/Options/Permalink.php:                        ->send(Typecho_Common::url('/action/ajax', $this->options->siteUrl));
./var/Widget/Options/Permalink.php:        $form = new Typecho_Widget_Helper_Form($this->security->getRootUrl('index.php/action/options-permalink'),
./var/Widget/Options/Permalink.php:                $this->options->rewrite, _t('是否使用地址重写功能'), _t('地址重写即 rewrite 功能是某些服务器软件提供的优化内部连接的功能.') . '<br />'
./var/Widget/Options/Permalink.php:            if (!$this->options->rewrite && !$this->request->is('enableRewriteAnyway=1')) {
./var/Widget/Options/Permalink.php:        $postPatternValue = $this->options->routingTable['post']['url'];
./var/Widget/Options/Permalink.php:        if (isset($this->request->__typecho_form_item_postPattern)) {
./var/Widget/Options/Permalink.php:            $customPatternValue = $this->request->__typecho_form_item_postPattern;
./var/Widget/Options/Permalink.php:            $customPatternValue = $this->decodeRule($postPatternValue);
./var/Widget/Options/Permalink.php:        $pagePattern = new Typecho_Widget_Helper_Form_Element_Text('pagePattern', NULL, $this->decodeRule($this->options->routingTable['page']['url']), _t('独立页面路径'), _t('可用参数: <code>{cid}</code> 页面 ID, <code>{slug}</code> 页面缩略名')
./var/Widget/Options/Permalink.php:        $categoryPattern = new Typecho_Widget_Helper_Form_Element_Text('categoryPattern', NULL, $this->decodeRule($this->options->routingTable['category']['url']), _t('分类路径'), _t('可用参数: <code>{mid}</code> 分类 ID, <code>{slug}</code> 分类缩略名, <code>{directory}</code> 多级分类')
./var/Widget/Options/Permalink.php:        if ($this->form()->validate()) {
./var/Widget/Options/Permalink.php:            Typecho_Cookie::set('__typecho_form_item_postPattern', $this->request->customPattern);
./var/Widget/Options/Permalink.php:            $this->response->goBack();
./var/Widget/Options/Permalink.php:        $patternValid = $this->checkRule($this->request->postPattern);
./var/Widget/Options/Permalink.php:        if ('custom' == $this->request->postPattern) {
./var/Widget/Options/Permalink.php:            $this->request->postPattern = '/' . ltrim($this->encodeRule($this->request->customPattern), '/');
./var/Widget/Options/Permalink.php:        $settings = defined('__TYPECHO_REWRITE__') ? array() : $this->request->from('rewrite');
./var/Widget/Options/Permalink.php:        if (isset($this->request->postPattern) && isset($this->request->pagePattern)) {
./var/Widget/Options/Permalink.php:            $routingTable = $this->options->routingTable;
./var/Widget/Options/Permalink.php:            $routingTable['post']['url'] = $this->request->postPattern;
./var/Widget/Options/Permalink.php:            $routingTable['page']['url'] = '/' . ltrim($this->encodeRule($this->request->pagePattern), '/');
./var/Widget/Options/Permalink.php:            $routingTable['category']['url'] = '/' . ltrim($this->encodeRule($this->request->categoryPattern), '/');
./var/Widget/Options/Permalink.php:            $this->update(array('value' => $value), $this->db->sql()->where('name = ?', $name));
./var/Widget/Options/Permalink.php:            $this->widget('Widget_Notice')->set(_t("设置已经保存"), 'success');
./var/Widget/Options/Permalink.php:            $this->widget('Widget_Notice')->set(_t("自定义链接与现有规则存在冲突! 它可能影响解析效率, 建议你重新分配一个规则."), 'notice');
./var/Widget/Options/Permalink.php:        $this->response->goBack();
./var/Widget/Options/Permalink.php:        $this->user->pass('administrator');
./var/Widget/Options/Permalink.php:        $this->security->protect();
./var/Widget/Options/Permalink.php:        $this->on($this->request->isPost())->updatePermalinkSettings();
./var/Widget/Options/Permalink.php:        $this->response->redirect($this->options->adminUrl);
./var/Widget/Options/Reading.php:        $form = new Typecho_Widget_Helper_Form($this->security->getIndex('/action/options-reading'),
./var/Widget/Options/Reading.php:        $postDateFormat = new Typecho_Widget_Helper_Form_Element_Text('postDateFormat', NULL, $this->options->postDateFormat,
./var/Widget/Options/Reading.php:        $frontPageParts = explode(':', $this->options->frontPage);
./var/Widget/Options/Reading.php:            . ($this->options->frontArchive && 'recent' != $frontPageType ? ' checked' : '') .' />
./var/Widget/Options/Reading.php:            . htmlspecialchars($this->decodeRule($this->options->routingTable['archive']['url'])) . '" />') 
./var/Widget/Options/Reading.php:        $pages = $this->db->fetchAll($this->db->select('cid', 'title')
./var/Widget/Options/Reading.php:        ->where('status = ?', 'publish')->where('created < ?', $this->options->gmtTime));
./var/Widget/Options/Reading.php:        $files = glob($this->options->themeFile($this->options->theme, '*.php'));
./var/Widget/Options/Reading.php:        $postsListSize = new Typecho_Widget_Helper_Form_Element_Text('postsListSize', NULL, $this->options->postsListSize,
./var/Widget/Options/Reading.php:        $pageSize = new Typecho_Widget_Helper_Form_Element_Text('pageSize', NULL, $this->options->pageSize,
./var/Widget/Options/Reading.php:        $this->options->feedFullText, _t('聚合全文输出'), _t('如果你不希望在聚合中输出文章全文,请使用仅输出摘要选项.') . '<br />'
./var/Widget/Options/Reading.php:        if ($this->form()->validate()) {
./var/Widget/Options/Reading.php:            $this->response->goBack();
./var/Widget/Options/Reading.php:        $settings = $this->request->from('postDateFormat', 'frontPage', 'frontArchive', 'pageSize', 'postsListSize', 'feedFullText');
./var/Widget/Options/Reading.php:        if ('page' == $settings['frontPage'] && isset($this->request->frontPagePage) &&
./var/Widget/Options/Reading.php:        $this->db->fetchRow($this->db->select('cid')
./var/Widget/Options/Reading.php:        ->where('status = ?', 'publish')->where('created < ?', $this->options->gmtTime)
./var/Widget/Options/Reading.php:        ->where('cid = ?', $pageId = intval($this->request->frontPagePage)))) {
./var/Widget/Options/Reading.php:        } else if ('file' == $settings['frontPage'] && isset($this->request->frontPageFile) &&
./var/Widget/Options/Reading.php:        file_exists(__TYPECHO_ROOT_DIR__ . '/' . __TYPECHO_THEME_DIR__ . '/' . $this->options->theme . '/' .
./var/Widget/Options/Reading.php:        ($file = trim($this->request->frontPageFile, " ./\\")))) {
./var/Widget/Options/Reading.php:                $routingTable = $this->options->routingTable;
./var/Widget/Options/Reading.php:                $routingTable['archive']['url'] = '/' . ltrim($this->encodeRule($this->request->archivePattern), '/');
./var/Widget/Options/Reading.php:            $this->update(array('value' => $value), $this->db->sql()->where('name = ?', $name));
./var/Widget/Options/Reading.php:        $this->widget('Widget_Notice')->set(_t("设置已经保存"), 'success');
./var/Widget/Options/Reading.php:        $this->response->goBack();
./var/Widget/Options/Reading.php:        $this->user->pass('administrator');
./var/Widget/Options/Reading.php:        $this->security->protect();
./var/Widget/Options/Reading.php:        $this->on($this->request->isPost())->updateReadingSettings();
./var/Widget/Options/Reading.php:        $this->response->redirect($this->options->adminUrl);
./var/Widget/Options.php:        $this->db = Typecho_Db::get();
./var/Widget/Options.php:        return Typecho_Router::url('feed', array('feed' => '/'), $this->index);
./var/Widget/Options.php:        return Typecho_Router::url('feed', array('feed' => '/rss/'), $this->index);
./var/Widget/Options.php:        return Typecho_Router::url('feed', array('feed' => '/atom/'), $this->index);
./var/Widget/Options.php:        return Typecho_Router::url('feed', array('feed' => '/comments/'), $this->index);
./var/Widget/Options.php:        return Typecho_Router::url('feed', array('feed' => '/rss/comments/'), $this->index);
./var/Widget/Options.php:        return Typecho_Router::url('feed', array('feed' => '/atom/comments/'), $this->index);
./var/Widget/Options.php:        return Typecho_Router::url('do', array('action' => 'xmlrpc'), $this->index);
./var/Widget/Options.php:        return ($this->rewrite || (defined('__TYPECHO_REWRITE__') && __TYPECHO_REWRITE__)) 
./var/Widget/Options.php:            ? $this->rootUrl : Typecho_Common::url('index.php', $this->rootUrl);
./var/Widget/Options.php:            Typecho_Common::url(__TYPECHO_THEME_DIR__ . '/' . $this->theme, $this->siteUrl);
./var/Widget/Options.php:            Typecho_Common::url(__TYPECHO_PLUGIN_DIR__, $this->siteUrl);
./var/Widget/Options.php:        __TYPECHO_ADMIN_DIR__ : '/admin/', $this->rootUrl);
./var/Widget/Options.php:        return Typecho_Common::url('login.php', $this->adminUrl);
./var/Widget/Options.php:        return $this->widget('Widget_Security')->getTokenUrl(
./var/Widget/Options.php:            Typecho_Common::url('index.php', $this->rootUrl)));
./var/Widget/Options.php:        return Typecho_Common::url('register.php', $this->adminUrl);
./var/Widget/Options.php:        return $this->widget('Widget_Security')->getTokenUrl(
./var/Widget/Options.php:            Typecho_Router::url('do', array('action' => 'register', 'widget' => 'Register'), $this->index));
./var/Widget/Options.php:        return Typecho_Common::url('profile.php', $this->adminUrl);
./var/Widget/Options.php:        return Typecho_Common::url('/action/logout', $this->index);
./var/Widget/Options.php:        return isset($this->contentType) ? $this->contentType : 'text/html';
./var/Widget/Options.php:        list($software, $version) = explode(' ', $this->generator);
./var/Widget/Options.php:        list($software, $version) = explode(' ', $this->generator);
./var/Widget/Options.php:        if (NULL != $this->attachmentTypes) {
./var/Widget/Options.php:                    'txt,doc,docx,xls,xlsx,ppt,pptx,zip,rar,pdf'), $this->attachmentTypes);
./var/Widget/Options.php:        $this->db->fetchAll($this->db->select()->from('table.options')
./var/Widget/Options.php:        if (!empty($this->row['theme:' . $this->row['theme']])) {
./var/Widget/Options.php:            if ($themeOptions = unserialize($this->row['theme:' . $this->row['theme']])) {
./var/Widget/Options.php:                $this->row = array_merge($this->row, $themeOptions);
./var/Widget/Options.php:        $this->stack[] = &$this->row;
./var/Widget/Options.php:            $this->siteUrl = __TYPECHO_SITE_URL__;
./var/Widget/Options.php:        $this->originalSiteUrl = $this->siteUrl;
./var/Widget/Options.php:        $this->siteUrl = Typecho_Common::url(NULL, $this->siteUrl);
./var/Widget/Options.php:        $this->plugins = unserialize($this->plugins);
./var/Widget/Options.php:        $this->theme = is_dir($this->themeFile($this->theme)) ? $this->theme : 'default';
./var/Widget/Options.php:        $this->rootUrl = $this->request->getRequestRoot();
./var/Widget/Options.php:            $this->rootUrl = substr($this->rootUrl, 0, - strlen($adminDir));
./var/Widget/Options.php:        if ($this->request->isSecure() && 0 === strpos($this->siteUrl, 'http://')) {
./var/Widget/Options.php:            $this->siteUrl = substr_replace($this->siteUrl, 'https', 0, 4);
./var/Widget/Options.php:        $this->routingTable = unserialize($this->routingTable);
./var/Widget/Options.php:        if (!isset($this->routingTable[0])) {
./var/Widget/Options.php:            $parser = new Typecho_Router_Parser($this->routingTable);
./var/Widget/Options.php:            $this->routingTable = array_merge(array($parsedRoutingTable), $this->routingTable);
./var/Widget/Options.php:            $this->db->query($this->db->update('table.options')->rows(array('value' => serialize($this->routingTable)))
./var/Widget/Options.php:        $this->row[$value['name']] = $value['value'];
./var/Widget/Options.php:        echo Typecho_Common::url($path, $this->siteUrl);
./var/Widget/Options.php:        echo Typecho_Common::url($path, $this->index);
./var/Widget/Options.php:            echo Typecho_Common::url($path, $this->themeUrl);
./var/Widget/Options.php:            Typecho_Common::url(__TYPECHO_THEME_DIR__ . '/' . $theme, $this->siteUrl);
./var/Widget/Options.php:        echo Typecho_Common::url($path, $this->pluginUrl);
./var/Widget/Options.php:        echo Typecho_Common::url($path, $this->adminUrl);
./var/Widget/Options.php:        $url = Typecho_Common::url($type, $this->adminUrl);
./var/Widget/Options.php:        echo htmlspecialchars($this->commentsHTMLTagAllowed);
./var/Widget/Options.php:        if (!isset($this->_pluginConfig[$pluginName])) {
./var/Widget/Options.php:            if (!empty($this->row['plugin:' . $pluginName])
./var/Widget/Options.php:            && false !== ($options = unserialize($this->row['plugin:' . $pluginName]))) {
./var/Widget/Options.php:                $this->_pluginConfig[$pluginName] = new Typecho_Config($options);
./var/Widget/Options.php:        return $this->_pluginConfig[$pluginName];
./var/Widget/Options.php:        if (!isset($this->_personalPluginConfig[$pluginName])) {
./var/Widget/Options.php:            if (!empty($this->row['_plugin:' . $pluginName])
./var/Widget/Options.php:            && false !== ($options = unserialize($this->row['_plugin:' . $pluginName]))) {
./var/Widget/Options.php:                $this->_personalPluginConfig[$pluginName] = new Typecho_Config($options);
./var/Widget/Options.php:        return $this->_personalPluginConfig[$pluginName];
./var/Widget/Plugins/Config.php:        $this->user->pass('administrator');
./var/Widget/Plugins/Config.php:        $config = $this->request->filter('slug')->config;
./var/Widget/Plugins/Config.php:        list($this->_pluginFileName, $this->_className) = Typecho_Plugin::portal($config,
./var/Widget/Plugins/Config.php:            $this->options->pluginDir($config));
./var/Widget/Plugins/Config.php:        $this->info = Typecho_Plugin::parseInfo($this->_pluginFileName);
./var/Widget/Plugins/Config.php:        return _t('设置插件 %s', $this->info['title']);
./var/Widget/Plugins/Config.php:        $pluginName = $this->request->filter('slug')->config;
./var/Widget/Plugins/Config.php:        if (!$this->info['config'] || !isset($activatedPlugins[$pluginName])) {
./var/Widget/Plugins/Config.php:        require_once $this->_pluginFileName;
./var/Widget/Plugins/Config.php:        $form = new Typecho_Widget_Helper_Form($this->security->getIndex('/action/plugins-edit?config=' . $pluginName),
./var/Widget/Plugins/Config.php:        call_user_func(array($this->_className, 'config'), $form);
./var/Widget/Plugins/Config.php:        $options = $this->options->plugin($pluginName);
./var/Widget/Plugins/Edit.php:        list($pluginFileName, $className) = Typecho_Plugin::portal($pluginName, $this->options->pluginDir($pluginName));
./var/Widget/Plugins/Edit.php:                $this->update(array('value' => serialize(Typecho_Plugin::export())),
./var/Widget/Plugins/Edit.php:                $this->db->sql()->where('name = ?', 'plugins'));
./var/Widget/Plugins/Edit.php:                $this->widget('Widget_Notice')->set($e->getMessage(), 'error');
./var/Widget/Plugins/Edit.php:                $this->response->goBack();
./var/Widget/Plugins/Edit.php:            if ($options && !$this->configHandle($pluginName, $options, true)) {
./var/Widget/Plugins/Edit.php:            if ($personalOptions && !$this->personalConfigHandle($className, $personalOptions)) {
./var/Widget/Plugins/Edit.php:        $this->widget('Widget_Notice')->highlight('plugin-' . $pluginName);
./var/Widget/Plugins/Edit.php:            $this->widget('Widget_Notice')->set($result, 'notice');
./var/Widget/Plugins/Edit.php:            $this->widget('Widget_Notice')->set(_t('插件已经被启用'), 'success');
./var/Widget/Plugins/Edit.php:        $this->response->goBack();
./var/Widget/Plugins/Edit.php:            list($pluginFileName, $className) = Typecho_Plugin::portal($pluginName, $this->options->pluginDir($pluginName));
./var/Widget/Plugins/Edit.php:                $this->widget('Widget_Notice')->set($e->getMessage(), 'error');
./var/Widget/Plugins/Edit.php:                $this->response->goBack();
./var/Widget/Plugins/Edit.php:            $this->widget('Widget_Notice')->highlight('plugin-' . $pluginName);
./var/Widget/Plugins/Edit.php:        $this->update(array('value' => serialize(Typecho_Plugin::export())),
./var/Widget/Plugins/Edit.php:        $this->db->sql()->where('name = ?', 'plugins'));
./var/Widget/Plugins/Edit.php:        $this->delete($this->db->sql()->where('name = ?', 'plugin:' . $pluginName));
./var/Widget/Plugins/Edit.php:        $this->delete($this->db->sql()->where('name = ?', '_plugin:' . $pluginName));
./var/Widget/Plugins/Edit.php:            $this->widget('Widget_Notice')->set($result, 'notice');
./var/Widget/Plugins/Edit.php:            $this->widget('Widget_Notice')->set(_t('插件已经被禁用'), 'success');
./var/Widget/Plugins/Edit.php:        $this->response->goBack();
./var/Widget/Plugins/Edit.php:        $form = $this->widget('Widget_Plugins_Config')->config();
./var/Widget/Plugins/Edit.php:            $this->response->goBack();
./var/Widget/Plugins/Edit.php:        if (!$this->configHandle($pluginName, $settings, false)) {
./var/Widget/Plugins/Edit.php:        $this->widget('Widget_Notice')->highlight('plugin-' . $pluginName);
./var/Widget/Plugins/Edit.php:        $this->widget('Widget_Notice')->set(_t("插件设置已经保存"), 'success');
./var/Widget/Plugins/Edit.php:        $this->response->redirect(Typecho_Common::url('plugins.php', $this->options->adminUrl));
./var/Widget/Plugins/Edit.php:        list($pluginFileName, $className) = Typecho_Plugin::portal($pluginName, $this->options->pluginDir($pluginName));
./var/Widget/Plugins/Edit.php:        $this->user->pass('administrator');
./var/Widget/Plugins/Edit.php:        $this->security->protect();
./var/Widget/Plugins/Edit.php:        $this->on($this->request->is('activate'))->activate($this->request->filter('slug')->activate);
./var/Widget/Plugins/Edit.php:        $this->on($this->request->is('deactivate'))->deactivate($this->request->filter('slug')->deactivate);
./var/Widget/Plugins/Edit.php:        $this->on($this->request->is('config'))->config($this->request->filter('slug')->config);
./var/Widget/Plugins/Edit.php:        $this->response->redirect($this->options->adminUrl);
./var/Widget/Plugins/List.php:        $pluginDirs = $this->getPlugins();
./var/Widget/Plugins/List.php:        $this->parameter->setDefault(array('activated' => NULL));
./var/Widget/Plugins/List.php:        $this->activatedPlugins = $plugins['activated'];
./var/Widget/Plugins/List.php:                $parts = $this->getPlugin($pluginDir, $key);
./var/Widget/Plugins/List.php:                        $info['activated'] = isset($this->activatedPlugins[$pluginName]);
./var/Widget/Plugins/List.php:                        if (isset($this->activatedPlugins[$pluginName])) {
./var/Widget/Plugins/List.php:                            unset($this->activatedPlugins[$pluginName]);
./var/Widget/Plugins/List.php:                    if ($info['activated']  == $this->parameter->activated) {
./var/Widget/Plugins/List.php:                        $this->push($info);
./var/Widget/Register.php:        $this->security->protect();
./var/Widget/Register.php:        if ($this->user->hasLogin() || !$this->options->allowRegister) {
./var/Widget/Register.php:            $this->response->redirect($this->options->index);
./var/Widget/Register.php:        if ($error = $validator->run($this->request->from('name', 'password', 'mail', 'confirm'))) {
./var/Widget/Register.php:            Typecho_Cookie::set('__typecho_remember_name', $this->request->name);
./var/Widget/Register.php:            Typecho_Cookie::set('__typecho_remember_mail', $this->request->mail);
./var/Widget/Register.php:            $this->widget('Widget_Notice')->set($error);
./var/Widget/Register.php:            $this->response->goBack();
./var/Widget/Register.php:            'name'      =>  $this->request->name,
./var/Widget/Register.php:            'mail'      =>  $this->request->mail,
./var/Widget/Register.php:            'screenName'=>  $this->request->name,
./var/Widget/Register.php:            'created'   =>  $this->options->gmtTime,
./var/Widget/Register.php:        $dataStruct = $this->pluginHandle()->register($dataStruct);
./var/Widget/Register.php:        $insertId = $this->insert($dataStruct);
./var/Widget/Register.php:        $this->db->fetchRow($this->select()->where('uid = ?', $insertId)
./var/Widget/Register.php:        $this->pluginHandle()->finishRegister($this);
./var/Widget/Register.php:        $this->user->login($this->request->name, $generatedPassword);
./var/Widget/Register.php:        $this->widget('Widget_Notice')->set(_t('用户 <strong>%s</strong> 已经成功注册, 密码为 <strong>%s</strong>', $this->screenName, $generatedPassword), 'success');
./var/Widget/Register.php:        $this->response->redirect($this->options->adminUrl);
./var/Widget/Security.php:        $this->_options = $this->widget('Widget_Options');
./var/Widget/Security.php:        $user = $this->widget('Widget_User');
./var/Widget/Security.php:        $this->_token = $this->_options->secret;
./var/Widget/Security.php:            $this->_token .= '&' . $user->authCode . '&' . $user->uid;
./var/Widget/Security.php:        return md5($this->_token . '&' . $suffix);
./var/Widget/Security.php:        $params['_'] = $this->getToken($this->request->getRequestUrl());
./var/Widget/Security.php:        if ($this->request->get('_') != $this->getToken($this->request->getReferer())) {
./var/Widget/Security.php:            $this->response->goBack();
./var/Widget/Security.php:        return Typecho_Common::url($this->getTokenUrl($path), $this->_options->adminUrl);
./var/Widget/Security.php:        return Typecho_Common::url($this->getTokenUrl($path), $this->_options->index);
./var/Widget/Security.php:        return Typecho_Common::url($this->getTokenUrl($path), $this->_options->rootUrl);
./var/Widget/Security.php:        echo $this->getAdminUrl($path);
./var/Widget/Security.php:        echo $this->getIndex($path);
./var/Widget/Service.php:        $this->user->pass('contributor');
./var/Widget/Service.php:        $post = $this->widget('Widget_Archive', "type=post", "cid={$this->request->cid}");
./var/Widget/Service.php:        if ($post->have() && !empty($this->request->trackback)) {
./var/Widget/Service.php:            $links = $this->request->trackback;
./var/Widget/Service.php:                            'blog_name' => $this->options->title . ' &raquo ' . $post->title,
./var/Widget/Service.php:     * $this->sendPingbacks(365);
./var/Widget/Service.php:        $this->user->pass('contributor');
./var/Widget/Service.php:                ->setHeader('User-Agent', $this->options->generator)
./var/Widget/Service.php:                ->send(Typecho_Common::url('/action/service', $this->options->index));
./var/Widget/Service.php:        $this->on($this->request->is('do=ping'))->sendPingHandle();
./var/Widget/Stat.php:        $this->db = Typecho_Db::get();
./var/Widget/Stat.php:        $this->user = $this->widget('Widget_User');
./var/Widget/Stat.php:        return $this->db->fetchObject($this->db->select(array('COUNT(cid)' => 'num'))
./var/Widget/Stat.php:        return $this->db->fetchObject($this->db->select(array('COUNT(cid)' => 'num'))
./var/Widget/Stat.php:        return $this->db->fetchObject($this->db->select(array('COUNT(cid)' => 'num'))
./var/Widget/Stat.php:        return $this->db->fetchObject($this->db->select(array('COUNT(cid)' => 'num'))
./var/Widget/Stat.php:                    ->where('table.contents.authorId = ?', $this->user->uid))->num;
./var/Widget/Stat.php:        return $this->db->fetchObject($this->db->select(array('COUNT(cid)' => 'num'))
./var/Widget/Stat.php:                    ->where('table.contents.authorId = ?', $this->user->uid))->num;
./var/Widget/Stat.php:        return $this->db->fetchObject($this->db->select(array('COUNT(cid)' => 'num'))
./var/Widget/Stat.php:                    ->where('table.contents.authorId = ?', $this->user->uid))->num;
./var/Widget/Stat.php:        return $this->db->fetchObject($this->db->select(array('COUNT(cid)' => 'num'))
./var/Widget/Stat.php:                    ->where('table.contents.authorId = ?', $this->request->filter('int')->uid))->num;
./var/Widget/Stat.php:        return $this->db->fetchObject($this->db->select(array('COUNT(cid)' => 'num'))
./var/Widget/Stat.php:                    ->where('table.contents.authorId = ?', $this->request->filter('int')->uid))->num;
./var/Widget/Stat.php:        return $this->db->fetchObject($this->db->select(array('COUNT(cid)' => 'num'))
./var/Widget/Stat.php:                    ->where('table.contents.authorId = ?', $this->request->filter('int')->uid))->num;
./var/Widget/Stat.php:        return $this->db->fetchObject($this->db->select(array('COUNT(cid)' => 'num'))
./var/Widget/Stat.php:        return $this->db->fetchObject($this->db->select(array('COUNT(cid)' => 'num'))
./var/Widget/Stat.php:        return $this->db->fetchObject($this->db->select(array('COUNT(coid)' => 'num'))
./var/Widget/Stat.php:        return $this->db->fetchObject($this->db->select(array('COUNT(coid)' => 'num'))
./var/Widget/Stat.php:        return $this->db->fetchObject($this->db->select(array('COUNT(coid)' => 'num'))
./var/Widget/Stat.php:        return $this->db->fetchObject($this->db->select(array('COUNT(coid)' => 'num'))
./var/Widget/Stat.php:                    ->where('table.comments.ownerId = ?', $this->user->uid))->num;
./var/Widget/Stat.php:        return $this->db->fetchObject($this->db->select(array('COUNT(coid)' => 'num'))
./var/Widget/Stat.php:                    ->where('table.comments.ownerId = ?', $this->user->uid))->num;
./var/Widget/Stat.php:        return $this->db->fetchObject($this->db->select(array('COUNT(coid)' => 'num'))
./var/Widget/Stat.php:                    ->where('table.comments.ownerId = ?', $this->user->uid))->num;
./var/Widget/Stat.php:        return $this->db->fetchObject($this->db->select(array('COUNT(coid)' => 'num'))
./var/Widget/Stat.php:                    ->where('table.comments.cid = ?', $this->request->filter('int')->cid))->num;
./var/Widget/Stat.php:        return $this->db->fetchObject($this->db->select(array('COUNT(coid)' => 'num'))
./var/Widget/Stat.php:                    ->where('table.comments.cid = ?', $this->request->filter('int')->cid))->num;
./var/Widget/Stat.php:        return $this->db->fetchObject($this->db->select(array('COUNT(coid)' => 'num'))
./var/Widget/Stat.php:                    ->where('table.comments.cid = ?', $this->request->filter('int')->cid))->num;
./var/Widget/Stat.php:        return $this->db->fetchObject($this->db->select(array('COUNT(coid)' => 'num'))
./var/Widget/Stat.php:                    ->where('table.comments.cid = ?', $this->request->filter('int')->cid))->num;
./var/Widget/Stat.php:        return $this->db->fetchObject($this->db->select(array('COUNT(mid)' => 'num'))
./var/Widget/Themes/Config.php:        $this->user->pass('administrator');
./var/Widget/Themes/Config.php:        $form = new Typecho_Widget_Helper_Form($this->security->getIndex('/action/themes-edit?config'),
./var/Widget/Themes/Config.php:                $form->getInput($key)->value($this->options->{$key});
./var/Widget/Themes/Edit.php:        if (is_dir($this->options->themeFile($theme))) {
./var/Widget/Themes/Edit.php:            $this->delete($this->db->sql()->where('name = ?', 'theme:' . $this->options->theme));
./var/Widget/Themes/Edit.php:            $this->update(array('value' => $theme), $this->db->sql()->where('name = ?', 'theme'));
./var/Widget/Themes/Edit.php:            if (0 === strpos($this->options->frontPage, 'file:')) {
./var/Widget/Themes/Edit.php:                $this->update(array('value' => 'recent'), $this->db->sql()->where('name = ?', 'frontPage'));
./var/Widget/Themes/Edit.php:            $configFile = $this->options->themeFile($theme, 'functions.php');
./var/Widget/Themes/Edit.php:                    if ($options && !$this->configHandle($options, true)) {
./var/Widget/Themes/Edit.php:                        $this->insert(array(
./var/Widget/Themes/Edit.php:            $this->widget('Widget_Notice')->highlight('theme-' . $theme);
./var/Widget/Themes/Edit.php:            $this->widget('Widget_Notice')->set(_t("外观已经改变"), 'success');
./var/Widget/Themes/Edit.php:            $this->response->goBack();
./var/Widget/Themes/Edit.php:        $path = $this->options->themeFile($theme, $file);
./var/Widget/Themes/Edit.php:            if ($handle && fwrite($handle, $this->request->content)) {
./var/Widget/Themes/Edit.php:                $this->widget('Widget_Notice')->set(_t("文件 %s 的更改已经保存", $file), 'success');
./var/Widget/Themes/Edit.php:                $this->widget('Widget_Notice')->set(_t("文件 %s 无法被写入", $file), 'error');
./var/Widget/Themes/Edit.php:            $this->response->goBack();
./var/Widget/Themes/Edit.php:        $form = $this->widget('Widget_Themes_Config')->config();
./var/Widget/Themes/Edit.php:            $this->response->goBack();
./var/Widget/Themes/Edit.php:        if (!$this->configHandle($settings, false)) {
./var/Widget/Themes/Edit.php:            if ($this->options->__get('theme:' . $theme)) {
./var/Widget/Themes/Edit.php:                $this->update(array('value' => serialize($settings)),
./var/Widget/Themes/Edit.php:                $this->db->sql()->where('name = ?', 'theme:' . $theme));
./var/Widget/Themes/Edit.php:                $this->insert(array(
./var/Widget/Themes/Edit.php:        $this->widget('Widget_Notice')->highlight('theme-' . $theme);
./var/Widget/Themes/Edit.php:        $this->widget('Widget_Notice')->set(_t("外观设置已经保存"), 'success');
./var/Widget/Themes/Edit.php:        $this->response->redirect(Typecho_Common::url('options-theme.php', $this->options->adminUrl));
./var/Widget/Themes/Edit.php:        $this->user->pass('administrator');
./var/Widget/Themes/Edit.php:        $this->security->protect();
./var/Widget/Themes/Edit.php:        $this->on($this->request->is('change'))->changeTheme($this->request->filter('slug')->change);
./var/Widget/Themes/Edit.php:        $this->on($this->request->is('edit&theme'))
./var/Widget/Themes/Edit.php:            ->editThemeFile($this->request->filter('slug')->theme, $this->request->edit);
./var/Widget/Themes/Edit.php:        $this->on($this->request->is('config'))->config($this->options->theme);
./var/Widget/Themes/Edit.php:        $this->response->redirect($this->options->adminUrl);
./var/Widget/Themes/Files.php:        $this->widget('Widget_User')->pass('administrator');
./var/Widget/Themes/Files.php:        $this->_currentTheme = $this->request->filter('slug')->get('theme', $this->widget('Widget_Options')->theme);
./var/Widget/Themes/Files.php:        if (preg_match("/^([_0-9a-z-\.\ ])+$/i", $this->_currentTheme)
./var/Widget/Themes/Files.php:            && is_dir($dir = $this->widget('Widget_Options')->themeFile($this->_currentTheme))
./var/Widget/Themes/Files.php:            $this->_currentFile = $this->request->get('file', 'index.php');
./var/Widget/Themes/Files.php:            if (preg_match("/^([_0-9a-z-\.\ ])+$/i", $this->_currentFile)
./var/Widget/Themes/Files.php:            && file_exists($dir . '/' . $this->_currentFile)) {
./var/Widget/Themes/Files.php:                        $this->push(array(
./var/Widget/Themes/Files.php:                            'theme'     =>  $this->_currentTheme,
./var/Widget/Themes/Files.php:                            'current'   =>  ($file == $this->_currentFile)
./var/Widget/Themes/Files.php:        return _t('编辑文件 %s', $this->_currentFile);
./var/Widget/Themes/Files.php:        return htmlspecialchars(file_get_contents($this->widget('Widget_Options')
./var/Widget/Themes/Files.php:            ->themeFile($this->_currentTheme, $this->_currentFile)));
./var/Widget/Themes/Files.php:        return is_writeable($this->widget('Widget_Options')
./var/Widget/Themes/Files.php:            ->themeFile($this->_currentTheme, $this->_currentFile)) && !Typecho_Common::isAppEngine()
./var/Widget/Themes/Files.php:        return $this->_currentFile;
./var/Widget/Themes/Files.php:        return $this->_currentTheme;
./var/Widget/Themes/List.php:        $themes = $this->getThemes();
./var/Widget/Themes/List.php:            $options = $this->widget('Widget_Options');
./var/Widget/Themes/List.php:                    $info['name'] = $this->getTheme($theme, $key);
./var/Widget/Upgrade.php:        return version_compare($rev, $this->_currentVersion, '>');
./var/Widget/Upgrade.php:        list($prefix, $this->_currentVersion) = explode('/', $this->options->generator);
./var/Widget/Upgrade.php:            $options = $this->widget('Widget_Options@' . $package);
./var/Widget/Upgrade.php:                $result = call_user_func(array('Upgrade', $package), $this->db, $options);
./var/Widget/Upgrade.php:                $this->widget('Widget_Notice')->set($e->getMessage(), 'error');
./var/Widget/Upgrade.php:                $this->response->goBack();
./var/Widget/Upgrade.php:            $this->update(array('value' => 'Typecho ' . $ver . '/' . $rev),
./var/Widget/Upgrade.php:            $this->db->sql()->where('name = ?', 'generator'));
./var/Widget/Upgrade.php:            $this->destory('Widget_Options@' . $package);
./var/Widget/Upgrade.php:        $this->update(array('value' => 'Typecho ' . Typecho_Common::VERSION),
./var/Widget/Upgrade.php:        $this->db->sql()->where('name = ?', 'generator'));
./var/Widget/Upgrade.php:        $this->widget('Widget_Notice')->set(empty($message) ? _t("升级已经完成") : $message,
./var/Widget/Upgrade.php:        $this->user->pass('administrator');
./var/Widget/Upgrade.php:        $this->security->protect();
./var/Widget/Upgrade.php:        $this->on($this->request->isPost())->upgrade();
./var/Widget/Upgrade.php:        $this->response->redirect($this->options->adminUrl);
./var/Widget/Upload.php:                if ($this->request->isAjax()) {
./var/Widget/Upload.php:                    $this->pluginHandle()->beforeUpload($result);
./var/Widget/Upload.php:                    if (isset($this->request->cid)) {
./var/Widget/Upload.php:                        $cid = $this->request->filter('int')->cid;
./var/Widget/Upload.php:                        if ($this->isWriteable($this->db->sql()->where('cid = ?', $cid))) {
./var/Widget/Upload.php:                    $insertId = $this->insert($struct);
./var/Widget/Upload.php:                    $this->db->fetchRow($this->select()->where('table.contents.cid = ?', $insertId)
./var/Widget/Upload.php:                    $this->pluginHandle()->upload($this);
./var/Widget/Upload.php:                    $this->response->throwJson(array($this->attachment->url, array(
./var/Widget/Upload.php:                        'title'     =>  $this->attachment->name,
./var/Widget/Upload.php:                        'type'      =>  $this->attachment->type,
./var/Widget/Upload.php:                        'size'      =>  $this->attachment->size,
./var/Widget/Upload.php:                        'bytes'      =>  number_format(ceil($this->attachment->size / 1024)) . ' Kb',
./var/Widget/Upload.php:                        'isImage'   =>  $this->attachment->isImage,
./var/Widget/Upload.php:                        'url'       =>  $this->attachment->url,
./var/Widget/Upload.php:                        'permalink' =>  $this->permalink
./var/Widget/Upload.php:        $this->response->throwJson(false);
./var/Widget/Upload.php:                $this->db->fetchRow($this->select()->where('table.contents.cid = ?', $this->request->filter('int')->cid)
./var/Widget/Upload.php:                if (!$this->have()) {
./var/Widget/Upload.php:                    $this->response->setStatus(404);
./var/Widget/Upload.php:                if (!$this->allow('edit')) {
./var/Widget/Upload.php:                    $this->response->setStatus(403);
./var/Widget/Upload.php:                if ($this->request->isAjax()) {
./var/Widget/Upload.php:                $result = self::modifyHandle($this->row, $file);
./var/Widget/Upload.php:                    $this->pluginHandle()->beforeModify($result);
./var/Widget/Upload.php:                    $this->update(array(
./var/Widget/Upload.php:                    ), $this->db->sql()->where('cid = ?', $this->cid));
./var/Widget/Upload.php:                    $this->db->fetchRow($this->select()->where('table.contents.cid = ?', $this->cid)
./var/Widget/Upload.php:                    $this->pluginHandle()->modify($this);
./var/Widget/Upload.php:                    $this->response->throwJson(array($this->attachment->url, array(
./var/Widget/Upload.php:                        'cid'       =>  $this->cid,
./var/Widget/Upload.php:                        'title'     =>  $this->attachment->name,
./var/Widget/Upload.php:                        'type'      =>  $this->attachment->type,
./var/Widget/Upload.php:                        'size'      =>  $this->attachment->size,
./var/Widget/Upload.php:                        'bytes'      =>  number_format(ceil($this->attachment->size / 1024)) . ' Kb',
./var/Widget/Upload.php:                        'isImage'   =>  $this->attachment->isImage,
./var/Widget/Upload.php:                        'url'       =>  $this->attachment->url,
./var/Widget/Upload.php:                        'permalink' =>  $this->permalink
./var/Widget/Upload.php:        $this->response->throwJson(false);
./var/Widget/Upload.php:        if ($this->user->pass('contributor', true) && $this->request->isPost()) {
./var/Widget/Upload.php:            $this->security->protect();
./var/Widget/Upload.php:            if ($this->request->is('do=modify&cid')) {
./var/Widget/Upload.php:                $this->modify();
./var/Widget/Upload.php:                $this->upload();
./var/Widget/Upload.php:            $this->response->setStatus(403);
./var/Widget/User.php:        $this->db = Typecho_Db::get();
./var/Widget/User.php:        $this->options = $this->widget('Widget_Options');
./var/Widget/User.php:        if ($this->hasLogin()) {
./var/Widget/User.php:            $rows = $this->db->fetchAll($this->db->select()
./var/Widget/User.php:            ->from('table.options')->where('user = ?', $this->_user['uid']));
./var/Widget/User.php:            $this->push($this->_user);
./var/Widget/User.php:                $this->options->__set($row['name'], $row['value']);
./var/Widget/User.php:            $this->db->query($this->db
./var/Widget/User.php:            ->rows(array('activated' => $this->options->gmtTime))
./var/Widget/User.php:            ->where('uid = ?', $this->_user['uid']));
./var/Widget/User.php:        $result = $this->pluginHandle()->trigger($loginPluggable)->login($name, $password, $temporarily, $expire);
./var/Widget/User.php:        $user = $this->db->fetchRow($this->db->select()
./var/Widget/User.php:        $hashValidate = $this->pluginHandle()->trigger($hashPluggable)->hashValidate($password, $user['password']);
./var/Widget/User.php:                $this->db->query($this->db
./var/Widget/User.php:            $this->push($user);
./var/Widget/User.php:            $this->_hasLogin = true;
./var/Widget/User.php:            $this->pluginHandle()->loginSucceed($this, $name, $password, $temporarily, $expire);
./var/Widget/User.php:        $this->pluginHandle()->loginFail($this, $name, $password, $temporarily, $expire);
./var/Widget/User.php:        $user = $this->db->fetchRow($this->db->select()
./var/Widget/User.php:        $this->push($user);
./var/Widget/User.php:        $this->_hasLogin = true;
./var/Widget/User.php:        $this->pluginHandle()->trigger($logoutPluggable)->logout();
./var/Widget/User.php:        if (NULL !== $this->_hasLogin) {
./var/Widget/User.php:            return $this->_hasLogin;
./var/Widget/User.php:                $user = $this->db->fetchRow($this->db->select()->from('table.users')
./var/Widget/User.php:                    $this->_user = $user;
./var/Widget/User.php:                    return ($this->_hasLogin = true);
./var/Widget/User.php:                $this->logout();
./var/Widget/User.php:            return ($this->_hasLogin = false);
./var/Widget/User.php:        if ($this->hasLogin()) {
./var/Widget/User.php:            if (array_key_exists($group, $this->groups) && $this->groups[$this->group] <= $this->groups[$group]) {
./var/Widget/User.php:                $this->response->redirect($this->options->loginUrl .
./var/Widget/User.php:                (0 === strpos($this->request->getReferer(), $this->options->loginUrl) ? '' :
./var/Widget/User.php:                '?referer=' . urlencode($this->request->makeUriByRequest())), false);
./var/Widget/Users/Admin.php:        $parts = parse_url($this->url);
./var/Widget/Users/Admin.php:        return $this->db->fetchObject($this->db->select(array('COUNT(cid)' => 'num'))
./var/Widget/Users/Admin.php:                    ->where('table.contents.authorId = ?', $this->uid))->num;
./var/Widget/Users/Admin.php:        $this->parameter->setDefault('pageSize=20');
./var/Widget/Users/Admin.php:        $select = $this->select();
./var/Widget/Users/Admin.php:        $this->_currentPage = $this->request->get('page', 1);
./var/Widget/Users/Admin.php:        if (NULL != ($keywords = $this->request->keywords)) {
./var/Widget/Users/Admin.php:        $this->_countSql = clone $select;
./var/Widget/Users/Admin.php:        ->page($this->_currentPage, $this->parameter->pageSize);
./var/Widget/Users/Admin.php:        $this->db->fetchAll($select, array($this, 'push'));
./var/Widget/Users/Admin.php:        $query = $this->request->makeUriByRequest('page={page}');;
./var/Widget/Users/Admin.php:        $nav = new Typecho_Widget_Helper_PageNavigator_Box(false === $this->_total ? $this->_total = $this->size($this->_countSql) : $this->_total,
./var/Widget/Users/Admin.php:        $this->_currentPage, $this->parameter->pageSize, $query);
./var/Widget/Users/Author.php:        if ($this->parameter->uid) {
./var/Widget/Users/Author.php:            $this->db->fetchRow($this->select()
./var/Widget/Users/Author.php:            ->where('uid = ?', $this->parameter->uid), array($this, 'push'));
./var/Widget/Users/Edit.php:        return 'page=' . $this->getPageOffset('uid', $uid);
./var/Widget/Users/Edit.php:        $this->user->pass('administrator');
./var/Widget/Users/Edit.php:        if (($this->request->uid && 'delete' != $this->request->do) || 'update' == $this->request->do) {
./var/Widget/Users/Edit.php:            $this->db->fetchRow($this->select()
./var/Widget/Users/Edit.php:            ->where('uid = ?', $this->request->uid)->limit(1), array($this, 'push'));
./var/Widget/Users/Edit.php:            if (!$this->have()) {
./var/Widget/Users/Edit.php:        return _t('编辑用户 %s', $this->name);
./var/Widget/Users/Edit.php:        $user = $this->db->fetchRow($this->db->select()
./var/Widget/Users/Edit.php:        $form = new Typecho_Widget_Helper_Form($this->security->getIndex('/action/users-edit'),
./var/Widget/Users/Edit.php:        if (NULL != $this->request->uid) {
./var/Widget/Users/Edit.php:            $name->value($this->name);
./var/Widget/Users/Edit.php:            $screenName->value($this->screenName);
./var/Widget/Users/Edit.php:            $url->value($this->url);
./var/Widget/Users/Edit.php:            $mail->value($this->mail);
./var/Widget/Users/Edit.php:            $group->value($this->group);
./var/Widget/Users/Edit.php:            $uid->value($this->uid);
./var/Widget/Users/Edit.php:        if ($this->form('insert')->validate()) {
./var/Widget/Users/Edit.php:            $this->response->goBack();
./var/Widget/Users/Edit.php:        $user = $this->request->from('name', 'mail', 'screenName', 'password', 'url', 'group');
./var/Widget/Users/Edit.php:        $user['created'] = $this->options->gmtTime;
./var/Widget/Users/Edit.php:        $user['uid'] = $this->insert($user);
./var/Widget/Users/Edit.php:        $this->widget('Widget_Notice')->highlight('user-' . $user['uid']);
./var/Widget/Users/Edit.php:        $this->widget('Widget_Notice')->set(_t('用户 %s 已经被增加', $user['screenName']), 'success');
./var/Widget/Users/Edit.php:        $this->response->redirect(Typecho_Common::url('manage-users.php', $this->options->adminUrl));
./var/Widget/Users/Edit.php:        if ($this->form('update')->validate()) {
./var/Widget/Users/Edit.php:            $this->response->goBack();
./var/Widget/Users/Edit.php:        $user = $this->request->from('mail', 'screenName', 'password', 'url', 'group');
./var/Widget/Users/Edit.php:        $this->update($user, $this->db->sql()->where('uid = ?', $this->request->uid));
./var/Widget/Users/Edit.php:        $this->widget('Widget_Notice')->highlight('user-' . $this->request->uid);
./var/Widget/Users/Edit.php:        $this->widget('Widget_Notice')->set(_t('用户 %s 已经被更新', $user['screenName']), 'success');
./var/Widget/Users/Edit.php:        $this->response->redirect(Typecho_Common::url('manage-users.php?' .
./var/Widget/Users/Edit.php:        $this->getPageOffsetQuery($this->request->uid), $this->options->adminUrl));
./var/Widget/Users/Edit.php:        $users = $this->request->filter('int')->getArray('uid');
./var/Widget/Users/Edit.php:        $masterUserId = $this->db->fetchObject($this->db->select(array('MIN(uid)' => 'num'))->from('table.users'))->num;
./var/Widget/Users/Edit.php:            if ($masterUserId == $user || $user == $this->user->id) {
./var/Widget/Users/Edit.php:            if ($this->delete($this->db->sql()->where('uid = ?', $user))) {
./var/Widget/Users/Edit.php:        $this->widget('Widget_Notice')->set($deleteCount > 0 ? _t('用户已经删除') : _t('没有用户被删除'),
./var/Widget/Users/Edit.php:        $this->response->redirect(Typecho_Common::url('manage-users.php', $this->options->adminUrl));
./var/Widget/Users/Edit.php:        $this->user->pass('administrator');
./var/Widget/Users/Edit.php:        $this->security->protect();
./var/Widget/Users/Edit.php:        $this->on($this->request->is('do=insert'))->insertUser();
./var/Widget/Users/Edit.php:        $this->on($this->request->is('do=update'))->updateUser();
./var/Widget/Users/Edit.php:        $this->on($this->request->is('do=delete'))->deleteUser();
./var/Widget/Users/Edit.php:        $this->response->redirect($this->options->adminUrl);
./var/Widget/Users/Profile.php:        $this->user->pass('subscriber');
./var/Widget/Users/Profile.php:        $this->request->setParam('uid', $this->user->uid);
./var/Widget/Users/Profile.php:        $form = new Typecho_Widget_Helper_Form($this->security->getIndex('/action/users-profile'),
./var/Widget/Users/Profile.php:        $screenName->value($this->user->screenName);
./var/Widget/Users/Profile.php:        $url->value($this->user->url);
./var/Widget/Users/Profile.php:        $mail->value($this->user->mail);
./var/Widget/Users/Profile.php:        $form = new Typecho_Widget_Helper_Form($this->security->getIndex('/action/users-profile'),
./var/Widget/Users/Profile.php:        $this->options->markdown, _t('使用 Markdown 语法编辑和解析内容'), 
./var/Widget/Users/Profile.php:        $this->options->autoSave, _t('自动保存'), _t('自动保存功能可以更好地保护你的文章不会丢失.'));
./var/Widget/Users/Profile.php:        if ($this->options->defaultAllowComment) {
./var/Widget/Users/Profile.php:        if ($this->options->defaultAllowPing) {
./var/Widget/Users/Profile.php:        if ($this->options->defaultAllowFeed) {
./var/Widget/Users/Profile.php:        $form = new Typecho_Widget_Helper_Form($this->security->getIndex('/action/users-profile'),
./var/Widget/Users/Profile.php:        $options = $this->options->personalPlugin($pluginName);
./var/Widget/Users/Profile.php:        $this->widget('Widget_Plugins_List@personalPlugins', 'activated=1')->to($plugins);
./var/Widget/Users/Profile.php:                    $this->options->pluginDir($plugins->name));
./var/Widget/Users/Profile.php:                $form = $this->personalForm($plugins->name, $className, $pluginFileName, $group);
./var/Widget/Users/Profile.php:                if ($this->user->pass($group, true)) {
./var/Widget/Users/Profile.php:        $form = new Typecho_Widget_Helper_Form($this->security->getIndex('/action/users-profile'),
./var/Widget/Users/Profile.php:        if ($this->profileForm()->validate()) {
./var/Widget/Users/Profile.php:            $this->response->goBack();
./var/Widget/Users/Profile.php:        $user = $this->request->from('mail', 'screenName', 'url');
./var/Widget/Users/Profile.php:        $this->update($user, $this->db->sql()->where('uid = ?', $this->user->uid));
./var/Widget/Users/Profile.php:        $this->widget('Widget_Notice')->highlight('user-' . $this->user->uid);
./var/Widget/Users/Profile.php:        $this->widget('Widget_Notice')->set(_t('您的档案已经更新'), 'success');
./var/Widget/Users/Profile.php:        $this->response->goBack();
./var/Widget/Users/Profile.php:        $settings['autoSave'] = $this->request->autoSave ? 1 : 0;
./var/Widget/Users/Profile.php:        $settings['markdown'] = $this->request->markdown ? 1 : 0;
./var/Widget/Users/Profile.php:        $defaultAllow = $this->request->getArray('defaultAllow');
./var/Widget/Users/Profile.php:            if ($this->db->fetchObject($this->db->select(array('COUNT(*)' => 'num'))
./var/Widget/Users/Profile.php:            ->from('table.options')->where('name = ? AND user = ?', $name, $this->user->uid))->num > 0) {
./var/Widget/Users/Profile.php:                $this->widget('Widget_Abstract_Options')
./var/Widget/Users/Profile.php:                ->update(array('value' => $value), $this->db->sql()->where('name = ? AND user = ?', $name, $this->user->uid));
./var/Widget/Users/Profile.php:                $this->widget('Widget_Abstract_Options')->insert(array(
./var/Widget/Users/Profile.php:                    'user'  =>  $this->user->uid
./var/Widget/Users/Profile.php:        $this->widget('Widget_Notice')->set(_t("设置已经保存"), 'success');
./var/Widget/Users/Profile.php:        $this->response->goBack();
./var/Widget/Users/Profile.php:        if ($this->passwordForm()->validate()) {
./var/Widget/Users/Profile.php:            $this->response->goBack();
./var/Widget/Users/Profile.php:        $password = $hasher->HashPassword($this->request->password);
./var/Widget/Users/Profile.php:        $this->update(array('password' => $password),
./var/Widget/Users/Profile.php:        $this->db->sql()->where('uid = ?', $this->user->uid));
./var/Widget/Users/Profile.php:        $this->widget('Widget_Notice')->highlight('user-' . $this->user->uid);
./var/Widget/Users/Profile.php:        $this->widget('Widget_Notice')->set(_t('密码已经成功修改'), 'success');
./var/Widget/Users/Profile.php:        $this->response->goBack();
./var/Widget/Users/Profile.php:        $pluginName = $this->request->plugin;
./var/Widget/Users/Profile.php:        list($pluginFileName, $className) = Typecho_Plugin::portal($this->request->plugin,
./var/Widget/Users/Profile.php:        $form = $this->personalForm($pluginName, $className, $pluginFileName, $group);
./var/Widget/Users/Profile.php:        $this->user->pass($group);
./var/Widget/Users/Profile.php:            $this->response->goBack();
./var/Widget/Users/Profile.php:        if (!$this->personalConfigHandle($className, $settings)) {
./var/Widget/Users/Profile.php:            if ($this->db->fetchObject($this->db->select(array('COUNT(*)' => 'num'))
./var/Widget/Users/Profile.php:            ->from('table.options')->where('name = ? AND user = ?', $name, $this->user->uid))->num > 0) {
./var/Widget/Users/Profile.php:                $this->widget('Widget_Abstract_Options')
./var/Widget/Users/Profile.php:                ->update(array('value' => serialize($settings)), $this->db->sql()->where('name = ? AND user = ?', $name, $this->user->uid));
./var/Widget/Users/Profile.php:                $this->widget('Widget_Abstract_Options')->insert(array(
./var/Widget/Users/Profile.php:                    'user'  =>  $this->user->uid
./var/Widget/Users/Profile.php:        $this->widget('Widget_Notice')->set(_t("%s 设置已经保存", $info['title']), 'success');
./var/Widget/Users/Profile.php:        $this->response->redirect(Typecho_Common::url('profile.php', $this->options->adminUrl));
./var/Widget/Users/Profile.php:        $this->security->protect();
./var/Widget/Users/Profile.php:        $this->on($this->request->is('do=profile'))->updateProfile();
./var/Widget/Users/Profile.php:        $this->on($this->request->is('do=options'))->updateOptions();
./var/Widget/Users/Profile.php:        $this->on($this->request->is('do=password'))->updatePassword();
./var/Widget/Users/Profile.php:        $this->on($this->request->is('do=personal&plugin'))->updatePersonal();
./var/Widget/Users/Profile.php:        $this->response->redirect($this->options->siteUrl);
./var/Widget/XmlRpc.php:        $agent = $this->request->getAgent();
./var/Widget/XmlRpc.php:        $this->_usedWidgetNameList[] = $alias;
./var/Widget/XmlRpc.php:        $this->_wpOptions = array(
./var/Widget/XmlRpc.php:				'value'			=> $this->options->software
./var/Widget/XmlRpc.php:				'value'			=> $this->options->version
./var/Widget/XmlRpc.php:                'value'         => $this->options->siteUrl.'admin/login.php'
./var/Widget/XmlRpc.php:                'value'         => $this->options->siteUrl.'admin/'
./var/Widget/XmlRpc.php:        if ($this->user->login($name, $password, true)) {
./var/Widget/XmlRpc.php:            if ($this->user->pass($level, true)) {
./var/Widget/XmlRpc.php:                $this->error = new IXR_Error(403, _t('权限不足'));
./var/Widget/XmlRpc.php:            $this->error = new IXR_Error(403, _t('无法登陆, 密码错误'));
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password)) {
./var/Widget/XmlRpc.php:            return $this->error;
./var/Widget/XmlRpc.php:            $page = $this->singletonWidget('Widget_Contents_Page_Edit', NULL, "cid={$pageId}");
./var/Widget/XmlRpc.php:        list($excerpt, $more) = $this->getPostExtended($page);
./var/Widget/XmlRpc.php:            'dateCreated'   => new IXR_Date($this->options->timezone + $page->created),
./var/Widget/XmlRpc.php:            'page_status'   => $this->typechoToWordpressStatus($page->status, 'page'),
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password)) {
./var/Widget/XmlRpc.php:            return $this->error;
./var/Widget/XmlRpc.php:        $pages = $this->singletonWidget('Widget_Contents_Page_Admin', NULL, 'status=all');
./var/Widget/XmlRpc.php:            list($excerpt, $more) = $this->getPostExtended($pages);
./var/Widget/XmlRpc.php:                'dateCreated'            => new IXR_Date($this->options->timezone + $pages->created),
./var/Widget/XmlRpc.php:                'page_status'            => $this->typechoToWordpressStatus($pages->status, 'page'),
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password, 'editor')) {
./var/Widget/XmlRpc.php:            return $this->error;
./var/Widget/XmlRpc.php:        $this->mwNewPost($blogId, $userName, $password, $content, $publish);
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password, 'editor')) {
./var/Widget/XmlRpc.php:            return $this->error;
./var/Widget/XmlRpc.php:            $this->singletonWidget('Widget_Contents_Page_Edit', NULL, "cid={$pageId}", false)->deletePage();
./var/Widget/XmlRpc.php:        $this->mwEditPost($blogId, $pageId, $userName, $password, $content, $publish);
./var/Widget/XmlRpc.php:        $post = $this->singletonWidget('Widget_Archive', 'type=single', 'cid=' . $postId, false);
./var/Widget/XmlRpc.php:            $updateRows = $this->update($attachment, $this->db->sql()->where('cid = ?', $postId));
./var/Widget/XmlRpc.php:        return $this->mwEditPost($blogId, $postId, $userName, $password, $content);
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password, 'editor')) {
./var/Widget/XmlRpc.php:            return ($this->error);
./var/Widget/XmlRpc.php:        $pages = $this->singletonWidget('Widget_Contents_Page_Admin', NULL, 'status=all');
./var/Widget/XmlRpc.php:                'dateCreated'       => new IXR_Date($this->options->timezone + $pages->created),
./var/Widget/XmlRpc.php:                'date_created_gmt'  => new IXR_Date($this->options->timezone + $pages->created),
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password, 'editor')) {
./var/Widget/XmlRpc.php:            return ($this->error);
./var/Widget/XmlRpc.php:        $select = $this->db->select('table.users.uid', 'table.users.name', 'table.users.screenName')->from('table.users');
./var/Widget/XmlRpc.php:        $authors = $this->db->fetchAll($select);
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password)) {
./var/Widget/XmlRpc.php:            return ($this->error);
./var/Widget/XmlRpc.php:             $categoryWidget = $this->singletonWidget('Widget_Metas_Category_Edit', NULL, $input, false);
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password)) {
./var/Widget/XmlRpc.php:            return ($this->error);
./var/Widget/XmlRpc.php:        $meta = $this->singletonWidget('Widget_Abstract_Metas');
./var/Widget/XmlRpc.php:        $categories = $this->db->fetchAll($select);
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password)) {
./var/Widget/XmlRpc.php:            return $this->error;
./var/Widget/XmlRpc.php:            'isAdmin'   => $this->user->pass('administrator', true),
./var/Widget/XmlRpc.php:            'url'       => $this->options->siteUrl,
./var/Widget/XmlRpc.php:            'blogName'  => $this->options->title,
./var/Widget/XmlRpc.php:            'xmlrpc'    => $this->options->xmlRpcUrl
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password)) {
./var/Widget/XmlRpc.php:            return $this->error;
./var/Widget/XmlRpc.php:            'user_id'       => $this->user->uid,
./var/Widget/XmlRpc.php:            'username'      => $this->user->name,
./var/Widget/XmlRpc.php:            'registered'    => new IXR_Date($this->options->timezone +  $this->user->created),
./var/Widget/XmlRpc.php:            'email'         => $this->user->mail,
./var/Widget/XmlRpc.php:            'nickname'      => $this->user->screenName,
./var/Widget/XmlRpc.php:            'url'           => $this->user->url,
./var/Widget/XmlRpc.php:            'display_name'  => $this->user->screenName,
./var/Widget/XmlRpc.php:            'roles'         => $this->user->group
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password)) {
./var/Widget/XmlRpc.php:            return $this->error;
./var/Widget/XmlRpc.php:        $tags = $this->singletonWidget('Widget_Metas_Tag_Cloud');
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password, 'editor')) {
./var/Widget/XmlRpc.php:            return $this->error;
./var/Widget/XmlRpc.php:            $this->singletonWidget('Widget_Metas_Category_Edit', NULL, 'do=delete&mid=' . intval($categoryId), false);
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password)) {
./var/Widget/XmlRpc.php:            return $this->error;
./var/Widget/XmlRpc.php:        $stat = $this->singletonWidget('Widget_Stat', NULL, 'cid=' . intval($postId), false);
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password)) {
./var/Widget/XmlRpc.php:            return $this->error;
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password)) {
./var/Widget/XmlRpc.php:            return $this->error;
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password, 'editor')) {
./var/Widget/XmlRpc.php:            return $this->error;
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password)) {
./var/Widget/XmlRpc.php:            return $this->error;
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password, 'editor')) {
./var/Widget/XmlRpc.php:            return $this->error;
./var/Widget/XmlRpc.php:        $templates = array_flip($this->getTemplates());
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password, 'administrator')) {
./var/Widget/XmlRpc.php:            return $this->error;
./var/Widget/XmlRpc.php:            $options = array_keys($this->_wpOptions);
./var/Widget/XmlRpc.php:            if (isset($this->_wpOptions[$option])) {
./var/Widget/XmlRpc.php:                $struct[$option] = $this->_wpOptions[$option];
./var/Widget/XmlRpc.php:                    $struct[$option]['value'] = $this->options->{$struct[$option]['option']};
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password, 'administrator')) {
./var/Widget/XmlRpc.php:            return $this->error;
./var/Widget/XmlRpc.php:            if (isset($this->_wpOptions[$option])) {
./var/Widget/XmlRpc.php:                $struct[$option] = $this->_wpOptions[$option];
./var/Widget/XmlRpc.php:                    $struct[$option]['value'] = $this->options->{$struct[$option]['option']};
./var/Widget/XmlRpc.php:                if (!$this->_wpOptions[$option]['readonly'] && isset($this->_wpOptions[$option]['option'])) {
./var/Widget/XmlRpc.php:                    if ($this->db->query($this->db->update('table.options')
./var/Widget/XmlRpc.php:                    ->where('name = ?', $this->_wpOptions[$option]['option'])) > 0) {
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password)) {
./var/Widget/XmlRpc.php:            return $this->error;
./var/Widget/XmlRpc.php:        $comment = $this->singletonWidget('Widget_Comments_Edit', NULL, 'do=get&coid=' . intval($commentId), false);
./var/Widget/XmlRpc.php:            'date_created_gmt'		=> new IXR_Date($this->options->timezone + $comment->created),
./var/Widget/XmlRpc.php:			'status'				=> $this->typechoToWordpressStatus($comment->status, 'comment'),
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password)) {
./var/Widget/XmlRpc.php:            return $this->error;
./var/Widget/XmlRpc.php:                $this->wordpressToTypechoStatus($struct['status']);
./var/Widget/XmlRpc.php:        $comments = $this->singletonWidget('Widget_Comments_Admin', 'pageSize=' . $pageSize, $input, false);
./var/Widget/XmlRpc.php:                'date_created_gmt'		=> new IXR_Date($this->options->timezone + $comments->created),
./var/Widget/XmlRpc.php:                'status'				=> $this->typechoToWordpressStatus($comments->status, 'comment'),
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password)) {
./var/Widget/XmlRpc.php:            return $this->error;
./var/Widget/XmlRpc.php:        $commentWidget = $this->singletonWidget('Widget_Abstract_Comments');
./var/Widget/XmlRpc.php:        $where = $this->db->sql()->where('coid = ?', $commentId);
./var/Widget/XmlRpc.php:        return intval($this->singletonWidget('Widget_Abstract_Comments')->delete($where)) > 0;
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password)) {
./var/Widget/XmlRpc.php:            return $this->error;
./var/Widget/XmlRpc.php:        $commentWidget = $this->singletonWidget('Widget_Abstract_Comments');
./var/Widget/XmlRpc.php:        $where = $this->db->sql()->where('coid = ?', $commentId);
./var/Widget/XmlRpc.php:            $input['created'] = $struct['date_created_gmt']->getTimestamp() - $this->options->timezone + $this->options->serverTimezone;
./var/Widget/XmlRpc.php:            $input['status'] = $this->wordpressToTypechoStatus($struct['status'], 'comment');
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password)) {
./var/Widget/XmlRpc.php:            return $this->error;
./var/Widget/XmlRpc.php:            $post = $this->singletonWidget('Widget_Archive', 'type=single', 'cid=' . $path, false);
./var/Widget/XmlRpc.php:            $pathInfo = Typecho_Common::url(substr($path, strlen($this->options->index)), '/');
./var/Widget/XmlRpc.php:            $commentWidget =  $this->singletonWidget('Widget_Feedback', 'checkReferer=false', $input, false);
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password)) {
./var/Widget/XmlRpc.php:            return $this->error;
./var/Widget/XmlRpc.php:        $attachments = $this->singletonWidget('Widget_Contents_Attachment_Admin', 'pageSize=' . $pageSize, $input, false);
./var/Widget/XmlRpc.php:                'date_created_gmt'      => new IXR_Date($this->options->timezone + $attachments->created),
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password)) {
./var/Widget/XmlRpc.php:            return $this->error;
./var/Widget/XmlRpc.php:        $attachment = $this->singletonWidget('Widget_Contents_Attachment_Edit', NULL, "cid={$attachmentId}");
./var/Widget/XmlRpc.php:            'date_created_gmt'      => new IXR_Date($this->options->timezone + $attachment->created),
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password)) {
./var/Widget/XmlRpc.php:            return $this->error;
./var/Widget/XmlRpc.php:        $input['text'] = $this->pluginHandle()->textFilter($input['text'], $this); 
./var/Widget/XmlRpc.php:            $input['created'] = $content['dateCreated']->getTimestamp() - $this->options->timezone + $this->options->serverTimezone;
./var/Widget/XmlRpc.php:                if (!$this->db->fetchRow($this->db->select('mid')
./var/Widget/XmlRpc.php:                    $result = $this->wpNewCategory($blogId, $userName, $password, array('name' => $category));
./var/Widget/XmlRpc.php:                $input['category'][] = $this->db->fetchObject($this->db->select('mid')
./var/Widget/XmlRpc.php:        || 'closed' == $content['mt_allow_comments'])) ? 0 : $this->options->defaultAllowComment);
./var/Widget/XmlRpc.php:        || 'closed' == $content['mt_allow_pings'])) ? 0 : $this->options->defaultAllowPing);
./var/Widget/XmlRpc.php:        $input['allowFeed'] = $this->options->defaultAllowFeed;
./var/Widget/XmlRpc.php:            $status = $this->wordpressToTypechoStatus($content["{$type}_status"], $type);
./var/Widget/XmlRpc.php:        $unattached = $this->db->fetchAll($this->select()->where('table.contents.type = ? AND
./var/Widget/XmlRpc.php:                $this->singletonWidget('Widget_Contents_Page_Edit', NULL, $input, false)->action();
./var/Widget/XmlRpc.php:                $this->singletonWidget('Widget_Contents_Post_Edit', NULL, $input, false)->action();
./var/Widget/XmlRpc.php:            return $this->singletonWidget('Widget_Notice')->getHighlightId();
./var/Widget/XmlRpc.php:        return $this->mwNewPost(1, $userName, $password, $content, $publish);
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password)) {
./var/Widget/XmlRpc.php:            return $this->error;
./var/Widget/XmlRpc.php:            $post = $this->singletonWidget('Widget_Contents_Post_Edit', NULL, "cid={$postId}");
./var/Widget/XmlRpc.php:        list($excerpt, $more) = $this->getPostExtended($post);
./var/Widget/XmlRpc.php:                'dateCreated'   => new IXR_Date($this->options->timezone + $post->created),
./var/Widget/XmlRpc.php:                'post_status'   => $this->typechoToWordpressStatus($post->status, 'post'),
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password)) {
./var/Widget/XmlRpc.php:            return $this->error;
./var/Widget/XmlRpc.php:        $posts = $this->singletonWidget('Widget_Contents_Post_Admin', "pageSize={$postsNum}", 'status=all');
./var/Widget/XmlRpc.php:            list($excerpt, $more) = $this->getPostExtended($posts);
./var/Widget/XmlRpc.php:                    'dateCreated'            => new IXR_Date($this->options->timezone + $posts->created),
./var/Widget/XmlRpc.php:                    'post_status'            => $this->typechoToWordpressStatus($posts->status, 'post'),
./var/Widget/XmlRpc.php:                    'date_modified'          => new IXR_Date($this->options->timezone + $posts->modified),
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password)) {
./var/Widget/XmlRpc.php:            return ($this->error);
./var/Widget/XmlRpc.php:        $categories = $this->singletonWidget('Widget_Metas_Category_List');
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password)) {
./var/Widget/XmlRpc.php:            return $this->error;
./var/Widget/XmlRpc.php:            $insertId = $this->insert(array(
./var/Widget/XmlRpc.php:            $this->db->fetchRow($this->select()->where('table.contents.cid = ?', $insertId)
./var/Widget/XmlRpc.php:            $this->pluginHandle()->upload($this);
./var/Widget/XmlRpc.php:                'file' => $this->attachment->name,
./var/Widget/XmlRpc.php:                'url'  => $this->attachment->url
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password)) {
./var/Widget/XmlRpc.php:            return ($this->error);
./var/Widget/XmlRpc.php:        $posts = $this->singletonWidget('Widget_Contents_Post_Admin', "pageSize=$postsNum", 'status=all');
./var/Widget/XmlRpc.php:                'dateCreated'       => new IXR_Date($this->options->timezone + $posts->created),
./var/Widget/XmlRpc.php:                'date_created_gmt'  => new IXR_Date($this->options->timezone + $posts->created)
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password)) {
./var/Widget/XmlRpc.php:            return ($this->error);
./var/Widget/XmlRpc.php:        $categories = $this->singletonWidget('Widget_Metas_Category_List');
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password)) {
./var/Widget/XmlRpc.php:            return $this->error;
./var/Widget/XmlRpc.php:            $post = $this->singletonWidget('Widget_Contents_Post_Edit', NULL, "cid={$postId}");
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password, 'editor')) {
./var/Widget/XmlRpc.php:            return $this->error;
./var/Widget/XmlRpc.php:            $post = $this->singletonWidget('Widget_Contents_Post_Edit', NULL, "cid={$postId}");
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password, 'editor')) {
./var/Widget/XmlRpc.php:            return $this->error;
./var/Widget/XmlRpc.php:        $select = $this->select()->where('table.contents.cid = ? AND table.contents.type = ?', $postId, 'post')->limit(1);
./var/Widget/XmlRpc.php:        $post = $this->$db->fetchRow($select, array($this, 'push'));
./var/Widget/XmlRpc.php:        if ($this->authorId != $this->user->uid && !$this->checkAccess($userName, $password, 'administrator')) {
./var/Widget/XmlRpc.php:        $this->update($content, $this->db->sql()->where('table.contents.cid = ?', $postId));
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password)) {
./var/Widget/XmlRpc.php:            return $this->error;
./var/Widget/XmlRpc.php:            'isAdmin'  => $this->user->pass('administrator', true),
./var/Widget/XmlRpc.php:            'url'	  => $this->options->siteUrl,
./var/Widget/XmlRpc.php:            'blogName' => $this->options->title,
./var/Widget/XmlRpc.php:            'xmlrpc'   => $this->options->xmlRpcUrl
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password)) {
./var/Widget/XmlRpc.php:            return $this->error;
./var/Widget/XmlRpc.php:            'nickname'  => $this->user->screenName,
./var/Widget/XmlRpc.php:            'userid'    => $this->user->uid,
./var/Widget/XmlRpc.php:            'url'       => $this->user->url,
./var/Widget/XmlRpc.php:            'email'     => $this->user->mail,
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password)) {
./var/Widget/XmlRpc.php:            return $this->error;
./var/Widget/XmlRpc.php:            $post = $this->singletonWidget('Widget_Contents_Post_Edit', NULL, "cid={$postId}");
./var/Widget/XmlRpc.php:            'dateCreated'   => new IXR_Date($this->options->timezone + $post->created),
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password)) {
./var/Widget/XmlRpc.php:            return $this->error;
./var/Widget/XmlRpc.php:            $this->singletonWidget('Widget_Contents_Post_Edit', NULL, "cid={$postId}", false)->deletePost();
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password)) {
./var/Widget/XmlRpc.php:            return $this->error;
./var/Widget/XmlRpc.php:        $posts = $this->singletonWidget('Widget_Contents_Post_Admin', "pageSize=$postsNum", 'status=all');
./var/Widget/XmlRpc.php:                'dateCreated'   => new IXR_Date($this->options->timezone + $posts->created),
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password)) {
./var/Widget/XmlRpc.php:            return $this->error;
./var/Widget/XmlRpc.php:        if (!$this->checkAccess($userName, $password)) {
./var/Widget/XmlRpc.php:            return $this->error;
./var/Widget/XmlRpc.php:        $pathInfo = Typecho_Common::url(substr($target, strlen($this->options->index)), '/');
./var/Widget/XmlRpc.php:                $pingNum = $this->db->fetchObject($this->db->select(array('COUNT(coid)' => 'num'))
./var/Widget/XmlRpc.php:                        'created'   =>  $this->options->gmtTime,
./var/Widget/XmlRpc.php:                        'agent'     =>  $this->request->getAgent(),
./var/Widget/XmlRpc.php:                        'ip'        =>  $this->request->getIp(),
./var/Widget/XmlRpc.php:                        'status'    =>  $this->options->commentsRequireModeration ? 'waiting' : 'approved'
./var/Widget/XmlRpc.php:                    $pingback = $this->pluginHandle()->pingback($pingback, $post);
./var/Widget/XmlRpc.php:                    $insertId = $this->singletonWidget('Widget_Abstract_Comments')->insert($pingback);
./var/Widget/XmlRpc.php:                    $this->pluginHandle()->finishPingback($this);
./var/Widget/XmlRpc.php:        if (!empty($this->_usedWidgetNameList)) {
./var/Widget/XmlRpc.php:            foreach ($this->_usedWidgetNameList as $key => $widgetName) {
./var/Widget/XmlRpc.php:                $this->destory($widgetName);
./var/Widget/XmlRpc.php:                unset($this->_usedWidgetNameList[$key]);
./var/Widget/XmlRpc.php:        if (isset($this->request->rsd)) {
./var/Widget/XmlRpc.php:<?xml version="1.0" encoding="{$this->options->charset}"?>
./var/Widget/XmlRpc.php:        <homePageLink>{$this->options->siteUrl}</homePageLink>
./var/Widget/XmlRpc.php:            <api name="WordPress" blogID="1" preferred="true" apiLink="{$this->options->xmlRpcUrl}" />
./var/Widget/XmlRpc.php:            <api name="Movable Type" blogID="1" preferred="false" apiLink="{$this->options->xmlRpcUrl}" />
./var/Widget/XmlRpc.php:            <api name="MetaWeblog" blogID="1" preferred="false" apiLink="{$this->options->xmlRpcUrl}" />
./var/Widget/XmlRpc.php:            <api name="Blogger" blogID="1" preferred="false" apiLink="{$this->options->xmlRpcUrl}" />
./var/Widget/XmlRpc.php:        } else if (isset($this->request->wlw)) {
./var/Widget/XmlRpc.php:<?xml version="1.0" encoding="{$this->options->charset}"?>
